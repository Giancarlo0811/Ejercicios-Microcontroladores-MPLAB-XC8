

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Apr 19 13:51:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 23/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000000                     _RCREG	set	4014
    55   000000                     _TXREG	set	4013
    56   000000                     _SPBRG	set	4015
    57   000000                     _BAUDCON	set	4024
    58   000000                     _RCSTAbits	set	4011
    59   000000                     _TXSTAbits	set	4012
    60   000000                     _BAUDCONbits	set	4024
    61   000000                     _TRISCbits	set	3988
    62   000000                     _ADCON1bits	set	4033
    63   000000                     _PIR1bits	set	3998
    64   000000                     _RCSTA	set	4011
    65   000000                     _TXSTA	set	4012
    66   000000                     _SPBRGH	set	4016
    67                           
    68                           	psect	smallconst
    69   000800                     __psmallconst:
    70                           	callstack 0
    71   000800  00                 	db	0
    72   000801                     STR_1:
    73   000801  44                 	db	68	;'D'
    74   000802  61                 	db	97	;'a'
    75   000803  74                 	db	116	;'t'
    76   000804  6F                 	db	111	;'o'
    77   000805  20                 	db	32
    78   000806  52                 	db	82	;'R'
    79   000807  65                 	db	101	;'e'
    80   000808  63                 	db	99	;'c'
    81   000809  69                 	db	105	;'i'
    82   00080A  62                 	db	98	;'b'
    83   00080B  69                 	db	105	;'i'
    84   00080C  64                 	db	100	;'d'
    85   00080D  6F                 	db	111	;'o'
    86   00080E  3A                 	db	58	;':'
    87   00080F  20                 	db	32
    88   000810  00                 	db	0
    89   000811                     STR_2:
    90   000811  0D                 	db	13
    91   000812  0A                 	db	10
    92   000813  00                 	db	0
    93   000814  00                 	db	0	; dummy byte at the end
    94   000000                     
    95                           ; #config settings
    96                           
    97                           	psect	cinit
    98   000A06                     __pcinit:
    99                           	callstack 0
   100   000A06                     start_initialization:
   101                           	callstack 0
   102   000A06                     __initialization:
   103                           	callstack 0
   104                           
   105                           ; Clear objects allocated to COMRAM (1 bytes)
   106   000A06  6A18               	clrf	__pbssCOMRAM& (0+255),c
   107   000A08                     end_of_initialization:
   108                           	callstack 0
   109   000A08                     __end_of__initialization:
   110                           	callstack 0
   111   000A08  0E00               	movlw	low (__Lsmallconst shr (0+16))
   112   000A0A  6EF8               	movwf	tblptru,c
   113   000A0C  0E08               	movlw	high __Lsmallconst
   114   000A0E  6EF7               	movwf	tblptrh,c
   115   000A10  0100               	movlb	0
   116   000A12  EF94  F004         	goto	_main	;jump to C main() function
   117                           
   118                           	psect	bssCOMRAM
   119   000018                     __pbssCOMRAM:
   120                           	callstack 0
   121   000018                     _dato_rx:
   122                           	callstack 0
   123   000018                     	ds	1
   124                           
   125                           	psect	cstackCOMRAM
   126   000001                     __pcstackCOMRAM:
   127                           	callstack 0
   128   000001                     ?_Uart_Available:
   129                           	callstack 0
   130   000001                     ?___lldiv:
   131                           	callstack 0
   132   000001                     Uart_Send_Char@txData:
   133                           	callstack 0
   134   000001                     ___lldiv@dividend:
   135                           	callstack 0
   136                           
   137                           ; 4 bytes @ 0x0
   138   000001                     	ds	1
   139   000002                     Uart_Send_String@info:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0x1
   143   000002                     	ds	1
   144   000003                     ??_Uart_Available:
   145   000003                     
   146                           ; 1 bytes @ 0x2
   147   000003                     	ds	2
   148   000005                     ___lldiv@divisor:
   149                           	callstack 0
   150                           
   151                           ; 4 bytes @ 0x4
   152   000005                     	ds	4
   153   000009                     ___lldiv@quotient:
   154                           	callstack 0
   155                           
   156                           ; 4 bytes @ 0x8
   157   000009                     	ds	4
   158   00000D                     ___lldiv@counter:
   159                           	callstack 0
   160                           
   161                           ; 1 bytes @ 0xC
   162   00000D                     	ds	1
   163   00000E                     Uart_Init@baud:
   164                           	callstack 0
   165                           
   166                           ; 4 bytes @ 0xD
   167   00000E                     	ds	4
   168   000012                     ??_Uart_Init:
   169                           
   170                           ; 1 bytes @ 0x11
   171   000012                     	ds	4
   172   000016                     Uart_Init@vx:
   173                           	callstack 0
   174                           
   175                           ; 2 bytes @ 0x15
   176   000016                     	ds	2
   177   000018                     
   178                           ; 1 bytes @ 0x17
   179 ;;
   180 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   181 ;;
   182 ;; *************** function _main *****************
   183 ;; Defined at:
   184 ;;		line 24 in file "uart_rx_datos.c"
   185 ;; Parameters:    Size  Location     Type
   186 ;;		None
   187 ;; Auto vars:     Size  Location     Type
   188 ;;		None
   189 ;; Return value:  Size  Location     Type
   190 ;;                  1    wreg      void 
   191 ;; Registers used:
   192 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   193 ;; Tracked objects:
   194 ;;		On entry : 0/0
   195 ;;		On exit  : 0/0
   196 ;;		Unchanged: 0/0
   197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   198 ;;      Params:         0       0       0       0       0       0       0       0       0
   199 ;;      Locals:         0       0       0       0       0       0       0       0       0
   200 ;;      Temps:          0       0       0       0       0       0       0       0       0
   201 ;;      Totals:         0       0       0       0       0       0       0       0       0
   202 ;;Total ram usage:        0 bytes
   203 ;; Hardware stack levels required when called: 2
   204 ;; This function calls:
   205 ;;		_Uart_Available
   206 ;;		_Uart_Init
   207 ;;		_Uart_Read
   208 ;;		_Uart_Send_Char
   209 ;;		_Uart_Send_String
   210 ;; This function is called by:
   211 ;;		Startup code after reset
   212 ;; This function uses a non-reentrant model
   213 ;;
   214                           
   215                           	psect	text0
   216   000928                     __ptext0:
   217                           	callstack 0
   218   000928                     _main:
   219                           	callstack 29
   220   000928                     
   221                           ;uart_rx_datos.c: 25:     ADCON1bits.PCFG = 0x0F;
   222   000928  0E0F               	movlw	15
   223   00092A  12C1               	iorwf	193,f,c	;volatile
   224   00092C                     
   225                           ;uart_rx_datos.c: 26:     Uart_Init(9600);
   226   00092C  0E80               	movlw	128
   227   00092E  6E0E               	movwf	Uart_Init@baud^0,c
   228   000930  0E25               	movlw	37
   229   000932  6E0F               	movwf	(Uart_Init@baud+1)^0,c
   230   000934  0E00               	movlw	0
   231   000936  6E10               	movwf	(Uart_Init@baud+2)^0,c
   232   000938  0E00               	movlw	0
   233   00093A  6E11               	movwf	(Uart_Init@baud+3)^0,c
   234   00093C  EC5D  F004         	call	_Uart_Init	;wreg free
   235   000940                     l937:
   236                           
   237                           ;uart_rx_datos.c: 29:         if (Uart_Available() > 0) {
   238   000940  ECEA  F004         	call	_Uart_Available	;wreg free
   239   000944  BE02               	btfsc	(?_Uart_Available+1)^0,7,c
   240   000946  EFAD  F004         	goto	u221
   241   00094A  5002               	movf	(?_Uart_Available+1)^0,w,c
   242   00094C  E108               	bnz	u220
   243   00094E  0401               	decf	?_Uart_Available^0,w,c
   244   000950  A0D8               	btfss	status,0,c
   245   000952  EFAD  F004         	goto	u221
   246   000956  EFAF  F004         	goto	u220
   247   00095A                     u221:
   248   00095A  EFA0  F004         	goto	l937
   249   00095E                     u220:
   250   00095E                     
   251                           ;uart_rx_datos.c: 30:             dato_rx = Uart_Read();
   252   00095E  ECD7  F004         	call	_Uart_Read	;wreg free
   253   000962  6E18               	movwf	_dato_rx^0,c
   254   000964                     
   255                           ;uart_rx_datos.c: 32:             Uart_Send_String("Dato Recibido: ");
   256   000964  0E01               	movlw	low STR_1
   257   000966  6E02               	movwf	Uart_Send_String@info^0,c
   258   000968  ECC1  F004         	call	_Uart_Send_String	;wreg free
   259   00096C                     
   260                           ;uart_rx_datos.c: 33:             Uart_Send_Char(dato_rx);
   261   00096C  5018               	movf	_dato_rx^0,w,c
   262   00096E  ECF8  F004         	call	_Uart_Send_Char
   263                           
   264                           ;uart_rx_datos.c: 34:             Uart_Send_String("\r\n");
   265   000972  0E11               	movlw	low STR_2
   266   000974  6E02               	movwf	Uart_Send_String@info^0,c
   267   000976  ECC1  F004         	call	_Uart_Send_String	;wreg free
   268   00097A  EFA0  F004         	goto	l937
   269   00097E  EF00  F000         	goto	start
   270   000982                     __end_of_main:
   271                           	callstack 0
   272                           
   273 ;; *************** function _Uart_Send_String *****************
   274 ;; Defined at:
   275 ;;		line 35 in file "uart.c"
   276 ;; Parameters:    Size  Location     Type
   277 ;;  info            1    1[COMRAM] PTR unsigned char 
   278 ;;		 -> STR_2(3), STR_1(16), 
   279 ;; Auto vars:     Size  Location     Type
   280 ;;		None
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : 0/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   290 ;;      Params:         1       0       0       0       0       0       0       0       0
   291 ;;      Locals:         0       0       0       0       0       0       0       0       0
   292 ;;      Temps:          0       0       0       0       0       0       0       0       0
   293 ;;      Totals:         1       0       0       0       0       0       0       0       0
   294 ;;Total ram usage:        1 bytes
   295 ;; Hardware stack levels used: 1
   296 ;; Hardware stack levels required when called: 1
   297 ;; This function calls:
   298 ;;		_Uart_Send_Char
   299 ;; This function is called by:
   300 ;;		_main
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           	psect	text1
   305   000982                     __ptext1:
   306                           	callstack 0
   307   000982                     _Uart_Send_String:
   308                           	callstack 29
   309   000982                     
   310                           ;uart.c: 35: void Uart_Send_String(char *info);uart.c: 36: {;uart.c: 37:     while(*info
      +                          )
   311   000982  EFCA  F004         	goto	l931
   312   000986                     l927:
   313                           
   314                           ;uart.c: 38:     {;uart.c: 39:         Uart_Send_Char(*info++);
   315   000986  C002  FFF6         	movff	Uart_Send_String@info,tblptrl
   316   00098A                     	if	0	;There is only one active tblptr byte
   317   00098A                     	endif
   318   00098A                     	if	0	;tblptru may be non-zero
   319   00098A                     	endif
   320   00098A                     	if	0	;tblptru may be non-zero
   321   00098A                     	endif
   322   00098A  0008               	tblrd		*
   323   00098C  50F5               	movf	tablat,w,c
   324   00098E  ECF8  F004         	call	_Uart_Send_Char
   325   000992  2A02               	incf	Uart_Send_String@info^0,f,c
   326   000994                     l931:
   327                           
   328                           ;uart.c: 37:     while(*info)
   329   000994  C002  FFF6         	movff	Uart_Send_String@info,tblptrl
   330   000998                     	if	0	;There is only one active tblptr byte
   331   000998                     	endif
   332   000998                     	if	0	;tblptru may be non-zero
   333   000998                     	endif
   334   000998                     	if	0	;tblptru may be non-zero
   335   000998                     	endif
   336   000998  0008               	tblrd		*
   337   00099A  50F5               	movf	tablat,w,c
   338   00099C  0900               	iorlw	0
   339   00099E  A4D8               	btfss	status,2,c
   340   0009A0  EFD4  F004         	goto	u211
   341   0009A4  EFD6  F004         	goto	u210
   342   0009A8                     u211:
   343   0009A8  EFC3  F004         	goto	l927
   344   0009AC                     u210:
   345   0009AC  0012               	return		;funcret
   346   0009AE                     __end_of_Uart_Send_String:
   347                           	callstack 0
   348                           
   349 ;; *************** function _Uart_Send_Char *****************
   350 ;; Defined at:
   351 ;;		line 29 in file "uart.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;  txData          1    wreg     unsigned char 
   354 ;; Auto vars:     Size  Location     Type
   355 ;;  txData          1    0[COMRAM] unsigned char 
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   365 ;;      Params:         0       0       0       0       0       0       0       0       0
   366 ;;      Locals:         1       0       0       0       0       0       0       0       0
   367 ;;      Temps:          0       0       0       0       0       0       0       0       0
   368 ;;      Totals:         1       0       0       0       0       0       0       0       0
   369 ;;Total ram usage:        1 bytes
   370 ;; Hardware stack levels used: 1
   371 ;; This function calls:
   372 ;;		Nothing
   373 ;; This function is called by:
   374 ;;		_main
   375 ;;		_Uart_Send_String
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           	psect	text2
   380   0009F0                     __ptext2:
   381                           	callstack 0
   382   0009F0                     _Uart_Send_Char:
   383                           	callstack 29
   384                           
   385                           ;incstack = 0
   386                           ;Uart_Send_Char@txData stored from wreg
   387   0009F0  6E01               	movwf	Uart_Send_Char@txData^0,c
   388   0009F2                     l56:
   389   0009F2  A2AC               	btfss	172,1,c	;volatile
   390   0009F4  EFFE  F004         	goto	u11
   391   0009F8  EF00  F005         	goto	u10
   392   0009FC                     u11:
   393   0009FC  EFF9  F004         	goto	l56
   394   000A00                     u10:
   395   000A00                     
   396                           ;uart.c: 32:     TXREG = txData;
   397   000A00  C001  FFAD         	movff	Uart_Send_Char@txData,4013	;volatile
   398   000A04  0012               	return		;funcret
   399   000A06                     __end_of_Uart_Send_Char:
   400                           	callstack 0
   401                           
   402 ;; *************** function _Uart_Read *****************
   403 ;; Defined at:
   404 ;;		line 43 in file "uart.c"
   405 ;; Parameters:    Size  Location     Type
   406 ;;		None
   407 ;; Auto vars:     Size  Location     Type
   408 ;;		None
   409 ;; Return value:  Size  Location     Type
   410 ;;                  1    wreg      unsigned char 
   411 ;; Registers used:
   412 ;;		wreg, status,2
   413 ;; Tracked objects:
   414 ;;		On entry : 0/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   418 ;;      Params:         0       0       0       0       0       0       0       0       0
   419 ;;      Locals:         0       0       0       0       0       0       0       0       0
   420 ;;      Temps:          0       0       0       0       0       0       0       0       0
   421 ;;      Totals:         0       0       0       0       0       0       0       0       0
   422 ;;Total ram usage:        0 bytes
   423 ;; Hardware stack levels used: 1
   424 ;; This function calls:
   425 ;;		Nothing
   426 ;; This function is called by:
   427 ;;		_main
   428 ;;		_Uart_Read_String
   429 ;;		_Uart_Read_StringUntil
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           	psect	text3
   434   0009AE                     __ptext3:
   435                           	callstack 0
   436   0009AE                     _Uart_Read:
   437                           	callstack 30
   438   0009AE                     l68:
   439   0009AE  AA9E               	btfss	158,5,c	;volatile
   440   0009B0  EFDC  F004         	goto	u71
   441   0009B4  EFDE  F004         	goto	u70
   442   0009B8                     u71:
   443   0009B8  EFD7  F004         	goto	l68
   444   0009BC                     u70:
   445   0009BC                     
   446                           ;uart.c: 46:     if(RCSTAbits.OERR == 1)
   447   0009BC  A2AB               	btfss	171,1,c	;volatile
   448   0009BE  EFE3  F004         	goto	u81
   449   0009C2  EFE5  F004         	goto	u80
   450   0009C6                     u81:
   451   0009C6  EFE7  F004         	goto	l71
   452   0009CA                     u80:
   453   0009CA                     
   454                           ;uart.c: 47:     {;uart.c: 48:         RCSTAbits.CREN = 0;
   455   0009CA  98AB               	bcf	171,4,c	;volatile
   456                           
   457                           ;uart.c: 49:         RCSTAbits.CREN = 1;
   458   0009CC  88AB               	bsf	171,4,c	;volatile
   459   0009CE                     l71:
   460                           
   461                           ;uart.c: 51:     PIR1bits.RCIF = 0;
   462   0009CE  9A9E               	bcf	158,5,c	;volatile
   463   0009D0                     
   464                           ;uart.c: 52:     return RCREG;
   465   0009D0  50AE               	movf	174,w,c	;volatile
   466   0009D2  0012               	return		;funcret
   467   0009D4                     __end_of_Uart_Read:
   468                           	callstack 0
   469                           
   470 ;; *************** function _Uart_Init *****************
   471 ;; Defined at:
   472 ;;		line 11 in file "uart.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;  baud            4   13[COMRAM] unsigned long 
   475 ;; Auto vars:     Size  Location     Type
   476 ;;  vx              2   21[COMRAM] unsigned int 
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		wreg, status,2, status,0, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   486 ;;      Params:         4       0       0       0       0       0       0       0       0
   487 ;;      Locals:         2       0       0       0       0       0       0       0       0
   488 ;;      Temps:          4       0       0       0       0       0       0       0       0
   489 ;;      Totals:        10       0       0       0       0       0       0       0       0
   490 ;;Total ram usage:       10 bytes
   491 ;; Hardware stack levels used: 1
   492 ;; Hardware stack levels required when called: 1
   493 ;; This function calls:
   494 ;;		___lldiv
   495 ;; This function is called by:
   496 ;;		_main
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text4
   501   0008BA                     __ptext4:
   502                           	callstack 0
   503   0008BA                     _Uart_Init:
   504                           	callstack 29
   505   0008BA                     
   506                           ;uart.c: 11: void Uart_Init(unsigned long baud);uart.c: 12: {;uart.c: 13:     TRISCbits.
      +                          RC6 = 0;
   507   0008BA  9C94               	bcf	148,6,c	;volatile
   508                           
   509                           ;uart.c: 14:     TRISCbits.RC7 = 1;
   510   0008BC  8E94               	bsf	148,7,c	;volatile
   511   0008BE                     
   512                           ;uart.c: 15:     TXSTA = 0x24;
   513   0008BE  0E24               	movlw	36
   514   0008C0  6EAC               	movwf	172,c	;volatile
   515                           
   516                           ;uart.c: 16:     RCSTA = 0x90;
   517   0008C2  0E90               	movlw	144
   518   0008C4  6EAB               	movwf	171,c	;volatile
   519                           
   520                           ;uart.c: 17:     BAUDCON = 0x00;
   521   0008C6  0E00               	movlw	0
   522   0008C8  6EB8               	movwf	184,c	;volatile
   523   0008CA                     
   524                           ;uart.c: 18:     BAUDCONbits.BRG16 = 1;
   525   0008CA  86B8               	bsf	184,3,c	;volatile
   526   0008CC                     
   527                           ;uart.c: 19:     unsigned int vx = (48000000/(baud*4))-1;
   528   0008CC  0E00               	movlw	0
   529   0008CE  6E01               	movwf	___lldiv@dividend^0,c
   530   0008D0  0E6C               	movlw	108
   531   0008D2  6E02               	movwf	(___lldiv@dividend+1)^0,c
   532   0008D4  0EDC               	movlw	220
   533   0008D6  6E03               	movwf	(___lldiv@dividend+2)^0,c
   534   0008D8  0E02               	movlw	2
   535   0008DA  6E04               	movwf	(___lldiv@dividend+3)^0,c
   536   0008DC  C00E  F012         	movff	Uart_Init@baud,??_Uart_Init
   537   0008E0  C00F  F013         	movff	Uart_Init@baud+1,??_Uart_Init+1
   538   0008E4  C010  F014         	movff	Uart_Init@baud+2,??_Uart_Init+2
   539   0008E8  C011  F015         	movff	Uart_Init@baud+3,??_Uart_Init+3
   540   0008EC  0E02               	movlw	2
   541   0008EE                     u195:
   542   0008EE  90D8               	bcf	status,0,c
   543   0008F0  3612               	rlcf	??_Uart_Init^0,f,c
   544   0008F2  3613               	rlcf	(??_Uart_Init+1)^0,f,c
   545   0008F4  3614               	rlcf	(??_Uart_Init+2)^0,f,c
   546   0008F6  3615               	rlcf	(??_Uart_Init+3)^0,f,c
   547   0008F8  2EE8               	decfsz	wreg,f,c
   548   0008FA  EF77  F004         	goto	u195
   549   0008FE  C012  F005         	movff	??_Uart_Init,___lldiv@divisor
   550   000902  C013  F006         	movff	??_Uart_Init+1,___lldiv@divisor+1
   551   000906  C014  F007         	movff	??_Uart_Init+2,___lldiv@divisor+2
   552   00090A  C015  F008         	movff	??_Uart_Init+3,___lldiv@divisor+3
   553   00090E  EC0B  F004         	call	___lldiv	;wreg free
   554   000912  0EFF               	movlw	255
   555   000914  2401               	addwf	?___lldiv^0,w,c
   556   000916  6E16               	movwf	Uart_Init@vx^0,c
   557   000918  0EFF               	movlw	255
   558   00091A  2002               	addwfc	(?___lldiv+1)^0,w,c
   559   00091C  6E17               	movwf	(Uart_Init@vx+1)^0,c
   560   00091E                     
   561                           ;uart.c: 20:     SPBRG = vx & 0x00FF;
   562   00091E  C016  FFAF         	movff	Uart_Init@vx,4015	;volatile
   563   000922                     
   564                           ;uart.c: 21:     SPBRGH = vx >> 8;
   565   000922  5017               	movf	(Uart_Init@vx+1)^0,w,c
   566   000924  6EB0               	movwf	176,c	;volatile
   567   000926  0012               	return		;funcret
   568   000928                     __end_of_Uart_Init:
   569                           	callstack 0
   570                           
   571 ;; *************** function ___lldiv *****************
   572 ;; Defined at:
   573 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;  dividend        4    0[COMRAM] unsigned long 
   576 ;;  divisor         4    4[COMRAM] unsigned long 
   577 ;; Auto vars:     Size  Location     Type
   578 ;;  quotient        4    8[COMRAM] unsigned long 
   579 ;;  counter         1   12[COMRAM] unsigned char 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  4    0[COMRAM] unsigned long 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   589 ;;      Params:         8       0       0       0       0       0       0       0       0
   590 ;;      Locals:         5       0       0       0       0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0       0       0
   592 ;;      Totals:        13       0       0       0       0       0       0       0       0
   593 ;;Total ram usage:       13 bytes
   594 ;; Hardware stack levels used: 1
   595 ;; This function calls:
   596 ;;		Nothing
   597 ;; This function is called by:
   598 ;;		_Uart_Init
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           	psect	text5
   603   000816                     __ptext5:
   604                           	callstack 0
   605   000816                     ___lldiv:
   606                           	callstack 29
   607   000816  0E00               	movlw	0
   608   000818  6E09               	movwf	___lldiv@quotient^0,c
   609   00081A  0E00               	movlw	0
   610   00081C  6E0A               	movwf	(___lldiv@quotient+1)^0,c
   611   00081E  0E00               	movlw	0
   612   000820  6E0B               	movwf	(___lldiv@quotient+2)^0,c
   613   000822  0E00               	movlw	0
   614   000824  6E0C               	movwf	(___lldiv@quotient+3)^0,c
   615   000826  5005               	movf	___lldiv@divisor^0,w,c
   616   000828  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
   617   00082A  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
   618   00082C  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
   619   00082E  B4D8               	btfsc	status,2,c
   620   000830  EF1C  F004         	goto	u161
   621   000834  EF1E  F004         	goto	u160
   622   000838                     u161:
   623   000838  EF54  F004         	goto	l121
   624   00083C                     u160:
   625   00083C  0E01               	movlw	1
   626   00083E  6E0D               	movwf	___lldiv@counter^0,c
   627   000840  EF28  F004         	goto	l895
   628   000844                     l893:
   629   000844  90D8               	bcf	status,0,c
   630   000846  3605               	rlcf	___lldiv@divisor^0,f,c
   631   000848  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
   632   00084A  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
   633   00084C  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
   634   00084E  2A0D               	incf	___lldiv@counter^0,f,c
   635   000850                     l895:
   636   000850  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
   637   000852  EF2D  F004         	goto	u171
   638   000856  EF2F  F004         	goto	u170
   639   00085A                     u171:
   640   00085A  EF22  F004         	goto	l893
   641   00085E                     u170:
   642   00085E                     l897:
   643   00085E  90D8               	bcf	status,0,c
   644   000860  3609               	rlcf	___lldiv@quotient^0,f,c
   645   000862  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
   646   000864  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
   647   000866  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
   648   000868  5005               	movf	___lldiv@divisor^0,w,c
   649   00086A  5C01               	subwf	___lldiv@dividend^0,w,c
   650   00086C  5006               	movf	(___lldiv@divisor+1)^0,w,c
   651   00086E  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
   652   000870  5007               	movf	(___lldiv@divisor+2)^0,w,c
   653   000872  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
   654   000874  5008               	movf	(___lldiv@divisor+3)^0,w,c
   655   000876  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
   656   000878  A0D8               	btfss	status,0,c
   657   00087A  EF41  F004         	goto	u181
   658   00087E  EF43  F004         	goto	u180
   659   000882                     u181:
   660   000882  EF4C  F004         	goto	l905
   661   000886                     u180:
   662   000886  5005               	movf	___lldiv@divisor^0,w,c
   663   000888  5E01               	subwf	___lldiv@dividend^0,f,c
   664   00088A  5006               	movf	(___lldiv@divisor+1)^0,w,c
   665   00088C  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
   666   00088E  5007               	movf	(___lldiv@divisor+2)^0,w,c
   667   000890  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
   668   000892  5008               	movf	(___lldiv@divisor+3)^0,w,c
   669   000894  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
   670   000896  8009               	bsf	___lldiv@quotient^0,0,c
   671   000898                     l905:
   672   000898  90D8               	bcf	status,0,c
   673   00089A  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
   674   00089C  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
   675   00089E  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
   676   0008A0  3205               	rrcf	___lldiv@divisor^0,f,c
   677   0008A2  2E0D               	decfsz	___lldiv@counter^0,f,c
   678   0008A4  EF2F  F004         	goto	l897
   679   0008A8                     l121:
   680   0008A8  C009  F001         	movff	___lldiv@quotient,?___lldiv
   681   0008AC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
   682   0008B0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
   683   0008B4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
   684   0008B8  0012               	return		;funcret
   685   0008BA                     __end_of___lldiv:
   686                           	callstack 0
   687                           
   688 ;; *************** function _Uart_Available *****************
   689 ;; Defined at:
   690 ;;		line 24 in file "uart.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  2    0[COMRAM] short 
   697 ;; Registers used:
   698 ;;		wreg, status,2
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   704 ;;      Params:         2       0       0       0       0       0       0       0       0
   705 ;;      Locals:         0       0       0       0       0       0       0       0       0
   706 ;;      Temps:          1       0       0       0       0       0       0       0       0
   707 ;;      Totals:         3       0       0       0       0       0       0       0       0
   708 ;;Total ram usage:        3 bytes
   709 ;; Hardware stack levels used: 1
   710 ;; This function calls:
   711 ;;		Nothing
   712 ;; This function is called by:
   713 ;;		_main
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text6
   718   0009D4                     __ptext6:
   719                           	callstack 0
   720   0009D4                     _Uart_Available:
   721                           	callstack 30
   722   0009D4                     
   723                           ;uart.c: 26:     return PIR1bits.RCIF ? 1 : 0;
   724   0009D4  BA9E               	btfsc	158,5,c	;volatile
   725   0009D6  EFEF  F004         	goto	u201
   726   0009DA  EFF3  F004         	goto	u200
   727   0009DE                     u201:
   728   0009DE  6A03               	clrf	??_Uart_Available^0,c
   729   0009E0  2A03               	incf	??_Uart_Available^0,f,c
   730   0009E2  EFF4  F004         	goto	u208
   731   0009E6                     u200:
   732   0009E6  6A03               	clrf	??_Uart_Available^0,c
   733   0009E8                     u208:
   734   0009E8  5003               	movf	??_Uart_Available^0,w,c
   735   0009EA  6E01               	movwf	?_Uart_Available^0,c
   736   0009EC  6A02               	clrf	(?_Uart_Available+1)^0,c
   737   0009EE  0012               	return		;funcret
   738   0009F0                     __end_of_Uart_Available:
   739                           	callstack 0
   740                           
   741                           	psect	rparam
   742   000000                     
   743                           	psect	config
   744                           
   745                           ;Config register CONFIG1L @ 0x300000
   746                           ;	PLL Prescaler Selection bits
   747                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   748                           ;	System Clock Postscaler Selection bits
   749                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   750                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   751                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   752   300000                     	org	3145728
   753   300000  21                 	db	33
   754                           
   755                           ;Config register CONFIG1H @ 0x300001
   756                           ;	Oscillator Selection bits
   757                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   758                           ;	Fail-Safe Clock Monitor Enable bit
   759                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   760                           ;	Internal/External Oscillator Switchover bit
   761                           ;	IESO = OFF, Oscillator Switchover mode disabled
   762   300001                     	org	3145729
   763   300001  0E                 	db	14
   764                           
   765                           ;Config register CONFIG2L @ 0x300002
   766                           ;	Power-up Timer Enable bit
   767                           ;	PWRT = OFF, PWRT disabled
   768                           ;	Brown-out Reset Enable bits
   769                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   770                           ;	Brown-out Reset Voltage bits
   771                           ;	BORV = 3, Minimum setting 2.05V
   772                           ;	USB Voltage Regulator Enable bit
   773                           ;	VREGEN = OFF, USB voltage regulator disabled
   774   300002                     	org	3145730
   775   300002  19                 	db	25
   776                           
   777                           ;Config register CONFIG2H @ 0x300003
   778                           ;	Watchdog Timer Enable bit
   779                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   780                           ;	Watchdog Timer Postscale Select bits
   781                           ;	WDTPS = 32768, 1:32768
   782   300003                     	org	3145731
   783   300003  1E                 	db	30
   784                           
   785                           ; Padding undefined space
   786   300004                     	org	3145732
   787   300004  FF                 	db	255
   788                           
   789                           ;Config register CONFIG3H @ 0x300005
   790                           ;	CCP2 MUX bit
   791                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   792                           ;	PORTB A/D Enable bit
   793                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   794                           ;	Low-Power Timer 1 Oscillator Enable bit
   795                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   796                           ;	MCLR Pin Enable bit
   797                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   798   300005                     	org	3145733
   799   300005  81                 	db	129
   800                           
   801                           ;Config register CONFIG4L @ 0x300006
   802                           ;	Stack Full/Underflow Reset Enable bit
   803                           ;	STVREN = ON, Stack full/underflow will cause Reset
   804                           ;	Single-Supply ICSP Enable bit
   805                           ;	LVP = OFF, Single-Supply ICSP disabled
   806                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   807                           ;	ICPRT = OFF, ICPORT disabled
   808                           ;	Extended Instruction Set Enable bit
   809                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   810                           ;	Background Debugger Enable bit
   811                           ;	DEBUG = 0x1, unprogrammed default
   812   300006                     	org	3145734
   813   300006  81                 	db	129
   814                           
   815                           ; Padding undefined space
   816   300007                     	org	3145735
   817   300007  FF                 	db	255
   818                           
   819                           ;Config register CONFIG5L @ 0x300008
   820                           ;	Code Protection bit
   821                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   822                           ;	Code Protection bit
   823                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   824                           ;	Code Protection bit
   825                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   826                           ;	Code Protection bit
   827                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   828   300008                     	org	3145736
   829   300008  0F                 	db	15
   830                           
   831                           ;Config register CONFIG5H @ 0x300009
   832                           ;	Boot Block Code Protection bit
   833                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   834                           ;	Data EEPROM Code Protection bit
   835                           ;	CPD = OFF, Data EEPROM is not code-protected
   836   300009                     	org	3145737
   837   300009  C0                 	db	192
   838                           
   839                           ;Config register CONFIG6L @ 0x30000A
   840                           ;	Write Protection bit
   841                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   842                           ;	Write Protection bit
   843                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   844                           ;	Write Protection bit
   845                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   846                           ;	Write Protection bit
   847                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   848   30000A                     	org	3145738
   849   30000A  0F                 	db	15
   850                           
   851                           ;Config register CONFIG6H @ 0x30000B
   852                           ;	Configuration Register Write Protection bit
   853                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   854                           ;	Boot Block Write Protection bit
   855                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   856                           ;	Data EEPROM Write Protection bit
   857                           ;	WRTD = OFF, Data EEPROM is not write-protected
   858   30000B                     	org	3145739
   859   30000B  E0                 	db	224
   860                           
   861                           ;Config register CONFIG7L @ 0x30000C
   862                           ;	Table Read Protection bit
   863                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   864                           ;	Table Read Protection bit
   865                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   866                           ;	Table Read Protection bit
   867                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   868                           ;	Table Read Protection bit
   869                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   870   30000C                     	org	3145740
   871   30000C  0F                 	db	15
   872                           
   873                           ;Config register CONFIG7H @ 0x30000D
   874                           ;	Boot Block Table Read Protection bit
   875                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   876   30000D                     	org	3145741
   877   30000D  40                 	db	64
   878                           tosu	equ	0xFFF
   879                           tosh	equ	0xFFE
   880                           tosl	equ	0xFFD
   881                           stkptr	equ	0xFFC
   882                           pclatu	equ	0xFFB
   883                           pclath	equ	0xFFA
   884                           pcl	equ	0xFF9
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           prodh	equ	0xFF4
   890                           prodl	equ	0xFF3
   891                           indf0	equ	0xFEF
   892                           postinc0	equ	0xFEE
   893                           postdec0	equ	0xFED
   894                           preinc0	equ	0xFEC
   895                           plusw0	equ	0xFEB
   896                           fsr0h	equ	0xFEA
   897                           fsr0l	equ	0xFE9
   898                           wreg	equ	0xFE8
   899                           indf1	equ	0xFE7
   900                           postinc1	equ	0xFE6
   901                           postdec1	equ	0xFE5
   902                           preinc1	equ	0xFE4
   903                           plusw1	equ	0xFE3
   904                           fsr1h	equ	0xFE2
   905                           fsr1l	equ	0xFE1
   906                           bsr	equ	0xFE0
   907                           indf2	equ	0xFDF
   908                           postinc2	equ	0xFDE
   909                           postdec2	equ	0xFDD
   910                           preinc2	equ	0xFDC
   911                           plusw2	equ	0xFDB
   912                           fsr2h	equ	0xFDA
   913                           fsr2l	equ	0xFD9
   914                           status	equ	0xFD8

Data Sizes:
    Strings     19
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Uart_Send_String@info	PTR unsigned char  size(1) Largest target is 16
		 -> STR_1(CODE[16]), STR_2(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_Uart_Init
    _Uart_Send_String->_Uart_Send_Char
    _Uart_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     684
                     _Uart_Available
                          _Uart_Init
                          _Uart_Read
                     _Uart_Send_Char
                   _Uart_Send_String
 ---------------------------------------------------------------------------------
 (1) _Uart_Send_String                                     1     0      1     212
                                              1 COMRAM     1     0      1
                     _Uart_Send_Char
 ---------------------------------------------------------------------------------
 (2) _Uart_Send_Char                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Uart_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Uart_Init                                           10     6      4     457
                                             13 COMRAM    10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _Uart_Available                                       3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Uart_Available
   _Uart_Init
     ___lldiv
   _Uart_Read
   _Uart_Send_Char
   _Uart_Send_String
     _Uart_Send_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      18       1       25.3%
BITBIGSFRh          3E      0       0      21        0.0%
BITBIGSFRll         34      0       0      26        0.0%
BITBIGSFRlhlh        C      0       0      24        0.0%
BITBIGSFRlhll        9      0       0      25        0.0%
BITBIGSFRlhhh        8      0       0      22        0.0%
BITBIGSFRlhhlh       7      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18       3        0.0%
DATA                 0      0      18       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Apr 19 13:51:30 2024

                      l50 0926                        l53 09EE                        l70 09BC  
                      l71 09CE                        l72 09D2                        l56 09F2  
                      l65 09AC                        l59 0A04                        l68 09AE  
                      u10 0A00                        u11 09FC                        u70 09BC  
                      u71 09B8                        u80 09CA                        u81 09C6  
                     l121 08A8                       l128 08B8                       l811 09CA  
                     l901 0886                       l813 09D0                       l903 0896  
                     l911 08BE                       l921 09D4                       l905 0898  
                     l913 08CA                       l809 09AE                       l907 08A2  
                     l915 08CC                       l931 0994                       l917 091E  
                     l909 08BA                       l925 0982                       l941 0964  
                     l933 0928                       l919 0922                       l767 09F2  
                     l927 0986                       l943 096C                       l935 092C  
                     l769 0A00                       l929 0992                       l937 0940  
                     l891 083C                       l939 095E                       l893 0844  
                     l895 0850                       l887 0816                       l897 085E  
                     l889 0826                       l899 0868                       u200 09E6  
                     u201 09DE                       u210 09AC                       u211 09A8  
                     u220 095E                       u221 095A                       u208 09E8  
                     u160 083C                       u161 0838                       u170 085E  
                     u171 085A                       u180 0886                       u181 0882  
                     u195 08EE                       wreg 0FE8                      STR_1 0801  
                    STR_2 0811                      _main 0928                      start 0000  
            ___param_bank 0000                     ?_main 0001           __end_of___lldiv 08BA  
                   _RCREG 0FAE                     _RCSTA 0FAB                     _SPBRG 0FAF  
                   _TXREG 0FAD                     _TXSTA 0FAC                     tablat 0FF5  
__end_of_Uart_Send_String 09AE                     status 0FD8           __initialization 0A06  
            __end_of_main 0982                    ??_main 0018             __activetblptr 0001  
          _Uart_Available 09D4                    _SPBRGH 0FB0                 ??___lldiv 0009  
                  isa$std 0001            _Uart_Send_Char 09F0              __mediumconst 0000  
  __end_of_Uart_Available 09F0                    tblptrh 0FF7                    tblptrl 0FF6  
                  tblptru 0FF8                __accesstop 0060   __end_of__initialization 0A08  
           ___rparam_used 0001            __pcstackCOMRAM 0001    __end_of_Uart_Send_Char 0A06  
         ?_Uart_Available 0001         __end_of_Uart_Init 0928         __end_of_Uart_Read 09D4  
         ?_Uart_Send_Char 0001                   _BAUDCON 0FB8               Uart_Init@vx 0016  
       ?_Uart_Send_String 0002      Uart_Send_Char@txData 0001        ??_Uart_Send_String 0003  
                 __Hparam 0000                   __Lparam 0000                   ___lldiv 0816  
            __psmallconst 0800                   __pcinit 0A06                   __ramtop 0800  
                 _dato_rx 0018                   __ptext0 0928                   __ptext1 0982  
                 __ptext2 09F0                   __ptext3 09AE                   __ptext4 08BA  
                 __ptext5 0816                   __ptext6 09D4      end_of_initialization 0A08  
         ___lldiv@divisor 0005             Uart_Init@baud 000E           ___lldiv@counter 000D  
               _RCSTAbits 0FAB                 _TRISCbits 0F94                 _TXSTAbits 0FAC  
             _BAUDCONbits 0FB8          ??_Uart_Available 0003       start_initialization 0A06  
        ??_Uart_Send_Char 0001                 _Uart_Init 08BA                 _Uart_Read 09AE  
             __pbssCOMRAM 0018                ?_Uart_Init 000E                ?_Uart_Read 0001  
                ?___lldiv 0001               __smallconst 0800                  _PIR1bits 0F9E  
              _ADCON1bits 0FC1                  __Hrparam 0000               ??_Uart_Init 0012  
             ??_Uart_Read 0001                  __Lrparam 0000              __Lsmallconst 0800  
    Uart_Send_String@info 0002                  isa$xinst 0000          _Uart_Send_String 0982  
        ___lldiv@dividend 0001          ___lldiv@quotient 0009  
