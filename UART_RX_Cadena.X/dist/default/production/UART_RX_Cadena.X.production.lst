

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Apr 23 08:50:36 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 23/03/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     _RCREG	set	4014
    57   000000                     _TXREG	set	4013
    58   000000                     _SPBRG	set	4015
    59   000000                     _BAUDCON	set	4024
    60   000000                     _RCSTAbits	set	4011
    61   000000                     _TXSTAbits	set	4012
    62   000000                     _BAUDCONbits	set	4024
    63   000000                     _LATBbits	set	3978
    64   000000                     _TRISBbits	set	3987
    65   000000                     _ADCON1bits	set	4033
    66   000000                     _PIR1bits	set	3998
    67   000000                     _RCSTA	set	4011
    68   000000                     _TXSTA	set	4012
    69   000000                     _TRISCbits	set	3988
    70   000000                     _SPBRGH	set	4016
    71                           
    72                           	psect	smallconst
    73   000800                     __psmallconst:
    74                           	callstack 0
    75   000800  00                 	db	0
    76   000801                     STR_1:
    77   000801  43                 	db	67	;'C'
    78   000802  61                 	db	97	;'a'
    79   000803  64                 	db	100	;'d'
    80   000804  65                 	db	101	;'e'
    81   000805  6E                 	db	110	;'n'
    82   000806  61                 	db	97	;'a'
    83   000807  20                 	db	32
    84   000808  52                 	db	82	;'R'
    85   000809  65                 	db	101	;'e'
    86   00080A  63                 	db	99	;'c'
    87   00080B  69                 	db	105	;'i'
    88   00080C  62                 	db	98	;'b'
    89   00080D  69                 	db	105	;'i'
    90   00080E  64                 	db	100	;'d'
    91   00080F  61                 	db	97	;'a'
    92   000810  3A                 	db	58	;':'
    93   000811  20                 	db	32
    94   000812  00                 	db	0
    95   000813                     STR_5:
    96   000813  4C                 	db	76	;'L'
    97   000814  65                 	db	101	;'e'
    98   000815  64                 	db	100	;'d'
    99   000816  20                 	db	32
   100   000817  45                 	db	69	;'E'
   101   000818  6E                 	db	110	;'n'
   102   000819  63                 	db	99	;'c'
   103   00081A  65                 	db	101	;'e'
   104   00081B  6E                 	db	110	;'n'
   105   00081C  64                 	db	100	;'d'
   106   00081D  69                 	db	105	;'i'
   107   00081E  64                 	db	100	;'d'
   108   00081F  6F                 	db	111	;'o'
   109   000820  0D                 	db	13
   110   000821  0A                 	db	10
   111   000822  00                 	db	0
   112   000823                     STR_8:
   113   000823  4C                 	db	76	;'L'
   114   000824  65                 	db	101	;'e'
   115   000825  64                 	db	100	;'d'
   116   000826  20                 	db	32
   117   000827  41                 	db	65	;'A'
   118   000828  70                 	db	112	;'p'
   119   000829  61                 	db	97	;'a'
   120   00082A  67                 	db	103	;'g'
   121   00082B  61                 	db	97	;'a'
   122   00082C  64                 	db	100	;'d'
   123   00082D  6F                 	db	111	;'o'
   124   00082E  0D                 	db	13
   125   00082F  0A                 	db	10
   126   000830  00                 	db	0
   127   000831                     STR_3:
   128   000831  65                 	db	101	;'e'
   129   000832  6E                 	db	110	;'n'
   130   000833  63                 	db	99	;'c'
   131   000834  65                 	db	101	;'e'
   132   000835  6E                 	db	110	;'n'
   133   000836  64                 	db	100	;'d'
   134   000837  65                 	db	101	;'e'
   135   000838  72                 	db	114	;'r'
   136   000839  00                 	db	0
   137   00083A                     STR_6:
   138   00083A  61                 	db	97	;'a'
   139   00083B  70                 	db	112	;'p'
   140   00083C  61                 	db	97	;'a'
   141   00083D  67                 	db	103	;'g'
   142   00083E  61                 	db	97	;'a'
   143   00083F  72                 	db	114	;'r'
   144   000840  00                 	db	0
   145   000841  00                 	db	0	; dummy byte at the end
   146   000000                     
   147                           ; #config settings
   148                           
   149                           	psect	cinit
   150   000BA0                     __pcinit:
   151                           	callstack 0
   152   000BA0                     start_initialization:
   153                           	callstack 0
   154   000BA0                     __initialization:
   155                           	callstack 0
   156                           
   157                           ; Clear objects allocated to COMRAM (20 bytes)
   158   000BA0  EE00  F018         	lfsr	0,__pbssCOMRAM
   159   000BA4  0E14               	movlw	20
   160   000BA6                     clear_0:
   161   000BA6  6AEE               	clrf	postinc0,c
   162   000BA8  06E8               	decf	wreg,f,c
   163   000BAA  E1FD               	bnz	clear_0
   164   000BAC                     end_of_initialization:
   165                           	callstack 0
   166   000BAC                     __end_of__initialization:
   167                           	callstack 0
   168   000BAC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   169   000BAE  6EF8               	movwf	tblptru,c
   170   000BB0  0100               	movlb	0
   171   000BB2  EF21  F004         	goto	_main	;jump to C main() function
   172                           
   173                           	psect	bssCOMRAM
   174   000018                     __pbssCOMRAM:
   175                           	callstack 0
   176   000018                     _cadena:
   177                           	callstack 0
   178   000018                     	ds	20
   179                           
   180                           	psect	cstackCOMRAM
   181   000001                     __pcstackCOMRAM:
   182                           	callstack 0
   183   000001                     ?_Uart_Available:
   184                           	callstack 0
   185   000001                     ?_strcmp:
   186                           	callstack 0
   187   000001                     ?___lldiv:
   188                           	callstack 0
   189   000001                     Uart_Send_Char@txData:
   190                           	callstack 0
   191   000001                     Uart_Read_String@Buf:
   192                           	callstack 0
   193   000001                     strcmp@l:
   194                           	callstack 0
   195   000001                     ___lldiv@dividend:
   196                           	callstack 0
   197                           
   198                           ; 4 bytes @ 0x0
   199   000001                     	ds	1
   200   000002                     strcmp@r:
   201                           	callstack 0
   202   000002                     Uart_Send_String@info:
   203                           	callstack 0
   204   000002                     Uart_Read_String@s_buf:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x1
   208   000002                     	ds	1
   209   000003                     ??_Uart_Available:
   210   000003                     ??_strcmp:
   211                           
   212                           ; 1 bytes @ 0x2
   213   000003                     	ds	1
   214   000004                     Uart_Read_String@c:
   215                           	callstack 0
   216                           
   217                           ; 1 bytes @ 0x3
   218   000004                     	ds	1
   219   000005                     Uart_Read_String@cont_buf:
   220                           	callstack 0
   221   000005                     ___lldiv@divisor:
   222                           	callstack 0
   223                           
   224                           ; 4 bytes @ 0x4
   225   000005                     	ds	4
   226   000009                     ___lldiv@quotient:
   227                           	callstack 0
   228                           
   229                           ; 4 bytes @ 0x8
   230   000009                     	ds	4
   231   00000D                     ___lldiv@counter:
   232                           	callstack 0
   233                           
   234                           ; 1 bytes @ 0xC
   235   00000D                     	ds	1
   236   00000E                     Uart_Init@baud:
   237                           	callstack 0
   238                           
   239                           ; 4 bytes @ 0xD
   240   00000E                     	ds	4
   241   000012                     ??_Uart_Init:
   242                           
   243                           ; 1 bytes @ 0x11
   244   000012                     	ds	4
   245   000016                     Uart_Init@vx:
   246                           	callstack 0
   247                           
   248                           ; 2 bytes @ 0x15
   249   000016                     	ds	2
   250   000018                     
   251                           ; 1 bytes @ 0x17
   252 ;;
   253 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   254 ;;
   255 ;; *************** function _main *****************
   256 ;; Defined at:
   257 ;;		line 26 in file "uart_rx_cadena.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;		None
   260 ;; Auto vars:     Size  Location     Type
   261 ;;		None
   262 ;; Return value:  Size  Location     Type
   263 ;;                  1    wreg      void 
   264 ;; Registers used:
   265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   266 ;; Tracked objects:
   267 ;;		On entry : 0/0
   268 ;;		On exit  : 0/0
   269 ;;		Unchanged: 0/0
   270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   271 ;;      Params:         0       0       0       0       0       0       0       0       0
   272 ;;      Locals:         0       0       0       0       0       0       0       0       0
   273 ;;      Temps:          0       0       0       0       0       0       0       0       0
   274 ;;      Totals:         0       0       0       0       0       0       0       0       0
   275 ;;Total ram usage:        0 bytes
   276 ;; Hardware stack levels required when called: 2
   277 ;; This function calls:
   278 ;;		_Uart_Available
   279 ;;		_Uart_Init
   280 ;;		_Uart_Read_String
   281 ;;		_Uart_Send_String
   282 ;;		_strcmp
   283 ;; This function is called by:
   284 ;;		Startup code after reset
   285 ;; This function uses a non-reentrant model
   286 ;;
   287                           
   288                           	psect	text0
   289   000842                     __ptext0:
   290                           	callstack 0
   291   000842                     _main:
   292                           	callstack 29
   293   000842                     
   294                           ;uart_rx_cadena.c: 27:     ADCON1bits.PCFG = 0x0F;
   295   000842  0E0F               	movlw	15
   296   000844  12C1               	iorwf	193,f,c	;volatile
   297   000846                     
   298                           ;uart_rx_cadena.c: 28:     TRISBbits.RB0 = 0;
   299   000846  9093               	bcf	147,0,c	;volatile
   300   000848                     
   301                           ;uart_rx_cadena.c: 29:     LATBbits.LB0 = 0;
   302   000848  908A               	bcf	138,0,c	;volatile
   303   00084A                     
   304                           ;uart_rx_cadena.c: 30:     Uart_Init(9600);
   305   00084A  0E80               	movlw	128
   306   00084C  6E0E               	movwf	Uart_Init@baud^0,c
   307   00084E  0E25               	movlw	37
   308   000850  6E0F               	movwf	(Uart_Init@baud+1)^0,c
   309   000852  0E00               	movlw	0
   310   000854  6E10               	movwf	(Uart_Init@baud+2)^0,c
   311   000856  0E00               	movlw	0
   312   000858  6E11               	movwf	(Uart_Init@baud+3)^0,c
   313   00085A  ECE9  F004         	call	_Uart_Init	;wreg free
   314   00085E                     l1013:
   315                           
   316                           ;uart_rx_cadena.c: 33:         if (Uart_Available() > 0) {
   317   00085E  ECC2  F005         	call	_Uart_Available	;wreg free
   318   000862  BE02               	btfsc	(?_Uart_Available+1)^0,7,c
   319   000864  EF3C  F004         	goto	u341
   320   000868  5002               	movf	(?_Uart_Available+1)^0,w,c
   321   00086A  E108               	bnz	u340
   322   00086C  0401               	decf	?_Uart_Available^0,w,c
   323   00086E  A0D8               	btfss	status,0,c
   324   000870  EF3C  F004         	goto	u341
   325   000874  EF3E  F004         	goto	u340
   326   000878                     u341:
   327   000878  EF2F  F004         	goto	l1013
   328   00087C                     u340:
   329   00087C                     
   330                           ;uart_rx_cadena.c: 34:             Uart_Read_String(cadena, 20);
   331   00087C  0E18               	movlw	low _cadena
   332   00087E  6E01               	movwf	Uart_Read_String@Buf^0,c
   333   000880  0E00               	movlw	0
   334   000882  6E03               	movwf	(Uart_Read_String@s_buf+1)^0,c
   335   000884  0E14               	movlw	20
   336   000886  6E02               	movwf	Uart_Read_String@s_buf^0,c
   337   000888  EC82  F005         	call	_Uart_Read_String	;wreg free
   338   00088C                     
   339                           ;uart_rx_cadena.c: 36:             Uart_Send_String("Cadena Recibida: ");
   340   00088C  0E01               	movlw	low STR_1
   341   00088E  6E02               	movwf	Uart_Send_String@info^0,c
   342   000890  5002               	movf	Uart_Send_String@info^0,w,c
   343   000892  A4D8               	btfss	status,2,c
   344   000894  0E08               	movlw	high __smallconst
   345   000896  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   346   000898  EC53  F005         	call	_Uart_Send_String	;wreg free
   347   00089C                     
   348                           ;uart_rx_cadena.c: 37:             Uart_Send_String(cadena);
   349   00089C  0E18               	movlw	low _cadena
   350   00089E  6E02               	movwf	Uart_Send_String@info^0,c
   351   0008A0  6A03               	clrf	(Uart_Send_String@info+1)^0,c
   352   0008A2  EC53  F005         	call	_Uart_Send_String	;wreg free
   353   0008A6                     
   354                           ;uart_rx_cadena.c: 38:             Uart_Send_String("\r\n");
   355   0008A6  0E2E               	movlw	low (STR_8+11)
   356   0008A8  6E02               	movwf	Uart_Send_String@info^0,c
   357   0008AA  5002               	movf	Uart_Send_String@info^0,w,c
   358   0008AC  A4D8               	btfss	status,2,c
   359   0008AE  0E08               	movlw	high __smallconst
   360   0008B0  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   361   0008B2  EC53  F005         	call	_Uart_Send_String	;wreg free
   362   0008B6                     
   363                           ;uart_rx_cadena.c: 40:             if (!strcmp(cadena, "encender")) {
   364   0008B6  0E18               	movlw	low _cadena
   365   0008B8  6E01               	movwf	strcmp@l^0,c
   366   0008BA  0E31               	movlw	low STR_3
   367   0008BC  6E02               	movwf	strcmp@r^0,c
   368   0008BE  EC20  F005         	call	_strcmp	;wreg free
   369   0008C2  5001               	movf	?_strcmp^0,w,c
   370   0008C4  1002               	iorwf	(?_strcmp+1)^0,w,c
   371   0008C6  A4D8               	btfss	status,2,c
   372   0008C8  EF68  F004         	goto	u351
   373   0008CC  EF6A  F004         	goto	u350
   374   0008D0                     u351:
   375   0008D0  EF73  F004         	goto	l1029
   376   0008D4                     u350:
   377   0008D4                     
   378                           ;uart_rx_cadena.c: 41:                 LATBbits.LB0 = 1;
   379   0008D4  808A               	bsf	138,0,c	;volatile
   380   0008D6                     
   381                           ;uart_rx_cadena.c: 42:                 Uart_Send_String("Led Encendido\r\n");
   382   0008D6  0E13               	movlw	low STR_5
   383   0008D8  6E02               	movwf	Uart_Send_String@info^0,c
   384   0008DA  5002               	movf	Uart_Send_String@info^0,w,c
   385   0008DC  A4D8               	btfss	status,2,c
   386   0008DE  0E08               	movlw	high __smallconst
   387   0008E0  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   388   0008E2  EC53  F005         	call	_Uart_Send_String	;wreg free
   389   0008E6                     l1029:
   390                           
   391                           ;uart_rx_cadena.c: 44:             if (!strcmp(cadena, "apagar")) {
   392   0008E6  0E18               	movlw	low _cadena
   393   0008E8  6E01               	movwf	strcmp@l^0,c
   394   0008EA  0E3A               	movlw	low STR_6
   395   0008EC  6E02               	movwf	strcmp@r^0,c
   396   0008EE  EC20  F005         	call	_strcmp	;wreg free
   397   0008F2  5001               	movf	?_strcmp^0,w,c
   398   0008F4  1002               	iorwf	(?_strcmp+1)^0,w,c
   399   0008F6  A4D8               	btfss	status,2,c
   400   0008F8  EF80  F004         	goto	u361
   401   0008FC  EF82  F004         	goto	u360
   402   000900                     u361:
   403   000900  EF8B  F004         	goto	l26
   404   000904                     u360:
   405   000904                     
   406                           ;uart_rx_cadena.c: 45:                 LATBbits.LB0 = 0;
   407   000904  908A               	bcf	138,0,c	;volatile
   408   000906                     
   409                           ;uart_rx_cadena.c: 46:                 Uart_Send_String("Led Apagado\r\n");
   410   000906  0E23               	movlw	low STR_8
   411   000908  6E02               	movwf	Uart_Send_String@info^0,c
   412   00090A  5002               	movf	Uart_Send_String@info^0,w,c
   413   00090C  A4D8               	btfss	status,2,c
   414   00090E  0E08               	movlw	high __smallconst
   415   000910  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   416   000912  EC53  F005         	call	_Uart_Send_String	;wreg free
   417   000916                     l26:
   418                           
   419                           ;uart_rx_cadena.c: 48:             Uart_Send_String("\r\n");
   420   000916  0E2E               	movlw	low (STR_8+11)
   421   000918  6E02               	movwf	Uart_Send_String@info^0,c
   422   00091A  5002               	movf	Uart_Send_String@info^0,w,c
   423   00091C  A4D8               	btfss	status,2,c
   424   00091E  0E08               	movlw	high __smallconst
   425   000920  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   426   000922  EC53  F005         	call	_Uart_Send_String	;wreg free
   427   000926  EF2F  F004         	goto	l1013
   428   00092A  EF00  F000         	goto	start
   429   00092E                     __end_of_main:
   430                           	callstack 0
   431                           
   432 ;; *************** function _strcmp *****************
   433 ;; Defined at:
   434 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\strcmp.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;  l               1    0[COMRAM] PTR const unsigned char 
   437 ;;		 -> cadena(20), 
   438 ;;  r               1    1[COMRAM] PTR const unsigned char 
   439 ;;		 -> STR_7(7), STR_4(9), 
   440 ;; Auto vars:     Size  Location     Type
   441 ;;		None
   442 ;; Return value:  Size  Location     Type
   443 ;;                  2    0[COMRAM] int 
   444 ;; Registers used:
   445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   446 ;; Tracked objects:
   447 ;;		On entry : 0/0
   448 ;;		On exit  : 0/0
   449 ;;		Unchanged: 0/0
   450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   451 ;;      Params:         2       0       0       0       0       0       0       0       0
   452 ;;      Locals:         0       0       0       0       0       0       0       0       0
   453 ;;      Temps:          1       0       0       0       0       0       0       0       0
   454 ;;      Totals:         3       0       0       0       0       0       0       0       0
   455 ;;Total ram usage:        3 bytes
   456 ;; Hardware stack levels used: 1
   457 ;; This function calls:
   458 ;;		Nothing
   459 ;; This function is called by:
   460 ;;		_main
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464                           	psect	text1
   465   000A40                     __ptext1:
   466                           	callstack 0
   467   000A40                     _strcmp:
   468                           	callstack 30
   469   000A40  EF24  F005         	goto	l997
   470   000A44                     l995:
   471   000A44  2A01               	incf	strcmp@l^0,f,c
   472   000A46  2A02               	incf	strcmp@r^0,f,c
   473   000A48                     l997:
   474   000A48  5001               	movf	strcmp@l^0,w,c
   475   000A4A  6ED9               	movwf	fsr2l,c
   476   000A4C  6ADA               	clrf	fsr2h,c
   477   000A4E  50DF               	movf	indf2,w,c
   478   000A50  6E03               	movwf	??_strcmp^0,c
   479   000A52  C002  FFF6         	movff	strcmp@r,tblptrl
   480   000A56                     	if	1	;There is more than 1 active tblptr byte
   481   000A56  0E08               	movlw	high __smallconst
   482   000A58  6EF7               	movwf	tblptrh,c
   483   000A5A                     	endif
   484   000A5A                     	if	0	;tblptru may be non-zero
   485   000A5A                     	endif
   486   000A5A                     	if	0	;tblptru may be non-zero
   487   000A5A                     	endif
   488   000A5A  0008               	tblrd		*
   489   000A5C  50F5               	movf	tablat,w,c
   490   000A5E  1803               	xorwf	??_strcmp^0,w,c
   491   000A60  A4D8               	btfss	status,2,c
   492   000A62  EF35  F005         	goto	u321
   493   000A66  EF37  F005         	goto	u320
   494   000A6A                     u321:
   495   000A6A  EF42  F005         	goto	l1001
   496   000A6E                     u320:
   497   000A6E  5001               	movf	strcmp@l^0,w,c
   498   000A70  6ED9               	movwf	fsr2l,c
   499   000A72  6ADA               	clrf	fsr2h,c
   500   000A74  50DF               	movf	indf2,w,c
   501   000A76  A4D8               	btfss	status,2,c
   502   000A78  EF40  F005         	goto	u331
   503   000A7C  EF42  F005         	goto	u330
   504   000A80                     u331:
   505   000A80  EF22  F005         	goto	l995
   506   000A84                     u330:
   507   000A84                     l1001:
   508   000A84  5001               	movf	strcmp@l^0,w,c
   509   000A86  6ED9               	movwf	fsr2l,c
   510   000A88  6ADA               	clrf	fsr2h,c
   511   000A8A  50DF               	movf	indf2,w,c
   512   000A8C  6E03               	movwf	??_strcmp^0,c
   513   000A8E  C002  FFF6         	movff	strcmp@r,tblptrl
   514   000A92                     	if	1	;There is more than 1 active tblptr byte
   515   000A92  0E08               	movlw	high __smallconst
   516   000A94  6EF7               	movwf	tblptrh,c
   517   000A96                     	endif
   518   000A96                     	if	0	;tblptru may be non-zero
   519   000A96                     	endif
   520   000A96                     	if	0	;tblptru may be non-zero
   521   000A96                     	endif
   522   000A96  0008               	tblrd		*
   523   000A98  50F5               	movf	tablat,w,c
   524   000A9A  5C03               	subwf	??_strcmp^0,w,c
   525   000A9C  6E01               	movwf	?_strcmp^0,c
   526   000A9E  6A02               	clrf	(?_strcmp+1)^0,c
   527   000AA0  A0D8               	btfss	status,0,c
   528   000AA2  0602               	decf	(?_strcmp+1)^0,f,c
   529   000AA4  0012               	return		;funcret
   530   000AA6                     __end_of_strcmp:
   531                           	callstack 0
   532                           
   533 ;; *************** function _Uart_Send_String *****************
   534 ;; Defined at:
   535 ;;		line 35 in file "uart.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  info            2    1[COMRAM] PTR unsigned char 
   538 ;;		 -> STR_9(3), STR_8(14), STR_5(16), STR_2(3), 
   539 ;;		 -> STR_1(18), cadena(20), 
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   551 ;;      Params:         2       0       0       0       0       0       0       0       0
   552 ;;      Locals:         0       0       0       0       0       0       0       0       0
   553 ;;      Temps:          0       0       0       0       0       0       0       0       0
   554 ;;      Totals:         2       0       0       0       0       0       0       0       0
   555 ;;Total ram usage:        2 bytes
   556 ;; Hardware stack levels used: 1
   557 ;; Hardware stack levels required when called: 1
   558 ;; This function calls:
   559 ;;		_Uart_Send_Char
   560 ;; This function is called by:
   561 ;;		_main
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text2
   566   000AA6                     __ptext2:
   567                           	callstack 0
   568   000AA6                     _Uart_Send_String:
   569                           	callstack 29
   570   000AA6                     
   571                           ;uart.c: 35: void Uart_Send_String(char *info);uart.c: 36: {;uart.c: 37:     while(*info
      +                          )
   572   000AA6  EF69  F005         	goto	l991
   573   000AAA                     l987:
   574                           
   575                           ;uart.c: 38:     {;uart.c: 39:         Uart_Send_Char(*info++);
   576   000AAA  C002  FFF6         	movff	Uart_Send_String@info,tblptrl
   577   000AAE  C003  FFF7         	movff	Uart_Send_String@info+1,tblptrh
   578   000AB2  6AF8               	clrf	tblptru,c
   579   000AB4  0E07               	movlw	(high __ramtop+-1)
   580   000AB6  64F7               	cpfsgt	tblptrh,c
   581   000AB8  D003               	bra	u297
   582   000ABA  0008               	tblrd		*
   583   000ABC  50F5               	movf	tablat,w,c
   584   000ABE  D005               	bra	u290
   585   000AC0                     u297:
   586   000AC0  CFF6 FFE1          	movff	tblptrl,fsr1l
   587   000AC4  CFF7 FFE2          	movff	tblptrh,fsr1h
   588   000AC8  50E7               	movf	indf1,w,c
   589   000ACA                     u290:
   590   000ACA  ECDB  F005         	call	_Uart_Send_Char
   591   000ACE  4A02               	infsnz	Uart_Send_String@info^0,f,c
   592   000AD0  2A03               	incf	(Uart_Send_String@info+1)^0,f,c
   593   000AD2                     l991:
   594                           
   595                           ;uart.c: 37:     while(*info)
   596   000AD2  C002  FFF6         	movff	Uart_Send_String@info,tblptrl
   597   000AD6  C003  FFF7         	movff	Uart_Send_String@info+1,tblptrh
   598   000ADA  6AF8               	clrf	tblptru,c
   599   000ADC  0E07               	movlw	(high __ramtop+-1)
   600   000ADE  64F7               	cpfsgt	tblptrh,c
   601   000AE0  D003               	bra	u307
   602   000AE2  0008               	tblrd		*
   603   000AE4  50F5               	movf	tablat,w,c
   604   000AE6  D005               	bra	u300
   605   000AE8                     u307:
   606   000AE8  CFF6 FFE1          	movff	tblptrl,fsr1l
   607   000AEC  CFF7 FFE2          	movff	tblptrh,fsr1h
   608   000AF0  50E7               	movf	indf1,w,c
   609   000AF2                     u300:
   610   000AF2  0900               	iorlw	0
   611   000AF4  A4D8               	btfss	status,2,c
   612   000AF6  EF7F  F005         	goto	u311
   613   000AFA  EF81  F005         	goto	u310
   614   000AFE                     u311:
   615   000AFE  EF55  F005         	goto	l987
   616   000B02                     u310:
   617   000B02  0012               	return		;funcret
   618   000B04                     __end_of_Uart_Send_String:
   619                           	callstack 0
   620                           
   621 ;; *************** function _Uart_Send_Char *****************
   622 ;; Defined at:
   623 ;;		line 29 in file "uart.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;  txData          1    wreg     unsigned char 
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  txData          1    0[COMRAM] unsigned char 
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   637 ;;      Params:         0       0       0       0       0       0       0       0       0
   638 ;;      Locals:         1       0       0       0       0       0       0       0       0
   639 ;;      Temps:          0       0       0       0       0       0       0       0       0
   640 ;;      Totals:         1       0       0       0       0       0       0       0       0
   641 ;;Total ram usage:        1 bytes
   642 ;; Hardware stack levels used: 1
   643 ;; This function calls:
   644 ;;		Nothing
   645 ;; This function is called by:
   646 ;;		_Uart_Send_String
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text3
   651   000BB6                     __ptext3:
   652                           	callstack 0
   653   000BB6                     _Uart_Send_Char:
   654                           	callstack 29
   655                           
   656                           ;incstack = 0
   657                           ;Uart_Send_Char@txData stored from wreg
   658   000BB6  6E01               	movwf	Uart_Send_Char@txData^0,c
   659   000BB8                     l62:
   660   000BB8  A2AC               	btfss	172,1,c	;volatile
   661   000BBA  EFE1  F005         	goto	u11
   662   000BBE  EFE3  F005         	goto	u10
   663   000BC2                     u11:
   664   000BC2  EFDC  F005         	goto	l62
   665   000BC6                     u10:
   666   000BC6                     
   667                           ;uart.c: 32:     TXREG = txData;
   668   000BC6  C001  FFAD         	movff	Uart_Send_Char@txData,4013	;volatile
   669   000BCA  0012               	return		;funcret
   670   000BCC                     __end_of_Uart_Send_Char:
   671                           	callstack 0
   672                           
   673 ;; *************** function _Uart_Read_String *****************
   674 ;; Defined at:
   675 ;;		line 55 in file "uart.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;  Buf             1    0[COMRAM] PTR unsigned char 
   678 ;;		 -> cadena(20), 
   679 ;;  s_buf           2    1[COMRAM] unsigned int 
   680 ;; Auto vars:     Size  Location     Type
   681 ;;  cont_buf        2    4[COMRAM] unsigned int 
   682 ;;  c               1    3[COMRAM] unsigned char 
   683 ;; Return value:  Size  Location     Type
   684 ;;                  1    wreg      void 
   685 ;; Registers used:
   686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   692 ;;      Params:         3       0       0       0       0       0       0       0       0
   693 ;;      Locals:         3       0       0       0       0       0       0       0       0
   694 ;;      Temps:          0       0       0       0       0       0       0       0       0
   695 ;;      Totals:         6       0       0       0       0       0       0       0       0
   696 ;;Total ram usage:        6 bytes
   697 ;; Hardware stack levels used: 1
   698 ;; Hardware stack levels required when called: 1
   699 ;; This function calls:
   700 ;;		_Uart_Read
   701 ;; This function is called by:
   702 ;;		_main
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	text4
   707   000B04                     __ptext4:
   708                           	callstack 0
   709   000B04                     _Uart_Read_String:
   710                           	callstack 29
   711   000B04                     
   712                           ;uart.c: 55: void Uart_Read_String(char* Buf, unsigned int s_buf);uart.c: 56: {;uart.c: 
      +                          57:     unsigned int cont_buf = 0;
   713   000B04  0E00               	movlw	0
   714   000B06  6E06               	movwf	(Uart_Read_String@cont_buf+1)^0,c
   715   000B08  0E00               	movlw	0
   716   000B0A  6E05               	movwf	Uart_Read_String@cont_buf^0,c
   717   000B0C                     l969:
   718                           
   719                           ;uart.c: 60:     {;uart.c: 61:         c = Uart_Read();
   720   000B0C  ECAF  F005         	call	_Uart_Read	;wreg free
   721   000B10  6E04               	movwf	Uart_Read_String@c^0,c
   722   000B12                     
   723                           ;uart.c: 62:         Buf[cont_buf++] = c;
   724   000B12  5001               	movf	Uart_Read_String@Buf^0,w,c
   725   000B14  2405               	addwf	Uart_Read_String@cont_buf^0,w,c
   726   000B16  6ED9               	movwf	fsr2l,c
   727   000B18  6ADA               	clrf	fsr2h,c
   728   000B1A  C004  FFDF         	movff	Uart_Read_String@c,indf2
   729   000B1E  4A05               	infsnz	Uart_Read_String@cont_buf^0,f,c
   730   000B20  2A06               	incf	(Uart_Read_String@cont_buf+1)^0,f,c
   731   000B22                     
   732                           ;uart.c: 63:         if(cont_buf >= s_buf) break;
   733   000B22  5002               	movf	Uart_Read_String@s_buf^0,w,c
   734   000B24  5C05               	subwf	Uart_Read_String@cont_buf^0,w,c
   735   000B26  5003               	movf	(Uart_Read_String@s_buf+1)^0,w,c
   736   000B28  5806               	subwfb	(Uart_Read_String@cont_buf+1)^0,w,c
   737   000B2A  A0D8               	btfss	status,0,c
   738   000B2C  EF9A  F005         	goto	u271
   739   000B30  EF9C  F005         	goto	u270
   740   000B34                     u271:
   741   000B34  EF9E  F005         	goto	l979
   742   000B38                     u270:
   743   000B38  EFA7  F005         	goto	l981
   744   000B3C                     l979:
   745                           
   746                           ;uart.c: 64:     }while(c != '\n');
   747   000B3C  0E0A               	movlw	10
   748   000B3E  1804               	xorwf	Uart_Read_String@c^0,w,c
   749   000B40  A4D8               	btfss	status,2,c
   750   000B42  EFA5  F005         	goto	u281
   751   000B46  EFA7  F005         	goto	u280
   752   000B4A                     u281:
   753   000B4A  EF86  F005         	goto	l969
   754   000B4E                     u280:
   755   000B4E                     l981:
   756                           
   757                           ;uart.c: 65:     Buf[cont_buf-2] = '\0';
   758   000B4E  5001               	movf	Uart_Read_String@Buf^0,w,c
   759   000B50  2405               	addwf	Uart_Read_String@cont_buf^0,w,c
   760   000B52  6ED9               	movwf	fsr2l,c
   761   000B54  6ADA               	clrf	fsr2h,c
   762   000B56  0EFE               	movlw	254
   763   000B58  26D9               	addwf	fsr2l,f,c
   764   000B5A  6ADF               	clrf	indf2,c
   765   000B5C  0012               	return		;funcret
   766   000B5E                     __end_of_Uart_Read_String:
   767                           	callstack 0
   768                           
   769 ;; *************** function _Uart_Read *****************
   770 ;; Defined at:
   771 ;;		line 43 in file "uart.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;		None
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      unsigned char 
   778 ;; Registers used:
   779 ;;		wreg, status,2
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   785 ;;      Params:         0       0       0       0       0       0       0       0       0
   786 ;;      Locals:         0       0       0       0       0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0       0       0       0       0
   788 ;;      Totals:         0       0       0       0       0       0       0       0       0
   789 ;;Total ram usage:        0 bytes
   790 ;; Hardware stack levels used: 1
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_Uart_Read_String
   795 ;;		_Uart_Read_StringUntil
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           	psect	text5
   800   000B5E                     __ptext5:
   801                           	callstack 0
   802   000B5E                     _Uart_Read:
   803                           	callstack 29
   804   000B5E                     l74:
   805   000B5E  AA9E               	btfss	158,5,c	;volatile
   806   000B60  EFB4  F005         	goto	u21
   807   000B64  EFB6  F005         	goto	u20
   808   000B68                     u21:
   809   000B68  EFAF  F005         	goto	l74
   810   000B6C                     u20:
   811   000B6C                     
   812                           ;uart.c: 46:     if(RCSTAbits.OERR == 1)
   813   000B6C  A2AB               	btfss	171,1,c	;volatile
   814   000B6E  EFBB  F005         	goto	u31
   815   000B72  EFBD  F005         	goto	u30
   816   000B76                     u31:
   817   000B76  EFBF  F005         	goto	l77
   818   000B7A                     u30:
   819   000B7A                     
   820                           ;uart.c: 47:     {;uart.c: 48:         RCSTAbits.CREN = 0;
   821   000B7A  98AB               	bcf	171,4,c	;volatile
   822                           
   823                           ;uart.c: 49:         RCSTAbits.CREN = 1;
   824   000B7C  88AB               	bsf	171,4,c	;volatile
   825   000B7E                     l77:
   826                           
   827                           ;uart.c: 51:     PIR1bits.RCIF = 0;
   828   000B7E  9A9E               	bcf	158,5,c	;volatile
   829   000B80                     
   830                           ;uart.c: 52:     return RCREG;
   831   000B80  50AE               	movf	174,w,c	;volatile
   832   000B82  0012               	return		;funcret
   833   000B84                     __end_of_Uart_Read:
   834                           	callstack 0
   835                           
   836 ;; *************** function _Uart_Init *****************
   837 ;; Defined at:
   838 ;;		line 11 in file "uart.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  baud            4   13[COMRAM] unsigned long 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  vx              2   21[COMRAM] unsigned int 
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   852 ;;      Params:         4       0       0       0       0       0       0       0       0
   853 ;;      Locals:         2       0       0       0       0       0       0       0       0
   854 ;;      Temps:          4       0       0       0       0       0       0       0       0
   855 ;;      Totals:        10       0       0       0       0       0       0       0       0
   856 ;;Total ram usage:       10 bytes
   857 ;; Hardware stack levels used: 1
   858 ;; Hardware stack levels required when called: 1
   859 ;; This function calls:
   860 ;;		___lldiv
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text6
   867   0009D2                     __ptext6:
   868                           	callstack 0
   869   0009D2                     _Uart_Init:
   870                           	callstack 29
   871   0009D2                     
   872                           ;uart.c: 11: void Uart_Init(unsigned long baud);uart.c: 12: {;uart.c: 13:     TRISCbits.
      +                          RC6 = 0;
   873   0009D2  9C94               	bcf	148,6,c	;volatile
   874                           
   875                           ;uart.c: 14:     TRISCbits.RC7 = 1;
   876   0009D4  8E94               	bsf	148,7,c	;volatile
   877   0009D6                     
   878                           ;uart.c: 15:     TXSTA = 0x24;
   879   0009D6  0E24               	movlw	36
   880   0009D8  6EAC               	movwf	172,c	;volatile
   881                           
   882                           ;uart.c: 16:     RCSTA = 0x90;
   883   0009DA  0E90               	movlw	144
   884   0009DC  6EAB               	movwf	171,c	;volatile
   885                           
   886                           ;uart.c: 17:     BAUDCON = 0x00;
   887   0009DE  0E00               	movlw	0
   888   0009E0  6EB8               	movwf	184,c	;volatile
   889   0009E2                     
   890                           ;uart.c: 18:     BAUDCONbits.BRG16 = 1;
   891   0009E2  86B8               	bsf	184,3,c	;volatile
   892   0009E4                     
   893                           ;uart.c: 19:     unsigned int vx = (48000000/(baud*4))-1;
   894   0009E4  0E00               	movlw	0
   895   0009E6  6E01               	movwf	___lldiv@dividend^0,c
   896   0009E8  0E6C               	movlw	108
   897   0009EA  6E02               	movwf	(___lldiv@dividend+1)^0,c
   898   0009EC  0EDC               	movlw	220
   899   0009EE  6E03               	movwf	(___lldiv@dividend+2)^0,c
   900   0009F0  0E02               	movlw	2
   901   0009F2  6E04               	movwf	(___lldiv@dividend+3)^0,c
   902   0009F4  C00E  F012         	movff	Uart_Init@baud,??_Uart_Init
   903   0009F8  C00F  F013         	movff	Uart_Init@baud+1,??_Uart_Init+1
   904   0009FC  C010  F014         	movff	Uart_Init@baud+2,??_Uart_Init+2
   905   000A00  C011  F015         	movff	Uart_Init@baud+3,??_Uart_Init+3
   906   000A04  0E02               	movlw	2
   907   000A06                     u255:
   908   000A06  90D8               	bcf	status,0,c
   909   000A08  3612               	rlcf	??_Uart_Init^0,f,c
   910   000A0A  3613               	rlcf	(??_Uart_Init+1)^0,f,c
   911   000A0C  3614               	rlcf	(??_Uart_Init+2)^0,f,c
   912   000A0E  3615               	rlcf	(??_Uart_Init+3)^0,f,c
   913   000A10  2EE8               	decfsz	wreg,f,c
   914   000A12  EF03  F005         	goto	u255
   915   000A16  C012  F005         	movff	??_Uart_Init,___lldiv@divisor
   916   000A1A  C013  F006         	movff	??_Uart_Init+1,___lldiv@divisor+1
   917   000A1E  C014  F007         	movff	??_Uart_Init+2,___lldiv@divisor+2
   918   000A22  C015  F008         	movff	??_Uart_Init+3,___lldiv@divisor+3
   919   000A26  EC97  F004         	call	___lldiv	;wreg free
   920   000A2A  0EFF               	movlw	255
   921   000A2C  2401               	addwf	?___lldiv^0,w,c
   922   000A2E  6E16               	movwf	Uart_Init@vx^0,c
   923   000A30  0EFF               	movlw	255
   924   000A32  2002               	addwfc	(?___lldiv+1)^0,w,c
   925   000A34  6E17               	movwf	(Uart_Init@vx+1)^0,c
   926   000A36                     
   927                           ;uart.c: 20:     SPBRG = vx & 0x00FF;
   928   000A36  C016  FFAF         	movff	Uart_Init@vx,4015	;volatile
   929   000A3A                     
   930                           ;uart.c: 21:     SPBRGH = vx >> 8;
   931   000A3A  5017               	movf	(Uart_Init@vx+1)^0,w,c
   932   000A3C  6EB0               	movwf	176,c	;volatile
   933   000A3E  0012               	return		;funcret
   934   000A40                     __end_of_Uart_Init:
   935                           	callstack 0
   936                           
   937 ;; *************** function ___lldiv *****************
   938 ;; Defined at:
   939 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  dividend        4    0[COMRAM] unsigned long 
   942 ;;  divisor         4    4[COMRAM] unsigned long 
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  quotient        4    8[COMRAM] unsigned long 
   945 ;;  counter         1   12[COMRAM] unsigned char 
   946 ;; Return value:  Size  Location     Type
   947 ;;                  4    0[COMRAM] unsigned long 
   948 ;; Registers used:
   949 ;;		wreg, status,2, status,0
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   955 ;;      Params:         8       0       0       0       0       0       0       0       0
   956 ;;      Locals:         5       0       0       0       0       0       0       0       0
   957 ;;      Temps:          0       0       0       0       0       0       0       0       0
   958 ;;      Totals:        13       0       0       0       0       0       0       0       0
   959 ;;Total ram usage:       13 bytes
   960 ;; Hardware stack levels used: 1
   961 ;; This function calls:
   962 ;;		Nothing
   963 ;; This function is called by:
   964 ;;		_Uart_Init
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           	psect	text7
   969   00092E                     __ptext7:
   970                           	callstack 0
   971   00092E                     ___lldiv:
   972                           	callstack 29
   973   00092E  0E00               	movlw	0
   974   000930  6E09               	movwf	___lldiv@quotient^0,c
   975   000932  0E00               	movlw	0
   976   000934  6E0A               	movwf	(___lldiv@quotient+1)^0,c
   977   000936  0E00               	movlw	0
   978   000938  6E0B               	movwf	(___lldiv@quotient+2)^0,c
   979   00093A  0E00               	movlw	0
   980   00093C  6E0C               	movwf	(___lldiv@quotient+3)^0,c
   981   00093E  5005               	movf	___lldiv@divisor^0,w,c
   982   000940  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
   983   000942  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
   984   000944  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
   985   000946  B4D8               	btfsc	status,2,c
   986   000948  EFA8  F004         	goto	u221
   987   00094C  EFAA  F004         	goto	u220
   988   000950                     u221:
   989   000950  EFE0  F004         	goto	l127
   990   000954                     u220:
   991   000954  0E01               	movlw	1
   992   000956  6E0D               	movwf	___lldiv@counter^0,c
   993   000958  EFB4  F004         	goto	l937
   994   00095C                     l935:
   995   00095C  90D8               	bcf	status,0,c
   996   00095E  3605               	rlcf	___lldiv@divisor^0,f,c
   997   000960  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
   998   000962  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
   999   000964  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  1000   000966  2A0D               	incf	___lldiv@counter^0,f,c
  1001   000968                     l937:
  1002   000968  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  1003   00096A  EFB9  F004         	goto	u231
  1004   00096E  EFBB  F004         	goto	u230
  1005   000972                     u231:
  1006   000972  EFAE  F004         	goto	l935
  1007   000976                     u230:
  1008   000976                     l939:
  1009   000976  90D8               	bcf	status,0,c
  1010   000978  3609               	rlcf	___lldiv@quotient^0,f,c
  1011   00097A  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  1012   00097C  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  1013   00097E  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  1014   000980  5005               	movf	___lldiv@divisor^0,w,c
  1015   000982  5C01               	subwf	___lldiv@dividend^0,w,c
  1016   000984  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1017   000986  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  1018   000988  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1019   00098A  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  1020   00098C  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1021   00098E  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  1022   000990  A0D8               	btfss	status,0,c
  1023   000992  EFCD  F004         	goto	u241
  1024   000996  EFCF  F004         	goto	u240
  1025   00099A                     u241:
  1026   00099A  EFD8  F004         	goto	l947
  1027   00099E                     u240:
  1028   00099E  5005               	movf	___lldiv@divisor^0,w,c
  1029   0009A0  5E01               	subwf	___lldiv@dividend^0,f,c
  1030   0009A2  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1031   0009A4  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  1032   0009A6  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1033   0009A8  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  1034   0009AA  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1035   0009AC  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  1036   0009AE  8009               	bsf	___lldiv@quotient^0,0,c
  1037   0009B0                     l947:
  1038   0009B0  90D8               	bcf	status,0,c
  1039   0009B2  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  1040   0009B4  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  1041   0009B6  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  1042   0009B8  3205               	rrcf	___lldiv@divisor^0,f,c
  1043   0009BA  2E0D               	decfsz	___lldiv@counter^0,f,c
  1044   0009BC  EFBB  F004         	goto	l939
  1045   0009C0                     l127:
  1046   0009C0  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1047   0009C4  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1048   0009C8  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1049   0009CC  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1050   0009D0  0012               	return		;funcret
  1051   0009D2                     __end_of___lldiv:
  1052                           	callstack 0
  1053                           
  1054 ;; *************** function _Uart_Available *****************
  1055 ;; Defined at:
  1056 ;;		line 24 in file "uart.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;		None
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  2    0[COMRAM] short 
  1063 ;; Registers used:
  1064 ;;		wreg, status,2
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1070 ;;      Params:         2       0       0       0       0       0       0       0       0
  1071 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1072 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1073 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1074 ;;Total ram usage:        3 bytes
  1075 ;; Hardware stack levels used: 1
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_main
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text8
  1084   000B84                     __ptext8:
  1085                           	callstack 0
  1086   000B84                     _Uart_Available:
  1087                           	callstack 30
  1088   000B84                     
  1089                           ;uart.c: 26:     return PIR1bits.RCIF ? 1 : 0;
  1090   000B84  BA9E               	btfsc	158,5,c	;volatile
  1091   000B86  EFC7  F005         	goto	u261
  1092   000B8A  EFCB  F005         	goto	u260
  1093   000B8E                     u261:
  1094   000B8E  6A03               	clrf	??_Uart_Available^0,c
  1095   000B90  2A03               	incf	??_Uart_Available^0,f,c
  1096   000B92  EFCC  F005         	goto	u268
  1097   000B96                     u260:
  1098   000B96  6A03               	clrf	??_Uart_Available^0,c
  1099   000B98                     u268:
  1100   000B98  5003               	movf	??_Uart_Available^0,w,c
  1101   000B9A  6E01               	movwf	?_Uart_Available^0,c
  1102   000B9C  6A02               	clrf	(?_Uart_Available+1)^0,c
  1103   000B9E  0012               	return		;funcret
  1104   000BA0                     __end_of_Uart_Available:
  1105                           	callstack 0
  1106                           
  1107                           	psect	rparam
  1108   000000                     
  1109                           	psect	config
  1110                           
  1111                           ;Config register CONFIG1L @ 0x300000
  1112                           ;	PLL Prescaler Selection bits
  1113                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1114                           ;	System Clock Postscaler Selection bits
  1115                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1116                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1117                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1118   300000                     	org	3145728
  1119   300000  21                 	db	33
  1120                           
  1121                           ;Config register CONFIG1H @ 0x300001
  1122                           ;	Oscillator Selection bits
  1123                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  1124                           ;	Fail-Safe Clock Monitor Enable bit
  1125                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1126                           ;	Internal/External Oscillator Switchover bit
  1127                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1128   300001                     	org	3145729
  1129   300001  0E                 	db	14
  1130                           
  1131                           ;Config register CONFIG2L @ 0x300002
  1132                           ;	Power-up Timer Enable bit
  1133                           ;	PWRT = OFF, PWRT disabled
  1134                           ;	Brown-out Reset Enable bits
  1135                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1136                           ;	Brown-out Reset Voltage bits
  1137                           ;	BORV = 3, Minimum setting 2.05V
  1138                           ;	USB Voltage Regulator Enable bit
  1139                           ;	VREGEN = OFF, USB voltage regulator disabled
  1140   300002                     	org	3145730
  1141   300002  19                 	db	25
  1142                           
  1143                           ;Config register CONFIG2H @ 0x300003
  1144                           ;	Watchdog Timer Enable bit
  1145                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1146                           ;	Watchdog Timer Postscale Select bits
  1147                           ;	WDTPS = 32768, 1:32768
  1148   300003                     	org	3145731
  1149   300003  1E                 	db	30
  1150                           
  1151                           ; Padding undefined space
  1152   300004                     	org	3145732
  1153   300004  FF                 	db	255
  1154                           
  1155                           ;Config register CONFIG3H @ 0x300005
  1156                           ;	CCP2 MUX bit
  1157                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1158                           ;	PORTB A/D Enable bit
  1159                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1160                           ;	Low-Power Timer 1 Oscillator Enable bit
  1161                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1162                           ;	MCLR Pin Enable bit
  1163                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1164   300005                     	org	3145733
  1165   300005  81                 	db	129
  1166                           
  1167                           ;Config register CONFIG4L @ 0x300006
  1168                           ;	Stack Full/Underflow Reset Enable bit
  1169                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1170                           ;	Single-Supply ICSP Enable bit
  1171                           ;	LVP = OFF, Single-Supply ICSP disabled
  1172                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1173                           ;	ICPRT = OFF, ICPORT disabled
  1174                           ;	Extended Instruction Set Enable bit
  1175                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1176                           ;	Background Debugger Enable bit
  1177                           ;	DEBUG = 0x1, unprogrammed default
  1178   300006                     	org	3145734
  1179   300006  81                 	db	129
  1180                           
  1181                           ; Padding undefined space
  1182   300007                     	org	3145735
  1183   300007  FF                 	db	255
  1184                           
  1185                           ;Config register CONFIG5L @ 0x300008
  1186                           ;	Code Protection bit
  1187                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1188                           ;	Code Protection bit
  1189                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1190                           ;	Code Protection bit
  1191                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1192                           ;	Code Protection bit
  1193                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1194   300008                     	org	3145736
  1195   300008  0F                 	db	15
  1196                           
  1197                           ;Config register CONFIG5H @ 0x300009
  1198                           ;	Boot Block Code Protection bit
  1199                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1200                           ;	Data EEPROM Code Protection bit
  1201                           ;	CPD = OFF, Data EEPROM is not code-protected
  1202   300009                     	org	3145737
  1203   300009  C0                 	db	192
  1204                           
  1205                           ;Config register CONFIG6L @ 0x30000A
  1206                           ;	Write Protection bit
  1207                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1208                           ;	Write Protection bit
  1209                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1210                           ;	Write Protection bit
  1211                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1212                           ;	Write Protection bit
  1213                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1214   30000A                     	org	3145738
  1215   30000A  0F                 	db	15
  1216                           
  1217                           ;Config register CONFIG6H @ 0x30000B
  1218                           ;	Configuration Register Write Protection bit
  1219                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1220                           ;	Boot Block Write Protection bit
  1221                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1222                           ;	Data EEPROM Write Protection bit
  1223                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1224   30000B                     	org	3145739
  1225   30000B  E0                 	db	224
  1226                           
  1227                           ;Config register CONFIG7L @ 0x30000C
  1228                           ;	Table Read Protection bit
  1229                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1230                           ;	Table Read Protection bit
  1231                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1232                           ;	Table Read Protection bit
  1233                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1234                           ;	Table Read Protection bit
  1235                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1236   30000C                     	org	3145740
  1237   30000C  0F                 	db	15
  1238                           
  1239                           ;Config register CONFIG7H @ 0x30000D
  1240                           ;	Boot Block Table Read Protection bit
  1241                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1242   30000D                     	org	3145741
  1243   30000D  40                 	db	64
  1244                           tosu	equ	0xFFF
  1245                           tosh	equ	0xFFE
  1246                           tosl	equ	0xFFD
  1247                           stkptr	equ	0xFFC
  1248                           pclatu	equ	0xFFB
  1249                           pclath	equ	0xFFA
  1250                           pcl	equ	0xFF9
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           prodh	equ	0xFF4
  1256                           prodl	equ	0xFF3
  1257                           indf0	equ	0xFEF
  1258                           postinc0	equ	0xFEE
  1259                           postdec0	equ	0xFED
  1260                           preinc0	equ	0xFEC
  1261                           plusw0	equ	0xFEB
  1262                           fsr0h	equ	0xFEA
  1263                           fsr0l	equ	0xFE9
  1264                           wreg	equ	0xFE8
  1265                           indf1	equ	0xFE7
  1266                           postinc1	equ	0xFE6
  1267                           postdec1	equ	0xFE5
  1268                           preinc1	equ	0xFE4
  1269                           plusw1	equ	0xFE3
  1270                           fsr1h	equ	0xFE2
  1271                           fsr1l	equ	0xFE1
  1272                           bsr	equ	0xFE0
  1273                           indf2	equ	0xFDF
  1274                           postinc2	equ	0xFDE
  1275                           postdec2	equ	0xFDD
  1276                           preinc2	equ	0xFDC
  1277                           plusw2	equ	0xFDB
  1278                           fsr2h	equ	0xFDA
  1279                           fsr2l	equ	0xFD9
  1280                           status	equ	0xFD8

Data Sizes:
    Strings     64
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      43
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcmp@l	PTR const unsigned char  size(1) Largest target is 20
		 -> cadena(COMRAM[20]), 

    strcmp@r	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_4(CODE[9]), STR_7(CODE[7]), 

    Uart_Read_String@Buf	PTR unsigned char  size(1) Largest target is 20
		 -> cadena(COMRAM[20]), 

    Uart_Send_String@info	PTR unsigned char  size(2) Largest target is 20
		 -> cadena(COMRAM[20]), STR_1(CODE[18]), STR_2(CODE[3]), STR_5(CODE[16]), 
		 -> STR_8(CODE[14]), STR_9(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_Uart_Init
    _Uart_Send_String->_Uart_Send_Char
    _Uart_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1721
                     _Uart_Available
                          _Uart_Init
                   _Uart_Read_String
                   _Uart_Send_String
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               3     1      2     416
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Uart_Send_String                                     2     0      2     516
                                              1 COMRAM     2     0      2
                     _Uart_Send_Char
 ---------------------------------------------------------------------------------
 (2) _Uart_Send_Char                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Uart_Read_String                                     6     3      3     332
                                              0 COMRAM     6     3      3
                          _Uart_Read
 ---------------------------------------------------------------------------------
 (2) _Uart_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Uart_Init                                           10     6      4     457
                                             13 COMRAM    10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _Uart_Available                                       3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Uart_Available
   _Uart_Init
     ___lldiv
   _Uart_Read_String
     _Uart_Read
   _Uart_Send_String
     _Uart_Send_Char
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      28        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      2B       1       45.3%
BITBIGSFRh          3E      0       0      20        0.0%
BITBIGSFRlll        2A      0       0      26        0.0%
BITBIGSFRlhlh        C      0       0      23        0.0%
BITBIGSFRlhll        9      0       0      24        0.0%
BITBIGSFRlhhh        8      0       0      21        0.0%
BITBIGSFRllh         8      0       0      25        0.0%
BITBIGSFRlhhlh       7      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      27        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Apr 23 08:50:36 2024

                      l26 0916                        l62 0BB8                        l71 0B02  
                      l56 0A3E                        l65 0BCA                        l74 0B5E  
                      l59 0B9E                        l76 0B6C                        l84 0B5C  
                      l77 0B7E                        l78 0B82                        u10 0BC6  
                      u11 0BC2                        u20 0B6C                        u21 0B68  
                      u30 0B7A                        u31 0B76                       l134 09D0  
                     l127 09C0                       l931 093E                       l941 0980  
                     l933 0954                       l781 0BB8                       l943 099E  
                     l935 095C                       l951 09D2                       l783 0BC6  
                     l945 09AE                       l937 0968                       l929 092E  
                     l961 0A3A                       l953 09D6                       l785 0B5E  
                     l963 0B84                       l947 09B0                       l939 0976  
                     l955 09E2                       l787 0B7A                       l971 0B12  
                     l779 0AA4                       l949 09BA                       l957 09E4  
                     l789 0B80                       l981 0B4E                       l973 0B1E  
                     l959 0A36                       l983 0B5C                       l975 0B22  
                     l967 0B04                       l991 0AD2                       l969 0B0C  
                     l985 0AA6                       l993 0A40                       l979 0B3C  
                     l987 0AAA                       l995 0A44                       l989 0ACE  
                     l997 0A48                       l999 0A6E                       u220 0954  
                     u300 0AF2                       u221 0950                       u230 0976  
                     u310 0B02                       u231 0972                       u311 0AFE  
                     u240 099E                       u320 0A6E                       u241 099A  
                     u321 0A6A                       u330 0A84                       u307 0AE8  
                     u331 0A80                       u260 0B96                       u340 087C  
                     u261 0B8E                       u341 0878                       u270 0B38  
                     u350 08D4                       u255 0A06                       u271 0B34  
                     u351 08D0                       u280 0B4E                       u360 0904  
                     u281 0B4A                       u361 0900                       u290 0ACA  
                     u268 0B98                       u297 0AC0                       wreg 0FE8  
                    l1001 0A84                      l1011 084A                      l1021 08A6  
                    l1013 085E                      l1005 0842                      l1031 0904  
                    l1023 08B6                      l1015 087C                      l1007 0846  
                    l1033 0906                      l1025 08D4                      l1017 088C  
                    l1009 0848                      l1027 08D6                      l1019 089C  
                    l1029 08E6                      STR_1 0801                      STR_2 082E  
                    STR_3 0831                      STR_4 0831                      STR_5 0813  
                    STR_6 083A                      STR_7 083A                      STR_8 0823  
                    STR_9 082E  __end_of_Uart_Read_String 0B5E                      _main 0842  
                    fsr1h 0FE2                      fsr2h 0FDA                      indf1 0FE7  
                    indf2 0FDF                      fsr1l 0FE1                      fsr2l 0FD9  
                    start 0000              ___param_bank 0000                     ?_main 0001  
         __end_of___lldiv 09D2                     _RCREG 0FAE                     _RCSTA 0FAB  
   Uart_Read_String@s_buf 0002                     _SPBRG 0FAF                     _TXREG 0FAD  
                   _TXSTA 0FAC                     tablat 0FF5  __end_of_Uart_Send_String 0B04  
                   status 0FD8           __initialization 0BA0              __end_of_main 092E  
                  ??_main 0018             __activetblptr 0002            _Uart_Available 0B84  
                  _SPBRGH 0FB0                    _cadena 0018                 ??___lldiv 0009  
                  clear_0 0BA6                    isa$std 0001            _Uart_Send_Char 0BB6  
                  _strcmp 0A40              __mediumconst 0000    __end_of_Uart_Available 0BA0  
                  tblptrh 0FF7                    tblptrl 0FF6                    tblptru 0FF8  
              __accesstop 0060   __end_of__initialization 0BAC             ___rparam_used 0001  
          __pcstackCOMRAM 0001       Uart_Read_String@Buf 0001    __end_of_Uart_Send_Char 0BCC  
         ?_Uart_Available 0001         ?_Uart_Read_String 0001         __end_of_Uart_Init 0A40  
       __end_of_Uart_Read 0B84        ??_Uart_Read_String 0004           ?_Uart_Send_Char 0001  
                 _BAUDCON 0FB8                   ?_strcmp 0001               Uart_Init@vx 0016  
       ?_Uart_Send_String 0002      Uart_Send_Char@txData 0001        ??_Uart_Send_String 0004  
                 __Hparam 0000                   __Lparam 0000                   ___lldiv 092E  
            __psmallconst 0800                   __pcinit 0BA0                   __ramtop 0800  
                 __ptext0 0842                   __ptext1 0A40                   __ptext2 0AA6  
                 __ptext3 0BB6                   __ptext4 0B04                   __ptext5 0B5E  
                 __ptext6 09D2                   __ptext7 092E                   __ptext8 0B84  
    end_of_initialization 0BAC             __Lmediumconst 0000           ___lldiv@divisor 0005  
           Uart_Init@baud 000E           ___lldiv@counter 000D                 _RCSTAbits 0FAB  
                 postinc0 0FEE                   strcmp@l 0001                   strcmp@r 0002  
               _TRISBbits 0F93                 _TRISCbits 0F94                 _TXSTAbits 0FAC  
             _BAUDCONbits 0FB8          ??_Uart_Available 0003            __end_of_strcmp 0AA6  
     start_initialization 0BA0         Uart_Read_String@c 0004          ??_Uart_Send_Char 0001  
               _Uart_Init 09D2                 _Uart_Read 0B5E                  ??_strcmp 0003  
             __pbssCOMRAM 0018                ?_Uart_Init 000E                ?_Uart_Read 0001  
                ?___lldiv 0001               __smallconst 0800                  _LATBbits 0F8A  
Uart_Read_String@cont_buf 0005                  _PIR1bits 0F9E                _ADCON1bits 0FC1  
                __Hrparam 0000               ??_Uart_Init 0012               ??_Uart_Read 0001  
                __Lrparam 0000          _Uart_Read_String 0B04      Uart_Send_String@info 0002  
                isa$xinst 0000          _Uart_Send_String 0AA6          ___lldiv@dividend 0001  
        ___lldiv@quotient 0009  
