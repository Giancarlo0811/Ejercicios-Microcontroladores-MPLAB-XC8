

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Apr 13 11:15:04 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 18/08/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     
    62                           	psect	idataCOMRAM
    63   0010A0                     __pidataCOMRAM:
    64                           	callstack 0
    65                           
    66                           ;initializer for _clave_enter
    67   0010A0  30                 	db	48
    68   0010A1  38                 	db	56
    69   0010A2  31                 	db	49
    70   0010A3  31                 	db	49
    71   0010A4  00                 	db	0
    72   000000                     _PORTDbits	set	3971
    73   000000                     _LATBbits	set	3978
    74   000000                     _TRISBbits	set	3987
    75   000000                     _ADCON1bits	set	4033
    76   000000                     _TRISDbits	set	3989
    77                           
    78                           	psect	smallconst
    79   000800                     __psmallconst:
    80                           	callstack 0
    81   000800  00                 	db	0
    82   000801                     STR_2:
    83   000801  43                 	db	67	;'C'
    84   000802  4C                 	db	76	;'L'
    85   000803  41                 	db	65	;'A'
    86   000804  56                 	db	86	;'V'
    87   000805  45                 	db	69	;'E'
    88   000806  20                 	db	32
    89   000807  43                 	db	67	;'C'
    90   000808  4F                 	db	79	;'O'
    91   000809  52                 	db	82	;'R'
    92   00080A  52                 	db	82	;'R'
    93   00080B  45                 	db	69	;'E'
    94   00080C  43                 	db	67	;'C'
    95   00080D  54                 	db	84	;'T'
    96   00080E  41                 	db	65	;'A'
    97   00080F  00                 	db	0
    98   000810                     STR_1:
    99   000810  49                 	db	73	;'I'
   100   000811  4E                 	db	78	;'N'
   101   000812  47                 	db	71	;'G'
   102   000813  52                 	db	82	;'R'
   103   000814  45                 	db	69	;'E'
   104   000815  53                 	db	83	;'S'
   105   000816  41                 	db	65	;'A'
   106   000817  52                 	db	82	;'R'
   107   000818  20                 	db	32
   108   000819  43                 	db	67	;'C'
   109   00081A  4C                 	db	76	;'L'
   110   00081B  41                 	db	65	;'A'
   111   00081C  56                 	db	86	;'V'
   112   00081D  45                 	db	69	;'E'
   113   00081E  00                 	db	0
   114   00081F                     STR_3:
   115   00081F  42                 	db	66	;'B'
   116   000820  49                 	db	73	;'I'
   117   000821  45                 	db	69	;'E'
   118   000822  4E                 	db	78	;'N'
   119   000823  56                 	db	86	;'V'
   120   000824  45                 	db	69	;'E'
   121   000825  4E                 	db	78	;'N'
   122   000826  49                 	db	73	;'I'
   123   000827  44                 	db	68	;'D'
   124   000828  4F                 	db	79	;'O'
   125   000829  21                 	db	33
   126   00082A  00                 	db	0
   127   00082B                     STR_5:
   128   00082B  49                 	db	73	;'I'
   129   00082C  4E                 	db	78	;'N'
   130   00082D  43                 	db	67	;'C'
   131   00082E  4F                 	db	79	;'O'
   132   00082F  52                 	db	82	;'R'
   133   000830  52                 	db	82	;'R'
   134   000831  45                 	db	69	;'E'
   135   000832  43                 	db	67	;'C'
   136   000833  54                 	db	84	;'T'
   137   000834  41                 	db	65	;'A'
   138   000835  00                 	db	0
   139   000836  00                 	db	0	; dummy byte at the end
   140   000000                     
   141                           ; #config settings
   142                           
   143                           	psect	cinit
   144   000FF2                     __pcinit:
   145                           	callstack 0
   146   000FF2                     start_initialization:
   147                           	callstack 0
   148   000FF2                     __initialization:
   149                           	callstack 0
   150                           
   151                           ; Initialize objects allocated to COMRAM (5 bytes)
   152                           ; load TBLPTR registers with __pidataCOMRAM
   153   000FF2  0EA0               	movlw	low __pidataCOMRAM
   154   000FF4  6EF6               	movwf	tblptrl,c
   155   000FF6  0E10               	movlw	high __pidataCOMRAM
   156   000FF8  6EF7               	movwf	tblptrh,c
   157   000FFA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   158   000FFC  6EF8               	movwf	tblptru,c
   159   000FFE  EE00  F013         	lfsr	0,__pdataCOMRAM
   160   001002  EE10 F005          	lfsr	1,5
   161   001006                     copy_data0:
   162   001006  0009               	tblrd		*+
   163   001008  CFF5 FFEE          	movff	tablat,postinc0
   164   00100C  50E5               	movf	postdec1,w,c
   165   00100E  50E1               	movf	fsr1l,w,c
   166   001010  E1FA               	bnz	copy_data0
   167                           
   168                           ; Clear objects allocated to COMRAM (6 bytes)
   169   001012  6A12               	clrf	(__pbssCOMRAM+5)& (0+255),c
   170   001014  6A11               	clrf	(__pbssCOMRAM+4)& (0+255),c
   171   001016  6A10               	clrf	(__pbssCOMRAM+3)& (0+255),c
   172   001018  6A0F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   173   00101A  6A0E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   174   00101C  6A0D               	clrf	__pbssCOMRAM& (0+255),c
   175   00101E                     end_of_initialization:
   176                           	callstack 0
   177   00101E                     __end_of__initialization:
   178                           	callstack 0
   179   00101E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   180   001020  6EF8               	movwf	tblptru,c
   181   001022  0E08               	movlw	high __Lsmallconst
   182   001024  6EF7               	movwf	tblptrh,c
   183   001026  0100               	movlb	0
   184   001028  EF2E  F006         	goto	_main	;jump to C main() function
   185                           
   186                           	psect	bssCOMRAM
   187   00000D                     __pbssCOMRAM:
   188                           	callstack 0
   189   00000D                     _tecla:
   190                           	callstack 0
   191   00000D                     	ds	1
   192   00000E                     _clave:
   193                           	callstack 0
   194   00000E                     	ds	5
   195                           
   196                           	psect	dataCOMRAM
   197   000013                     __pdataCOMRAM:
   198                           	callstack 0
   199   000013                     _clave_enter:
   200                           	callstack 0
   201   000013                     	ds	5
   202                           
   203                           	psect	cstackCOMRAM
   204   000001                     __pcstackCOMRAM:
   205                           	callstack 0
   206   000001                     ??_Keypad_Get_Char:
   207   000001                     ?_strcmp:
   208                           	callstack 0
   209   000001                     Lcd_Port@a:
   210                           	callstack 0
   211   000001                     strcmp@l:
   212                           	callstack 0
   213                           
   214                           ; 1 bytes @ 0x0
   215   000001                     	ds	1
   216   000002                     ??_Lcd_Cmd:
   217   000002                     Lcd_Write_Char@temp:
   218                           	callstack 0
   219   000002                     strcmp@r:
   220                           	callstack 0
   221                           
   222                           ; 1 bytes @ 0x1
   223   000002                     	ds	1
   224   000003                     ??_strcmp:
   225   000003                     Lcd_Cmd@a:
   226                           	callstack 0
   227   000003                     Lcd_Write_Char@y:
   228                           	callstack 0
   229                           
   230                           ; 1 bytes @ 0x2
   231   000003                     	ds	1
   232   000004                     ??_Lcd_Init:
   233   000004                     Lcd_Set_Cursor@b:
   234                           	callstack 0
   235   000004                     Lcd_Write_Char@a:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0x3
   239   000004                     	ds	1
   240   000005                     Lcd_Set_Cursor@a:
   241                           	callstack 0
   242   000005                     Lcd_Write_String@a:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0x4
   246   000005                     	ds	1
   247   000006                     ??_Lcd_Write_String:
   248   000006                     Lcd_Set_Cursor@z:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0x5
   252   000006                     	ds	1
   253   000007                     Lcd_Set_Cursor@y:
   254                           	callstack 0
   255   000007                     Lcd_Write_String@i:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0x6
   259   000007                     	ds	1
   260   000008                     Lcd_Set_Cursor@temp:
   261                           	callstack 0
   262                           
   263                           ; 1 bytes @ 0x7
   264   000008                     	ds	1
   265   000009                     ??_main:
   266                           
   267                           ; 1 bytes @ 0x8
   268   000009                     	ds	2
   269   00000B                     main@i:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0xA
   273   00000B                     	ds	2
   274                           
   275 ;;
   276 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   277 ;;
   278 ;; *************** function _main *****************
   279 ;; Defined at:
   280 ;;		line 32 in file "Keypad4X4_Password.c"
   281 ;; Parameters:    Size  Location     Type
   282 ;;		None
   283 ;; Auto vars:     Size  Location     Type
   284 ;;  i               2   10[COMRAM] int 
   285 ;; Return value:  Size  Location     Type
   286 ;;                  1    wreg      void 
   287 ;; Registers used:
   288 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   289 ;; Tracked objects:
   290 ;;		On entry : 0/0
   291 ;;		On exit  : 0/0
   292 ;;		Unchanged: 0/0
   293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   294 ;;      Params:         0       0       0       0       0       0       0       0       0
   295 ;;      Locals:         2       0       0       0       0       0       0       0       0
   296 ;;      Temps:          2       0       0       0       0       0       0       0       0
   297 ;;      Totals:         4       0       0       0       0       0       0       0       0
   298 ;;Total ram usage:        4 bytes
   299 ;; Hardware stack levels required when called: 4
   300 ;; This function calls:
   301 ;;		_Keypad_Get_Char
   302 ;;		_Keypad_Init
   303 ;;		_Lcd_Clear
   304 ;;		_Lcd_Init
   305 ;;		_Lcd_Set_Cursor
   306 ;;		_Lcd_Write_Char
   307 ;;		_Lcd_Write_String
   308 ;;		_strcmp
   309 ;; This function is called by:
   310 ;;		Startup code after reset
   311 ;; This function uses a non-reentrant model
   312 ;;
   313                           
   314                           	psect	text0
   315   000C5C                     __ptext0:
   316                           	callstack 0
   317   000C5C                     _main:
   318                           	callstack 27
   319   000C5C                     
   320                           ;Keypad4X4_Password.c: 34:     ADCON1bits.PCFG = 0x0F;
   321   000C5C  0E0F               	movlw	15
   322   000C5E  12C1               	iorwf	193,f,c	;volatile
   323   000C60                     
   324                           ;Keypad4X4_Password.c: 35:     TRISBbits.RB0 = 0;
   325   000C60  9093               	bcf	147,0,c	;volatile
   326   000C62                     
   327                           ;Keypad4X4_Password.c: 36:     TRISBbits.RB1 = 0;
   328   000C62  9293               	bcf	147,1,c	;volatile
   329   000C64                     
   330                           ;Keypad4X4_Password.c: 37:     LATBbits.LB0 = 0;
   331   000C64  908A               	bcf	138,0,c	;volatile
   332   000C66                     
   333                           ;Keypad4X4_Password.c: 38:     LATBbits.LB1 = 0;
   334   000C66  928A               	bcf	138,1,c	;volatile
   335   000C68                     
   336                           ;Keypad4X4_Password.c: 39:     Keypad_Init();
   337   000C68  EC40  F008         	call	_Keypad_Init	;wreg free
   338                           
   339                           ;Keypad4X4_Password.c: 40:     Lcd_Init();
   340   000C6C  EC35  F007         	call	_Lcd_Init	;wreg free
   341   000C70                     l1241:
   342                           
   343                           ;Keypad4X4_Password.c: 43:     {;Keypad4X4_Password.c: 44:         int i = 0;
   344   000C70  0E00               	movlw	0
   345   000C72  6E0C               	movwf	(main@i+1)^0,c
   346   000C74  0E00               	movlw	0
   347   000C76  6E0B               	movwf	main@i^0,c
   348   000C78                     
   349                           ;Keypad4X4_Password.c: 45:         Lcd_Set_Cursor(1,2);
   350   000C78  0E02               	movlw	2
   351   000C7A  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   352   000C7C  0E01               	movlw	1
   353   000C7E  ECCC  F006         	call	_Lcd_Set_Cursor
   354   000C82                     
   355                           ;Keypad4X4_Password.c: 46:         Lcd_Write_String("INGRESAR CLAVE");
   356   000C82  0E10               	movlw	low STR_1
   357   000C84  6E05               	movwf	Lcd_Write_String@a^0,c
   358   000C86  ECD8  F007         	call	_Lcd_Write_String	;wreg free
   359                           
   360                           ;Keypad4X4_Password.c: 48:         while(i < 4)
   361   000C8A  EF63  F006         	goto	l1259
   362   000C8E                     l1247:
   363                           
   364                           ;Keypad4X4_Password.c: 49:         {;Keypad4X4_Password.c: 50:             tecla = Keypa
      +                          d_Get_Char();
   365   000C8E  EC1C  F004         	call	_Keypad_Get_Char	;wreg free
   366   000C92  6E0D               	movwf	_tecla^0,c
   367   000C94                     
   368                           ;Keypad4X4_Password.c: 51:             if(tecla != 0)
   369   000C94  500D               	movf	_tecla^0,w,c
   370   000C96  B4D8               	btfsc	status,2,c
   371   000C98  EF50  F006         	goto	u541
   372   000C9C  EF52  F006         	goto	u540
   373   000CA0                     u541:
   374   000CA0  EF63  F006         	goto	l1259
   375   000CA4                     u540:
   376   000CA4                     
   377                           ;Keypad4X4_Password.c: 52:             {;Keypad4X4_Password.c: 53:                 clave
      +                          [i] = tecla;
   378   000CA4  500B               	movf	main@i^0,w,c
   379   000CA6  0F0E               	addlw	low _clave
   380   000CA8  6ED9               	movwf	fsr2l,c
   381   000CAA  6ADA               	clrf	fsr2h,c
   382   000CAC  C00D  FFDF         	movff	_tecla,indf2
   383   000CB0                     
   384                           ;Keypad4X4_Password.c: 54:                 Lcd_Set_Cursor(2,2+i);
   385   000CB0  500B               	movf	main@i^0,w,c
   386   000CB2  0F02               	addlw	2
   387   000CB4  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   388   000CB6  0E02               	movlw	2
   389   000CB8  ECCC  F006         	call	_Lcd_Set_Cursor
   390   000CBC                     
   391                           ;Keypad4X4_Password.c: 55:                 Lcd_Write_Char('*');
   392   000CBC  0E2A               	movlw	42
   393   000CBE  EC16  F008         	call	_Lcd_Write_Char
   394   000CC2                     
   395                           ;Keypad4X4_Password.c: 56:                 i++;
   396   000CC2  4A0B               	infsnz	main@i^0,f,c
   397   000CC4  2A0C               	incf	(main@i+1)^0,f,c
   398   000CC6                     l1259:
   399                           
   400                           ;Keypad4X4_Password.c: 48:         while(i < 4)
   401   000CC6  BE0C               	btfsc	(main@i+1)^0,7,c
   402   000CC8  EF6F  F006         	goto	u551
   403   000CCC  500C               	movf	(main@i+1)^0,w,c
   404   000CCE  E109               	bnz	u550
   405   000CD0  0E04               	movlw	4
   406   000CD2  5C0B               	subwf	main@i^0,w,c
   407   000CD4  A0D8               	btfss	status,0,c
   408   000CD6  EF6F  F006         	goto	u551
   409   000CDA  EF71  F006         	goto	u550
   410   000CDE                     u551:
   411   000CDE  EF47  F006         	goto	l1247
   412   000CE2                     u550:
   413   000CE2                     
   414                           ;Keypad4X4_Password.c: 59:         _delay((unsigned long)((200)*(48000000/4000.0)));
   415   000CE2  0E0D               	movlw	13
   416   000CE4  6E0A               	movwf	(??_main+1)^0,c
   417   000CE6  0E2D               	movlw	45
   418   000CE8  6E09               	movwf	??_main^0,c
   419   000CEA  0ED8               	movlw	216
   420   000CEC                     u577:
   421   000CEC  2EE8               	decfsz	wreg,f,c
   422   000CEE  D7FE               	bra	u577
   423   000CF0  2E09               	decfsz	??_main^0,f,c
   424   000CF2  D7FC               	bra	u577
   425   000CF4  2E0A               	decfsz	(??_main+1)^0,f,c
   426   000CF6  D7FA               	bra	u577
   427   000CF8                     
   428                           ;Keypad4X4_Password.c: 60:         Lcd_Clear();
   429   000CF8  EC49  F008         	call	_Lcd_Clear	;wreg free
   430   000CFC                     
   431                           ;Keypad4X4_Password.c: 62:         if(!strcmp(clave, clave_enter))
   432   000CFC  0E0E               	movlw	low _clave
   433   000CFE  6E01               	movwf	strcmp@l^0,c
   434   000D00  0E13               	movlw	low _clave_enter
   435   000D02  6E02               	movwf	strcmp@r^0,c
   436   000D04  EC7B  F007         	call	_strcmp	;wreg free
   437   000D08  5001               	movf	?_strcmp^0,w,c
   438   000D0A  1002               	iorwf	(?_strcmp+1)^0,w,c
   439   000D0C  A4D8               	btfss	status,2,c
   440   000D0E  EF8B  F006         	goto	u561
   441   000D12  EF8D  F006         	goto	u560
   442   000D16                     u561:
   443   000D16  EFAE  F006         	goto	l40
   444   000D1A                     u560:
   445   000D1A                     
   446                           ;Keypad4X4_Password.c: 63:         {;Keypad4X4_Password.c: 64:             LATBbits.LB0 
      +                          = 1;
   447   000D1A  808A               	bsf	138,0,c	;volatile
   448                           
   449                           ;Keypad4X4_Password.c: 65:             LATBbits.LB1 = 0;
   450   000D1C  928A               	bcf	138,1,c	;volatile
   451   000D1E                     
   452                           ;Keypad4X4_Password.c: 66:             Lcd_Set_Cursor(1,2);
   453   000D1E  0E02               	movlw	2
   454   000D20  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   455   000D22  0E01               	movlw	1
   456   000D24  ECCC  F006         	call	_Lcd_Set_Cursor
   457   000D28                     
   458                           ;Keypad4X4_Password.c: 67:             Lcd_Write_String("CLAVE CORRECTA");
   459   000D28  0E01               	movlw	low STR_2
   460   000D2A  6E05               	movwf	Lcd_Write_String@a^0,c
   461   000D2C  ECD8  F007         	call	_Lcd_Write_String	;wreg free
   462   000D30                     
   463                           ;Keypad4X4_Password.c: 68:             Lcd_Set_Cursor(2,2);
   464   000D30  0E02               	movlw	2
   465   000D32  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   466   000D34  0E02               	movlw	2
   467   000D36  ECCC  F006         	call	_Lcd_Set_Cursor
   468                           
   469                           ;Keypad4X4_Password.c: 69:             Lcd_Write_String("BIENVENIDO!");
   470   000D3A  0E1F               	movlw	low STR_3
   471   000D3C  6E05               	movwf	Lcd_Write_String@a^0,c
   472   000D3E  ECD8  F007         	call	_Lcd_Write_String	;wreg free
   473   000D42                     l1275:
   474                           
   475                           ;Keypad4X4_Password.c: 70:             _delay((unsigned long)((2000)*(48000000/4000.0)))
      +                          ;
   476   000D42  0E7A               	movlw	122
   477   000D44  6E0A               	movwf	(??_main+1)^0,c
   478   000D46  0EC1               	movlw	193
   479   000D48  6E09               	movwf	??_main^0,c
   480   000D4A  0E82               	movlw	130
   481   000D4C                     u587:
   482   000D4C  2EE8               	decfsz	wreg,f,c
   483   000D4E  D7FE               	bra	u587
   484   000D50  2E09               	decfsz	??_main^0,f,c
   485   000D52  D7FC               	bra	u587
   486   000D54  2E0A               	decfsz	(??_main+1)^0,f,c
   487   000D56  D7FA               	bra	u587
   488                           
   489                           ;Keypad4X4_Password.c: 71:         }
   490   000D58  EFC4  F006         	goto	l1285
   491   000D5C                     l40:
   492                           
   493                           ;Keypad4X4_Password.c: 73:         {;Keypad4X4_Password.c: 74:             LATBbits.LB1 
      +                          = 1;
   494   000D5C  828A               	bsf	138,1,c	;volatile
   495                           
   496                           ;Keypad4X4_Password.c: 75:             LATBbits.LB0 = 0;
   497   000D5E  908A               	bcf	138,0,c	;volatile
   498   000D60                     
   499                           ;Keypad4X4_Password.c: 76:             Lcd_Set_Cursor(1,6);
   500   000D60  0E06               	movlw	6
   501   000D62  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   502   000D64  0E01               	movlw	1
   503   000D66  ECCC  F006         	call	_Lcd_Set_Cursor
   504   000D6A                     
   505                           ;Keypad4X4_Password.c: 77:             Lcd_Write_String("CLAVE");
   506   000D6A  0E19               	movlw	low (STR_1+9)
   507   000D6C  6E05               	movwf	Lcd_Write_String@a^0,c
   508   000D6E  ECD8  F007         	call	_Lcd_Write_String	;wreg free
   509   000D72                     
   510                           ;Keypad4X4_Password.c: 78:             Lcd_Set_Cursor(2,4);
   511   000D72  0E04               	movlw	4
   512   000D74  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   513   000D76  0E02               	movlw	2
   514   000D78  ECCC  F006         	call	_Lcd_Set_Cursor
   515                           
   516                           ;Keypad4X4_Password.c: 79:             Lcd_Write_String("INCORRECTA");
   517   000D7C  0E2B               	movlw	low STR_5
   518   000D7E  6E05               	movwf	Lcd_Write_String@a^0,c
   519   000D80  ECD8  F007         	call	_Lcd_Write_String	;wreg free
   520   000D84  EFA1  F006         	goto	l1275
   521   000D88                     l1285:
   522   000D88                     
   523                           ;Keypad4X4_Password.c: 83:         LATBbits.LB1 = 0;
   524   000D88  928A               	bcf	138,1,c	;volatile
   525   000D8A                     
   526                           ;Keypad4X4_Password.c: 84:         LATBbits.LB0 = 0;
   527   000D8A  908A               	bcf	138,0,c	;volatile
   528   000D8C                     
   529                           ;Keypad4X4_Password.c: 85:         Lcd_Clear();
   530   000D8C  EC49  F008         	call	_Lcd_Clear	;wreg free
   531   000D90  EF38  F006         	goto	l1241
   532   000D94  EF00  F000         	goto	start
   533   000D98                     __end_of_main:
   534                           	callstack 0
   535                           
   536 ;; *************** function _strcmp *****************
   537 ;; Defined at:
   538 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\strcmp.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;  l               1    0[COMRAM] PTR const unsigned char 
   541 ;;		 -> clave(5), 
   542 ;;  r               1    1[COMRAM] PTR const unsigned char 
   543 ;;		 -> clave_enter(5), 
   544 ;; Auto vars:     Size  Location     Type
   545 ;;		None
   546 ;; Return value:  Size  Location     Type
   547 ;;                  2    0[COMRAM] int 
   548 ;; Registers used:
   549 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   555 ;;      Params:         2       0       0       0       0       0       0       0       0
   556 ;;      Locals:         0       0       0       0       0       0       0       0       0
   557 ;;      Temps:          2       0       0       0       0       0       0       0       0
   558 ;;      Totals:         4       0       0       0       0       0       0       0       0
   559 ;;Total ram usage:        4 bytes
   560 ;; Hardware stack levels used: 1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_main
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text1
   569   000EF6                     __ptext1:
   570                           	callstack 0
   571   000EF6                     _strcmp:
   572                           	callstack 30
   573   000EF6  EF7F  F007         	goto	l1221
   574   000EFA                     l1219:
   575   000EFA  2A01               	incf	strcmp@l^0,f,c
   576   000EFC  2A02               	incf	strcmp@r^0,f,c
   577   000EFE                     l1221:
   578   000EFE  5002               	movf	strcmp@r^0,w,c
   579   000F00  6ED9               	movwf	fsr2l,c
   580   000F02  6ADA               	clrf	fsr2h,c
   581   000F04  5001               	movf	strcmp@l^0,w,c
   582   000F06  6EE1               	movwf	fsr1l,c
   583   000F08  6AE2               	clrf	fsr1h,c
   584   000F0A  50DE               	movf	postinc2,w,c
   585   000F0C  18E6               	xorwf	postinc1,w,c
   586   000F0E  A4D8               	btfss	status,2,c
   587   000F10  EF8C  F007         	goto	u521
   588   000F14  EF8E  F007         	goto	u520
   589   000F18                     u521:
   590   000F18  EF99  F007         	goto	l1225
   591   000F1C                     u520:
   592   000F1C  5001               	movf	strcmp@l^0,w,c
   593   000F1E  6ED9               	movwf	fsr2l,c
   594   000F20  6ADA               	clrf	fsr2h,c
   595   000F22  50DF               	movf	indf2,w,c
   596   000F24  A4D8               	btfss	status,2,c
   597   000F26  EF97  F007         	goto	u531
   598   000F2A  EF99  F007         	goto	u530
   599   000F2E                     u531:
   600   000F2E  EF7D  F007         	goto	l1219
   601   000F32                     u530:
   602   000F32                     l1225:
   603   000F32  5001               	movf	strcmp@l^0,w,c
   604   000F34  6ED9               	movwf	fsr2l,c
   605   000F36  6ADA               	clrf	fsr2h,c
   606   000F38  50DF               	movf	indf2,w,c
   607   000F3A  6E03               	movwf	??_strcmp^0,c
   608   000F3C  5002               	movf	strcmp@r^0,w,c
   609   000F3E  6ED9               	movwf	fsr2l,c
   610   000F40  6ADA               	clrf	fsr2h,c
   611   000F42  50DF               	movf	indf2,w,c
   612   000F44  6E04               	movwf	(??_strcmp+1)^0,c
   613   000F46  5004               	movf	(??_strcmp+1)^0,w,c
   614   000F48  5C03               	subwf	??_strcmp^0,w,c
   615   000F4A  6E01               	movwf	?_strcmp^0,c
   616   000F4C  6A02               	clrf	(?_strcmp+1)^0,c
   617   000F4E  A0D8               	btfss	status,0,c
   618   000F50  0602               	decf	(?_strcmp+1)^0,f,c
   619   000F52  0012               	return		;funcret
   620   000F54                     __end_of_strcmp:
   621                           	callstack 0
   622                           
   623 ;; *************** function _Lcd_Write_String *****************
   624 ;; Defined at:
   625 ;;		line 104 in file "lcd.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;  a               1    4[COMRAM] PTR const unsigned char 
   628 ;;		 -> STR_5(11), STR_4(6), STR_3(12), STR_2(15), 
   629 ;;		 -> STR_1(15), 
   630 ;; Auto vars:     Size  Location     Type
   631 ;;  i               2    6[COMRAM] int 
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   641 ;;      Params:         1       0       0       0       0       0       0       0       0
   642 ;;      Locals:         2       0       0       0       0       0       0       0       0
   643 ;;      Temps:          1       0       0       0       0       0       0       0       0
   644 ;;      Totals:         4       0       0       0       0       0       0       0       0
   645 ;;Total ram usage:        4 bytes
   646 ;; Hardware stack levels used: 1
   647 ;; Hardware stack levels required when called: 2
   648 ;; This function calls:
   649 ;;		_Lcd_Write_Char
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text2
   656   000FB0                     __ptext2:
   657                           	callstack 0
   658   000FB0                     _Lcd_Write_String:
   659                           	callstack 28
   660   000FB0                     
   661                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
   662   000FB0  0E00               	movlw	0
   663   000FB2  6E08               	movwf	(Lcd_Write_String@i+1)^0,c
   664   000FB4  0E00               	movlw	0
   665   000FB6  6E07               	movwf	Lcd_Write_String@i^0,c
   666   000FB8  EFE9  F007         	goto	l1215
   667   000FBC                     l1211:
   668                           
   669                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
   670   000FBC  5005               	movf	Lcd_Write_String@a^0,w,c
   671   000FBE  2407               	addwf	Lcd_Write_String@i^0,w,c
   672   000FC0  6E06               	movwf	??_Lcd_Write_String^0,c
   673   000FC2  C006  FFF6         	movff	??_Lcd_Write_String,tblptrl
   674   000FC6                     	if	0	;There is only one active tblptr byte
   675   000FC6                     	endif
   676   000FC6                     	if	0	;tblptru may be non-zero
   677   000FC6                     	endif
   678   000FC6                     	if	0	;tblptru may be non-zero
   679   000FC6                     	endif
   680   000FC6  0008               	tblrd		*
   681   000FC8  50F5               	movf	tablat,w,c
   682   000FCA  EC16  F008         	call	_Lcd_Write_Char
   683   000FCE  4A07               	infsnz	Lcd_Write_String@i^0,f,c
   684   000FD0  2A08               	incf	(Lcd_Write_String@i+1)^0,f,c
   685   000FD2                     l1215:
   686   000FD2  5005               	movf	Lcd_Write_String@a^0,w,c
   687   000FD4  2407               	addwf	Lcd_Write_String@i^0,w,c
   688   000FD6  6E06               	movwf	??_Lcd_Write_String^0,c
   689   000FD8  C006  FFF6         	movff	??_Lcd_Write_String,tblptrl
   690   000FDC                     	if	0	;There is only one active tblptr byte
   691   000FDC                     	endif
   692   000FDC                     	if	0	;tblptru may be non-zero
   693   000FDC                     	endif
   694   000FDC                     	if	0	;tblptru may be non-zero
   695   000FDC                     	endif
   696   000FDC  0008               	tblrd		*
   697   000FDE  50F5               	movf	tablat,w,c
   698   000FE0  0900               	iorlw	0
   699   000FE2  A4D8               	btfss	status,2,c
   700   000FE4  EFF6  F007         	goto	u511
   701   000FE8  EFF8  F007         	goto	u510
   702   000FEC                     u511:
   703   000FEC  EFDE  F007         	goto	l1211
   704   000FF0                     u510:
   705   000FF0  0012               	return		;funcret
   706   000FF2                     __end_of_Lcd_Write_String:
   707                           	callstack 0
   708                           
   709 ;; *************** function _Lcd_Write_Char *****************
   710 ;; Defined at:
   711 ;;		line 88 in file "lcd.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  a               1    wreg     unsigned char 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  a               1    3[COMRAM] unsigned char 
   716 ;;  y               1    2[COMRAM] unsigned char 
   717 ;;  temp            1    1[COMRAM] unsigned char 
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg, status,2, status,0, cstack
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   727 ;;      Params:         0       0       0       0       0       0       0       0       0
   728 ;;      Locals:         3       0       0       0       0       0       0       0       0
   729 ;;      Temps:          0       0       0       0       0       0       0       0       0
   730 ;;      Totals:         3       0       0       0       0       0       0       0       0
   731 ;;Total ram usage:        3 bytes
   732 ;; Hardware stack levels used: 1
   733 ;; Hardware stack levels required when called: 1
   734 ;; This function calls:
   735 ;;		_Lcd_Port
   736 ;; This function is called by:
   737 ;;		_main
   738 ;;		_Lcd_Write_String
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           	psect	text3
   743   00102C                     __ptext3:
   744                           	callstack 0
   745   00102C                     _Lcd_Write_Char:
   746                           	callstack 28
   747                           
   748                           ;incstack = 0
   749                           ;Lcd_Write_Char@a stored from wreg
   750   00102C  6E04               	movwf	Lcd_Write_Char@a^0,c
   751   00102E                     
   752                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
   753   00102E  5004               	movf	Lcd_Write_Char@a^0,w,c
   754   001030  0B0F               	andlw	15
   755   001032  6E02               	movwf	Lcd_Write_Char@temp^0,c
   756                           
   757                           ;lcd.c: 92:     y = a&0xF0;
   758   001034  5004               	movf	Lcd_Write_Char@a^0,w,c
   759   001036  0BF0               	andlw	240
   760   001038  6E03               	movwf	Lcd_Write_Char@y^0,c
   761   00103A                     
   762                           ;lcd.c: 93:     LATBbits.LB2 = 1;
   763   00103A  848A               	bsf	138,2,c	;volatile
   764   00103C                     
   765                           ;lcd.c: 94:     Lcd_Port(y>>4);
   766   00103C  3803               	swapf	Lcd_Write_Char@y^0,w,c
   767   00103E  0B0F               	andlw	15
   768   001040  ECAA  F007         	call	_Lcd_Port
   769   001044                     
   770                           ;lcd.c: 95:     LATBbits.LB3 = 1;
   771   001044  868A               	bsf	138,3,c	;volatile
   772   001046                     
   773                           ;lcd.c: 96:     _delay((unsigned long)((40)*(48000000/4000000.0)));
   774   001046  0EA0               	movlw	160
   775   001048                     u597:
   776   001048  2EE8               	decfsz	wreg,f,c
   777   00104A  D7FE               	bra	u597
   778   00104C                     
   779                           ;lcd.c: 97:     LATBbits.LB3 = 0;
   780   00104C  968A               	bcf	138,3,c	;volatile
   781   00104E                     
   782                           ;lcd.c: 98:     Lcd_Port(temp);
   783   00104E  5002               	movf	Lcd_Write_Char@temp^0,w,c
   784   001050  ECAA  F007         	call	_Lcd_Port
   785   001054                     
   786                           ;lcd.c: 99:     LATBbits.LB3 = 1;
   787   001054  868A               	bsf	138,3,c	;volatile
   788   001056                     
   789                           ;lcd.c: 100:     _delay((unsigned long)((40)*(48000000/4000000.0)));
   790   001056  0EA0               	movlw	160
   791   001058                     u607:
   792   001058  2EE8               	decfsz	wreg,f,c
   793   00105A  D7FE               	bra	u607
   794   00105C                     
   795                           ;lcd.c: 101:     LATBbits.LB3 = 0;
   796   00105C  968A               	bcf	138,3,c	;volatile
   797   00105E  0012               	return		;funcret
   798   001060                     __end_of_Lcd_Write_Char:
   799                           	callstack 0
   800                           
   801 ;; *************** function _Lcd_Set_Cursor *****************
   802 ;; Defined at:
   803 ;;		line 26 in file "lcd.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;  a               1    wreg     unsigned char 
   806 ;;  b               1    3[COMRAM] unsigned char 
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  a               1    4[COMRAM] unsigned char 
   809 ;;  temp            1    7[COMRAM] unsigned char 
   810 ;;  y               1    6[COMRAM] unsigned char 
   811 ;;  z               1    5[COMRAM] unsigned char 
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, status,2, status,0, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   821 ;;      Params:         1       0       0       0       0       0       0       0       0
   822 ;;      Locals:         4       0       0       0       0       0       0       0       0
   823 ;;      Temps:          0       0       0       0       0       0       0       0       0
   824 ;;      Totals:         5       0       0       0       0       0       0       0       0
   825 ;;Total ram usage:        5 bytes
   826 ;; Hardware stack levels used: 1
   827 ;; Hardware stack levels required when called: 2
   828 ;; This function calls:
   829 ;;		_Lcd_Cmd
   830 ;; This function is called by:
   831 ;;		_main
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           	psect	text4
   836   000D98                     __ptext4:
   837                           	callstack 0
   838   000D98                     _Lcd_Set_Cursor:
   839                           	callstack 28
   840                           
   841                           ;incstack = 0
   842                           ;Lcd_Set_Cursor@a stored from wreg
   843   000D98  6E05               	movwf	Lcd_Set_Cursor@a^0,c
   844   000D9A                     
   845                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
   846   000D9A  0405               	decf	Lcd_Set_Cursor@a^0,w,c
   847   000D9C  A4D8               	btfss	status,2,c
   848   000D9E  EFD3  F006         	goto	u471
   849   000DA2  EFD5  F006         	goto	u470
   850   000DA6                     u471:
   851   000DA6  EFE6  F006         	goto	l1185
   852   000DAA                     u470:
   853   000DAA                     
   854                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
   855   000DAA  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   856   000DAC  0F7F               	addlw	127
   857   000DAE  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   858                           
   859                           ;lcd.c: 32:         z = temp>>4;
   860   000DB0  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   861   000DB2  0B0F               	andlw	15
   862   000DB4  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   863                           
   864                           ;lcd.c: 33:         y = temp & 0x0F;
   865   000DB6  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   866   000DB8  0B0F               	andlw	15
   867   000DBA  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   868   000DBC                     
   869                           ;lcd.c: 34:         Lcd_Cmd(z);
   870   000DBC  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   871   000DBE  EC30  F008         	call	_Lcd_Cmd
   872   000DC2                     
   873                           ;lcd.c: 35:         Lcd_Cmd(y);
   874   000DC2  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   875   000DC4  EC30  F008         	call	_Lcd_Cmd
   876                           
   877                           ;lcd.c: 36:     }
   878   000DC8  EF34  F007         	goto	l161
   879   000DCC                     l1185:
   880   000DCC  0E02               	movlw	2
   881   000DCE  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   882   000DD0  A4D8               	btfss	status,2,c
   883   000DD2  EFED  F006         	goto	u481
   884   000DD6  EFEF  F006         	goto	u480
   885   000DDA                     u481:
   886   000DDA  EF00  F007         	goto	l1193
   887   000DDE                     u480:
   888   000DDE                     
   889                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
   890   000DDE  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   891   000DE0  0FBF               	addlw	191
   892   000DE2  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   893                           
   894                           ;lcd.c: 40:         z = temp>>4;
   895   000DE4  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   896   000DE6  0B0F               	andlw	15
   897   000DE8  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   898                           
   899                           ;lcd.c: 41:         y = temp & 0x0F;
   900   000DEA  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   901   000DEC  0B0F               	andlw	15
   902   000DEE  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   903   000DF0                     
   904                           ;lcd.c: 42:         Lcd_Cmd(z);
   905   000DF0  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   906   000DF2  EC30  F008         	call	_Lcd_Cmd
   907   000DF6                     
   908                           ;lcd.c: 43:         Lcd_Cmd(y);
   909   000DF6  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   910   000DF8  EC30  F008         	call	_Lcd_Cmd
   911                           
   912                           ;lcd.c: 44:     }
   913   000DFC  EF34  F007         	goto	l161
   914   000E00                     l1193:
   915   000E00  0E03               	movlw	3
   916   000E02  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   917   000E04  A4D8               	btfss	status,2,c
   918   000E06  EF07  F007         	goto	u491
   919   000E0A  EF09  F007         	goto	u490
   920   000E0E                     u491:
   921   000E0E  EF1A  F007         	goto	l1201
   922   000E12                     u490:
   923   000E12                     
   924                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
   925   000E12  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   926   000E14  0F93               	addlw	147
   927   000E16  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   928                           
   929                           ;lcd.c: 48:         z = temp>>4;
   930   000E18  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   931   000E1A  0B0F               	andlw	15
   932   000E1C  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   933                           
   934                           ;lcd.c: 49:         y = temp & 0x0F;
   935   000E1E  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   936   000E20  0B0F               	andlw	15
   937   000E22  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   938   000E24                     
   939                           ;lcd.c: 50:         Lcd_Cmd(z);
   940   000E24  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   941   000E26  EC30  F008         	call	_Lcd_Cmd
   942   000E2A                     
   943                           ;lcd.c: 51:         Lcd_Cmd(y);
   944   000E2A  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   945   000E2C  EC30  F008         	call	_Lcd_Cmd
   946                           
   947                           ;lcd.c: 52:     }
   948   000E30  EF34  F007         	goto	l161
   949   000E34                     l1201:
   950   000E34  0E04               	movlw	4
   951   000E36  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   952   000E38  A4D8               	btfss	status,2,c
   953   000E3A  EF21  F007         	goto	u501
   954   000E3E  EF23  F007         	goto	u500
   955   000E42                     u501:
   956   000E42  EF34  F007         	goto	l157
   957   000E46                     u500:
   958   000E46                     
   959                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
   960   000E46  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   961   000E48  0FD3               	addlw	211
   962   000E4A  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   963                           
   964                           ;lcd.c: 56:         z = temp>>4;
   965   000E4C  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   966   000E4E  0B0F               	andlw	15
   967   000E50  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   968                           
   969                           ;lcd.c: 57:         y = temp & 0x0F;
   970   000E52  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   971   000E54  0B0F               	andlw	15
   972   000E56  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   973   000E58                     
   974                           ;lcd.c: 58:         Lcd_Cmd(z);
   975   000E58  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   976   000E5A  EC30  F008         	call	_Lcd_Cmd
   977   000E5E                     
   978                           ;lcd.c: 59:         Lcd_Cmd(y);
   979   000E5E  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   980   000E60  EC30  F008         	call	_Lcd_Cmd
   981   000E64  EF34  F007         	goto	l161
   982   000E68                     l157:
   983   000E68                     l161:
   984   000E68  0012               	return		;funcret
   985   000E6A                     __end_of_Lcd_Set_Cursor:
   986                           	callstack 0
   987                           
   988 ;; *************** function _Lcd_Init *****************
   989 ;; Defined at:
   990 ;;		line 63 in file "lcd.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, status,2, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1004 ;;      Params:         0       0       0       0       0       0       0       0       0
  1005 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1006 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1007 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1008 ;;Total ram usage:        2 bytes
  1009 ;; Hardware stack levels used: 1
  1010 ;; Hardware stack levels required when called: 3
  1011 ;; This function calls:
  1012 ;;		_Lcd_Clear
  1013 ;;		_Lcd_Cmd
  1014 ;;		_Lcd_Port
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text5
  1021   000E6A                     __ptext5:
  1022                           	callstack 0
  1023   000E6A                     _Lcd_Init:
  1024                           	callstack 27
  1025   000E6A                     
  1026                           ;lcd.c: 65:  TRISBbits.TRISB2 = 0;
  1027   000E6A  9493               	bcf	147,2,c	;volatile
  1028                           
  1029                           ;lcd.c: 66:  TRISBbits.TRISB3 = 0;
  1030   000E6C  9693               	bcf	147,3,c	;volatile
  1031                           
  1032                           ;lcd.c: 67:  TRISBbits.TRISB4 = 0;
  1033   000E6E  9893               	bcf	147,4,c	;volatile
  1034                           
  1035                           ;lcd.c: 68:  TRISBbits.TRISB5 = 0;
  1036   000E70  9A93               	bcf	147,5,c	;volatile
  1037                           
  1038                           ;lcd.c: 69:  TRISBbits.TRISB6 = 0;
  1039   000E72  9C93               	bcf	147,6,c	;volatile
  1040                           
  1041                           ;lcd.c: 70:  TRISBbits.TRISB7 = 0;
  1042   000E74  9E93               	bcf	147,7,c	;volatile
  1043   000E76                     
  1044                           ;lcd.c: 71:     Lcd_Port(0x00);
  1045   000E76  0E00               	movlw	0
  1046   000E78  ECAA  F007         	call	_Lcd_Port
  1047   000E7C                     
  1048                           ;lcd.c: 72:     _delay((unsigned long)((20)*(48000000/4000.0)));
  1049   000E7C  0E02               	movlw	2
  1050   000E7E  6E05               	movwf	(??_Lcd_Init+1)^0,c
  1051   000E80  0E38               	movlw	56
  1052   000E82  6E04               	movwf	??_Lcd_Init^0,c
  1053   000E84  0EAD               	movlw	173
  1054   000E86                     u617:
  1055   000E86  2EE8               	decfsz	wreg,f,c
  1056   000E88  D7FE               	bra	u617
  1057   000E8A  2E04               	decfsz	??_Lcd_Init^0,f,c
  1058   000E8C  D7FC               	bra	u617
  1059   000E8E  2E05               	decfsz	(??_Lcd_Init+1)^0,f,c
  1060   000E90  D7FA               	bra	u617
  1061   000E92  0000               	nop	
  1062   000E94                     
  1063                           ;lcd.c: 73:     Lcd_Cmd(0x03);
  1064   000E94  0E03               	movlw	3
  1065   000E96  EC30  F008         	call	_Lcd_Cmd
  1066   000E9A                     
  1067                           ;lcd.c: 74:     _delay((unsigned long)((5)*(48000000/4000.0)));
  1068   000E9A  0E4E               	movlw	78
  1069   000E9C  6E04               	movwf	??_Lcd_Init^0,c
  1070   000E9E  0EEB               	movlw	235
  1071   000EA0                     u627:
  1072   000EA0  2EE8               	decfsz	wreg,f,c
  1073   000EA2  D7FE               	bra	u627
  1074   000EA4  2E04               	decfsz	??_Lcd_Init^0,f,c
  1075   000EA6  D7FC               	bra	u627
  1076   000EA8  0000               	nop	
  1077   000EAA                     
  1078                           ;lcd.c: 75:     Lcd_Cmd(0x03);
  1079   000EAA  0E03               	movlw	3
  1080   000EAC  EC30  F008         	call	_Lcd_Cmd
  1081   000EB0                     
  1082                           ;lcd.c: 76:     _delay((unsigned long)((11)*(48000000/4000.0)));
  1083   000EB0  0EAC               	movlw	172
  1084   000EB2  6E04               	movwf	??_Lcd_Init^0,c
  1085   000EB4  0E6C               	movlw	108
  1086   000EB6                     u637:
  1087   000EB6  2EE8               	decfsz	wreg,f,c
  1088   000EB8  D7FE               	bra	u637
  1089   000EBA  2E04               	decfsz	??_Lcd_Init^0,f,c
  1090   000EBC  D7FC               	bra	u637
  1091   000EBE  D000               	nop2	
  1092   000EC0                     
  1093                           ;lcd.c: 77:     Lcd_Cmd(0x03);
  1094   000EC0  0E03               	movlw	3
  1095   000EC2  EC30  F008         	call	_Lcd_Cmd
  1096   000EC6                     
  1097                           ;lcd.c: 78:     Lcd_Cmd(0x02);
  1098   000EC6  0E02               	movlw	2
  1099   000EC8  EC30  F008         	call	_Lcd_Cmd
  1100   000ECC                     
  1101                           ;lcd.c: 79:     Lcd_Cmd(0x02);
  1102   000ECC  0E02               	movlw	2
  1103   000ECE  EC30  F008         	call	_Lcd_Cmd
  1104   000ED2                     
  1105                           ;lcd.c: 80:     Lcd_Cmd(0x08);
  1106   000ED2  0E08               	movlw	8
  1107   000ED4  EC30  F008         	call	_Lcd_Cmd
  1108   000ED8                     
  1109                           ;lcd.c: 81:     Lcd_Cmd(0x00);
  1110   000ED8  0E00               	movlw	0
  1111   000EDA  EC30  F008         	call	_Lcd_Cmd
  1112   000EDE                     
  1113                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
  1114   000EDE  0E0C               	movlw	12
  1115   000EE0  EC30  F008         	call	_Lcd_Cmd
  1116   000EE4                     
  1117                           ;lcd.c: 83:     Lcd_Cmd(0x00);
  1118   000EE4  0E00               	movlw	0
  1119   000EE6  EC30  F008         	call	_Lcd_Cmd
  1120   000EEA                     
  1121                           ;lcd.c: 84:     Lcd_Cmd(0x06);
  1122   000EEA  0E06               	movlw	6
  1123   000EEC  EC30  F008         	call	_Lcd_Cmd
  1124   000EF0                     
  1125                           ;lcd.c: 85:     Lcd_Clear();
  1126   000EF0  EC49  F008         	call	_Lcd_Clear	;wreg free
  1127   000EF4  0012               	return		;funcret
  1128   000EF6                     __end_of_Lcd_Init:
  1129                           	callstack 0
  1130                           
  1131 ;; *************** function _Lcd_Clear *****************
  1132 ;; Defined at:
  1133 ;;		line 20 in file "lcd.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;		None
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;		None
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  1    wreg      void 
  1140 ;; Registers used:
  1141 ;;		wreg, status,2, cstack
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1147 ;;      Params:         0       0       0       0       0       0       0       0       0
  1148 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1150 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1151 ;;Total ram usage:        0 bytes
  1152 ;; Hardware stack levels used: 1
  1153 ;; Hardware stack levels required when called: 2
  1154 ;; This function calls:
  1155 ;;		_Lcd_Cmd
  1156 ;; This function is called by:
  1157 ;;		_main
  1158 ;;		_Lcd_Init
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           	psect	text6
  1163   001092                     __ptext6:
  1164                           	callstack 0
  1165   001092                     _Lcd_Clear:
  1166                           	callstack 27
  1167   001092                     
  1168                           ;lcd.c: 22:     Lcd_Cmd(0);
  1169   001092  0E00               	movlw	0
  1170   001094  EC30  F008         	call	_Lcd_Cmd
  1171                           
  1172                           ;lcd.c: 23:     Lcd_Cmd(1);
  1173   001098  0E01               	movlw	1
  1174   00109A  EC30  F008         	call	_Lcd_Cmd
  1175   00109E  0012               	return		;funcret
  1176   0010A0                     __end_of_Lcd_Clear:
  1177                           	callstack 0
  1178                           
  1179 ;; *************** function _Lcd_Cmd *****************
  1180 ;; Defined at:
  1181 ;;		line 11 in file "lcd.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;  a               1    wreg     unsigned char 
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;  a               1    2[COMRAM] unsigned char 
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  1    wreg      void 
  1188 ;; Registers used:
  1189 ;;		wreg, status,2, cstack
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1195 ;;      Params:         0       0       0       0       0       0       0       0       0
  1196 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1197 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1198 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1199 ;;Total ram usage:        2 bytes
  1200 ;; Hardware stack levels used: 1
  1201 ;; Hardware stack levels required when called: 1
  1202 ;; This function calls:
  1203 ;;		_Lcd_Port
  1204 ;; This function is called by:
  1205 ;;		_Lcd_Clear
  1206 ;;		_Lcd_Set_Cursor
  1207 ;;		_Lcd_Init
  1208 ;;		_Lcd_Shift_Right
  1209 ;;		_Lcd_Shift_Left
  1210 ;;		_Lcd_Blink
  1211 ;;		_Lcd_NoBlink
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text7
  1216   001060                     __ptext7:
  1217                           	callstack 0
  1218   001060                     _Lcd_Cmd:
  1219                           	callstack 28
  1220                           
  1221                           ;incstack = 0
  1222                           ;Lcd_Cmd@a stored from wreg
  1223   001060  6E03               	movwf	Lcd_Cmd@a^0,c
  1224   001062                     
  1225                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATBbits.LB2 = 0;
  1226   001062  948A               	bcf	138,2,c	;volatile
  1227   001064                     
  1228                           ;lcd.c: 14:     Lcd_Port(a);
  1229   001064  5003               	movf	Lcd_Cmd@a^0,w,c
  1230   001066  ECAA  F007         	call	_Lcd_Port
  1231   00106A                     
  1232                           ;lcd.c: 15:     LATBbits.LB3 = 1;
  1233   00106A  868A               	bsf	138,3,c	;volatile
  1234   00106C                     
  1235                           ;lcd.c: 16:     _delay((unsigned long)((4)*(48000000/4000.0)));
  1236   00106C  0E3F               	movlw	63
  1237   00106E  6E02               	movwf	??_Lcd_Cmd^0,c
  1238   001070  0E55               	movlw	85
  1239   001072                     u647:
  1240   001072  2EE8               	decfsz	wreg,f,c
  1241   001074  D7FE               	bra	u647
  1242   001076  2E02               	decfsz	??_Lcd_Cmd^0,f,c
  1243   001078  D7FC               	bra	u647
  1244   00107A  0000               	nop	
  1245   00107C                     
  1246                           ;lcd.c: 17:     LATBbits.LB3 = 0;
  1247   00107C  968A               	bcf	138,3,c	;volatile
  1248   00107E  0012               	return		;funcret
  1249   001080                     __end_of_Lcd_Cmd:
  1250                           	callstack 0
  1251                           
  1252 ;; *************** function _Lcd_Port *****************
  1253 ;; Defined at:
  1254 ;;		line 3 in file "lcd.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  a               1    wreg     unsigned char 
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  a               1    0[COMRAM] unsigned char 
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      void 
  1261 ;; Registers used:
  1262 ;;		wreg
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1268 ;;      Params:         0       0       0       0       0       0       0       0       0
  1269 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1271 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1272 ;;Total ram usage:        1 bytes
  1273 ;; Hardware stack levels used: 1
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_Lcd_Cmd
  1278 ;;		_Lcd_Init
  1279 ;;		_Lcd_Write_Char
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text8
  1284   000F54                     __ptext8:
  1285                           	callstack 0
  1286   000F54                     _Lcd_Port:
  1287                           	callstack 28
  1288                           
  1289                           ;incstack = 0
  1290                           ;Lcd_Port@a stored from wreg
  1291   000F54  6E01               	movwf	Lcd_Port@a^0,c
  1292   000F56                     
  1293                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATBbits.LB4 = 1) 
      +                          : (LATBbits.LB4 = 0);
  1294   000F56  A001               	btfss	Lcd_Port@a^0,0,c
  1295   000F58  EFB0  F007         	goto	u11
  1296   000F5C  EFB2  F007         	goto	u10
  1297   000F60                     u11:
  1298   000F60  EFB5  F007         	goto	l130
  1299   000F64                     u10:
  1300   000F64  888A               	bsf	138,4,c	;volatile
  1301   000F66  EFB6  F007         	goto	l873
  1302   000F6A                     l130:
  1303   000F6A  988A               	bcf	138,4,c	;volatile
  1304   000F6C                     l873:
  1305                           
  1306                           ;lcd.c: 6:     (a & 2) ? (LATBbits.LB5 = 1) : (LATBbits.LB5 = 0);
  1307   000F6C  A201               	btfss	Lcd_Port@a^0,1,c
  1308   000F6E  EFBB  F007         	goto	u21
  1309   000F72  EFBD  F007         	goto	u20
  1310   000F76                     u21:
  1311   000F76  EFC0  F007         	goto	l134
  1312   000F7A                     u20:
  1313   000F7A  8A8A               	bsf	138,5,c	;volatile
  1314   000F7C  EFC1  F007         	goto	l877
  1315   000F80                     l134:
  1316   000F80  9A8A               	bcf	138,5,c	;volatile
  1317   000F82                     l877:
  1318                           
  1319                           ;lcd.c: 7:     (a & 4) ? (LATBbits.LB6 = 1) : (LATBbits.LB6 = 0);
  1320   000F82  A401               	btfss	Lcd_Port@a^0,2,c
  1321   000F84  EFC6  F007         	goto	u31
  1322   000F88  EFC8  F007         	goto	u30
  1323   000F8C                     u31:
  1324   000F8C  EFCB  F007         	goto	l138
  1325   000F90                     u30:
  1326   000F90  8C8A               	bsf	138,6,c	;volatile
  1327   000F92  EFCC  F007         	goto	l881
  1328   000F96                     l138:
  1329   000F96  9C8A               	bcf	138,6,c	;volatile
  1330   000F98                     l881:
  1331                           
  1332                           ;lcd.c: 8:     (a & 8) ? (LATBbits.LB7 = 1) : (LATBbits.LB7 = 0);
  1333   000F98  A601               	btfss	Lcd_Port@a^0,3,c
  1334   000F9A  EFD1  F007         	goto	u41
  1335   000F9E  EFD3  F007         	goto	u40
  1336   000FA2                     u41:
  1337   000FA2  EFD6  F007         	goto	l142
  1338   000FA6                     u40:
  1339   000FA6  8E8A               	bsf	138,7,c	;volatile
  1340   000FA8  EFD7  F007         	goto	l145
  1341   000FAC                     l142:
  1342   000FAC  9E8A               	bcf	138,7,c	;volatile
  1343   000FAE                     l145:
  1344   000FAE  0012               	return		;funcret
  1345   000FB0                     __end_of_Lcd_Port:
  1346                           	callstack 0
  1347                           
  1348 ;; *************** function _Keypad_Init *****************
  1349 ;; Defined at:
  1350 ;;		line 11 in file "kbd4x4.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;		None
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		None
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1364 ;;      Params:         0       0       0       0       0       0       0       0       0
  1365 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1367 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1368 ;;Total ram usage:        0 bytes
  1369 ;; Hardware stack levels used: 1
  1370 ;; This function calls:
  1371 ;;		Nothing
  1372 ;; This function is called by:
  1373 ;;		_main
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text9
  1378   001080                     __ptext9:
  1379                           	callstack 0
  1380   001080                     _Keypad_Init:
  1381                           	callstack 30
  1382   001080                     
  1383                           ;kbd4x4.c: 13:     TRISDbits.TRISD7 = 0;
  1384   001080  9E95               	bcf	149,7,c	;volatile
  1385                           
  1386                           ;kbd4x4.c: 14:     TRISDbits.TRISD6 = 0;
  1387   001082  9C95               	bcf	149,6,c	;volatile
  1388                           
  1389                           ;kbd4x4.c: 15:     TRISDbits.TRISD5 = 0;
  1390   001084  9A95               	bcf	149,5,c	;volatile
  1391                           
  1392                           ;kbd4x4.c: 16:     TRISDbits.TRISD4 = 0;
  1393   001086  9895               	bcf	149,4,c	;volatile
  1394                           
  1395                           ;kbd4x4.c: 17:     TRISDbits.TRISD3 = 1;
  1396   001088  8695               	bsf	149,3,c	;volatile
  1397                           
  1398                           ;kbd4x4.c: 18:     TRISDbits.TRISD2 = 1;
  1399   00108A  8495               	bsf	149,2,c	;volatile
  1400                           
  1401                           ;kbd4x4.c: 19:     TRISDbits.TRISD1 = 1;
  1402   00108C  8295               	bsf	149,1,c	;volatile
  1403                           
  1404                           ;kbd4x4.c: 20:     TRISDbits.TRISD0 = 1;
  1405   00108E  8095               	bsf	149,0,c	;volatile
  1406   001090  0012               	return		;funcret
  1407   001092                     __end_of_Keypad_Init:
  1408                           	callstack 0
  1409                           
  1410 ;; *************** function _Keypad_Get_Char *****************
  1411 ;; Defined at:
  1412 ;;		line 23 in file "kbd4x4.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      unsigned char 
  1419 ;; Registers used:
  1420 ;;		wreg
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1426 ;;      Params:         0       0       0       0       0       0       0       0       0
  1427 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1428 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1429 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1430 ;;Total ram usage:        1 bytes
  1431 ;; Hardware stack levels used: 1
  1432 ;; This function calls:
  1433 ;;		Nothing
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text10
  1440   000838                     __ptext10:
  1441                           	callstack 0
  1442   000838                     _Keypad_Get_Char:
  1443                           	callstack 30
  1444   000838                     
  1445                           ;kbd4x4.c: 25:     PORTDbits.RD7 = 0;
  1446   000838  9E83               	bcf	131,7,c	;volatile
  1447                           
  1448                           ;kbd4x4.c: 26:     PORTDbits.RD6 = 1;
  1449   00083A  8C83               	bsf	131,6,c	;volatile
  1450                           
  1451                           ;kbd4x4.c: 27:     PORTDbits.RD5 = 1;
  1452   00083C  8A83               	bsf	131,5,c	;volatile
  1453                           
  1454                           ;kbd4x4.c: 28:     PORTDbits.RD4 = 1;
  1455   00083E  8883               	bsf	131,4,c	;volatile
  1456                           
  1457                           ;kbd4x4.c: 29:     if(PORTDbits.RD3 == 0){
  1458   000840  B683               	btfsc	131,3,c	;volatile
  1459   000842  EF25  F004         	goto	u101
  1460   000846  EF27  F004         	goto	u100
  1461   00084A                     u101:
  1462   00084A  EF40  F004         	goto	l56
  1463   00084E                     u100:
  1464   00084E                     
  1465                           ;kbd4x4.c: 30:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1466   00084E  0E20               	movlw	32
  1467   000850  6E01               	movwf	??_Keypad_Get_Char^0,c
  1468   000852  0E2A               	movlw	42
  1469   000854                     u657:
  1470   000854  2EE8               	decfsz	wreg,f,c
  1471   000856  D7FE               	bra	u657
  1472   000858  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1473   00085A  D7FC               	bra	u657
  1474   00085C                     l57:
  1475   00085C  A683               	btfss	131,3,c	;volatile
  1476   00085E  EF33  F004         	goto	u111
  1477   000862  EF35  F004         	goto	u110
  1478   000866                     u111:
  1479   000866  EF2E  F004         	goto	l57
  1480   00086A                     u110:
  1481   00086A                     
  1482                           ;kbd4x4.c: 32:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1483   00086A  0E4E               	movlw	78
  1484   00086C  6E01               	movwf	??_Keypad_Get_Char^0,c
  1485   00086E  0EEB               	movlw	235
  1486   000870                     u667:
  1487   000870  2EE8               	decfsz	wreg,f,c
  1488   000872  D7FE               	bra	u667
  1489   000874  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1490   000876  D7FC               	bra	u667
  1491   000878  0000               	nop	
  1492                           
  1493                           ;kbd4x4.c: 33:         return '1';
  1494   00087A  0E31               	movlw	49
  1495   00087C  EF2D  F006         	goto	l60
  1496   000880                     l56:
  1497                           
  1498                           ;kbd4x4.c: 35:     if(PORTDbits.RD2 == 0){
  1499   000880  B483               	btfsc	131,2,c	;volatile
  1500   000882  EF45  F004         	goto	u121
  1501   000886  EF47  F004         	goto	u120
  1502   00088A                     u121:
  1503   00088A  EF60  F004         	goto	l61
  1504   00088E                     u120:
  1505   00088E                     
  1506                           ;kbd4x4.c: 36:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1507   00088E  0E20               	movlw	32
  1508   000890  6E01               	movwf	??_Keypad_Get_Char^0,c
  1509   000892  0E2A               	movlw	42
  1510   000894                     u677:
  1511   000894  2EE8               	decfsz	wreg,f,c
  1512   000896  D7FE               	bra	u677
  1513   000898  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1514   00089A  D7FC               	bra	u677
  1515   00089C                     l62:
  1516   00089C  A483               	btfss	131,2,c	;volatile
  1517   00089E  EF53  F004         	goto	u131
  1518   0008A2  EF55  F004         	goto	u130
  1519   0008A6                     u131:
  1520   0008A6  EF4E  F004         	goto	l62
  1521   0008AA                     u130:
  1522   0008AA                     
  1523                           ;kbd4x4.c: 38:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1524   0008AA  0E4E               	movlw	78
  1525   0008AC  6E01               	movwf	??_Keypad_Get_Char^0,c
  1526   0008AE  0EEB               	movlw	235
  1527   0008B0                     u687:
  1528   0008B0  2EE8               	decfsz	wreg,f,c
  1529   0008B2  D7FE               	bra	u687
  1530   0008B4  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1531   0008B6  D7FC               	bra	u687
  1532   0008B8  0000               	nop	
  1533                           
  1534                           ;kbd4x4.c: 39:         return '2';
  1535   0008BA  0E32               	movlw	50
  1536   0008BC  EF2D  F006         	goto	l60
  1537   0008C0                     l61:
  1538                           
  1539                           ;kbd4x4.c: 41:     if(PORTDbits.RD1 == 0){
  1540   0008C0  B283               	btfsc	131,1,c	;volatile
  1541   0008C2  EF65  F004         	goto	u141
  1542   0008C6  EF67  F004         	goto	u140
  1543   0008CA                     u141:
  1544   0008CA  EF80  F004         	goto	l65
  1545   0008CE                     u140:
  1546   0008CE                     
  1547                           ;kbd4x4.c: 42:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1548   0008CE  0E20               	movlw	32
  1549   0008D0  6E01               	movwf	??_Keypad_Get_Char^0,c
  1550   0008D2  0E2A               	movlw	42
  1551   0008D4                     u697:
  1552   0008D4  2EE8               	decfsz	wreg,f,c
  1553   0008D6  D7FE               	bra	u697
  1554   0008D8  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1555   0008DA  D7FC               	bra	u697
  1556   0008DC                     l66:
  1557   0008DC  A283               	btfss	131,1,c	;volatile
  1558   0008DE  EF73  F004         	goto	u151
  1559   0008E2  EF75  F004         	goto	u150
  1560   0008E6                     u151:
  1561   0008E6  EF6E  F004         	goto	l66
  1562   0008EA                     u150:
  1563   0008EA                     
  1564                           ;kbd4x4.c: 44:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1565   0008EA  0E4E               	movlw	78
  1566   0008EC  6E01               	movwf	??_Keypad_Get_Char^0,c
  1567   0008EE  0EEB               	movlw	235
  1568   0008F0                     u707:
  1569   0008F0  2EE8               	decfsz	wreg,f,c
  1570   0008F2  D7FE               	bra	u707
  1571   0008F4  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1572   0008F6  D7FC               	bra	u707
  1573   0008F8  0000               	nop	
  1574                           
  1575                           ;kbd4x4.c: 45:         return '3';
  1576   0008FA  0E33               	movlw	51
  1577   0008FC  EF2D  F006         	goto	l60
  1578   000900                     l65:
  1579                           
  1580                           ;kbd4x4.c: 47:     if(PORTDbits.RD0 == 0){
  1581   000900  B083               	btfsc	131,0,c	;volatile
  1582   000902  EF85  F004         	goto	u161
  1583   000906  EF87  F004         	goto	u160
  1584   00090A                     u161:
  1585   00090A  EFA0  F004         	goto	l69
  1586   00090E                     u160:
  1587   00090E                     
  1588                           ;kbd4x4.c: 48:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1589   00090E  0E20               	movlw	32
  1590   000910  6E01               	movwf	??_Keypad_Get_Char^0,c
  1591   000912  0E2A               	movlw	42
  1592   000914                     u717:
  1593   000914  2EE8               	decfsz	wreg,f,c
  1594   000916  D7FE               	bra	u717
  1595   000918  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1596   00091A  D7FC               	bra	u717
  1597   00091C                     l70:
  1598   00091C  A083               	btfss	131,0,c	;volatile
  1599   00091E  EF93  F004         	goto	u171
  1600   000922  EF95  F004         	goto	u170
  1601   000926                     u171:
  1602   000926  EF8E  F004         	goto	l70
  1603   00092A                     u170:
  1604   00092A                     
  1605                           ;kbd4x4.c: 50:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1606   00092A  0E4E               	movlw	78
  1607   00092C  6E01               	movwf	??_Keypad_Get_Char^0,c
  1608   00092E  0EEB               	movlw	235
  1609   000930                     u727:
  1610   000930  2EE8               	decfsz	wreg,f,c
  1611   000932  D7FE               	bra	u727
  1612   000934  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1613   000936  D7FC               	bra	u727
  1614   000938  0000               	nop	
  1615                           
  1616                           ;kbd4x4.c: 51:         return 'A';
  1617   00093A  0E41               	movlw	65
  1618   00093C  EF2D  F006         	goto	l60
  1619   000940                     l69:
  1620                           
  1621                           ;kbd4x4.c: 54:     PORTDbits.RD7 = 1;
  1622   000940  8E83               	bsf	131,7,c	;volatile
  1623                           
  1624                           ;kbd4x4.c: 55:     PORTDbits.RD6 = 0;
  1625   000942  9C83               	bcf	131,6,c	;volatile
  1626                           
  1627                           ;kbd4x4.c: 56:     PORTDbits.RD5 = 1;
  1628   000944  8A83               	bsf	131,5,c	;volatile
  1629                           
  1630                           ;kbd4x4.c: 57:     PORTDbits.RD4 = 1;
  1631   000946  8883               	bsf	131,4,c	;volatile
  1632                           
  1633                           ;kbd4x4.c: 58:     if(PORTDbits.RD3 == 0){
  1634   000948  B683               	btfsc	131,3,c	;volatile
  1635   00094A  EFA9  F004         	goto	u181
  1636   00094E  EFAB  F004         	goto	u180
  1637   000952                     u181:
  1638   000952  EFC4  F004         	goto	l73
  1639   000956                     u180:
  1640   000956                     
  1641                           ;kbd4x4.c: 59:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1642   000956  0E20               	movlw	32
  1643   000958  6E01               	movwf	??_Keypad_Get_Char^0,c
  1644   00095A  0E2A               	movlw	42
  1645   00095C                     u737:
  1646   00095C  2EE8               	decfsz	wreg,f,c
  1647   00095E  D7FE               	bra	u737
  1648   000960  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1649   000962  D7FC               	bra	u737
  1650   000964                     l74:
  1651   000964  A683               	btfss	131,3,c	;volatile
  1652   000966  EFB7  F004         	goto	u191
  1653   00096A  EFB9  F004         	goto	u190
  1654   00096E                     u191:
  1655   00096E  EFB2  F004         	goto	l74
  1656   000972                     u190:
  1657   000972                     
  1658                           ;kbd4x4.c: 61:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1659   000972  0E4E               	movlw	78
  1660   000974  6E01               	movwf	??_Keypad_Get_Char^0,c
  1661   000976  0EEB               	movlw	235
  1662   000978                     u747:
  1663   000978  2EE8               	decfsz	wreg,f,c
  1664   00097A  D7FE               	bra	u747
  1665   00097C  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1666   00097E  D7FC               	bra	u747
  1667   000980  0000               	nop	
  1668                           
  1669                           ;kbd4x4.c: 62:         return '4';
  1670   000982  0E34               	movlw	52
  1671   000984  EF2D  F006         	goto	l60
  1672   000988                     l73:
  1673                           
  1674                           ;kbd4x4.c: 64:     if(PORTDbits.RD2 == 0){
  1675   000988  B483               	btfsc	131,2,c	;volatile
  1676   00098A  EFC9  F004         	goto	u201
  1677   00098E  EFCB  F004         	goto	u200
  1678   000992                     u201:
  1679   000992  EFE4  F004         	goto	l77
  1680   000996                     u200:
  1681   000996                     
  1682                           ;kbd4x4.c: 65:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1683   000996  0E20               	movlw	32
  1684   000998  6E01               	movwf	??_Keypad_Get_Char^0,c
  1685   00099A  0E2A               	movlw	42
  1686   00099C                     u757:
  1687   00099C  2EE8               	decfsz	wreg,f,c
  1688   00099E  D7FE               	bra	u757
  1689   0009A0  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1690   0009A2  D7FC               	bra	u757
  1691   0009A4                     l78:
  1692   0009A4  A483               	btfss	131,2,c	;volatile
  1693   0009A6  EFD7  F004         	goto	u211
  1694   0009AA  EFD9  F004         	goto	u210
  1695   0009AE                     u211:
  1696   0009AE  EFD2  F004         	goto	l78
  1697   0009B2                     u210:
  1698   0009B2                     
  1699                           ;kbd4x4.c: 67:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1700   0009B2  0E4E               	movlw	78
  1701   0009B4  6E01               	movwf	??_Keypad_Get_Char^0,c
  1702   0009B6  0EEB               	movlw	235
  1703   0009B8                     u767:
  1704   0009B8  2EE8               	decfsz	wreg,f,c
  1705   0009BA  D7FE               	bra	u767
  1706   0009BC  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1707   0009BE  D7FC               	bra	u767
  1708   0009C0  0000               	nop	
  1709                           
  1710                           ;kbd4x4.c: 68:         return '5';
  1711   0009C2  0E35               	movlw	53
  1712   0009C4  EF2D  F006         	goto	l60
  1713   0009C8                     l77:
  1714                           
  1715                           ;kbd4x4.c: 70:     if(PORTDbits.RD1 == 0){
  1716   0009C8  B283               	btfsc	131,1,c	;volatile
  1717   0009CA  EFE9  F004         	goto	u221
  1718   0009CE  EFEB  F004         	goto	u220
  1719   0009D2                     u221:
  1720   0009D2  EF04  F005         	goto	l81
  1721   0009D6                     u220:
  1722   0009D6                     
  1723                           ;kbd4x4.c: 71:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1724   0009D6  0E20               	movlw	32
  1725   0009D8  6E01               	movwf	??_Keypad_Get_Char^0,c
  1726   0009DA  0E2A               	movlw	42
  1727   0009DC                     u777:
  1728   0009DC  2EE8               	decfsz	wreg,f,c
  1729   0009DE  D7FE               	bra	u777
  1730   0009E0  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1731   0009E2  D7FC               	bra	u777
  1732   0009E4                     l82:
  1733   0009E4  A283               	btfss	131,1,c	;volatile
  1734   0009E6  EFF7  F004         	goto	u231
  1735   0009EA  EFF9  F004         	goto	u230
  1736   0009EE                     u231:
  1737   0009EE  EFF2  F004         	goto	l82
  1738   0009F2                     u230:
  1739   0009F2                     
  1740                           ;kbd4x4.c: 73:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1741   0009F2  0E4E               	movlw	78
  1742   0009F4  6E01               	movwf	??_Keypad_Get_Char^0,c
  1743   0009F6  0EEB               	movlw	235
  1744   0009F8                     u787:
  1745   0009F8  2EE8               	decfsz	wreg,f,c
  1746   0009FA  D7FE               	bra	u787
  1747   0009FC  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1748   0009FE  D7FC               	bra	u787
  1749   000A00  0000               	nop	
  1750                           
  1751                           ;kbd4x4.c: 74:         return '6';
  1752   000A02  0E36               	movlw	54
  1753   000A04  EF2D  F006         	goto	l60
  1754   000A08                     l81:
  1755                           
  1756                           ;kbd4x4.c: 76:     if(PORTDbits.RD0 == 0){
  1757   000A08  B083               	btfsc	131,0,c	;volatile
  1758   000A0A  EF09  F005         	goto	u241
  1759   000A0E  EF0B  F005         	goto	u240
  1760   000A12                     u241:
  1761   000A12  EF24  F005         	goto	l85
  1762   000A16                     u240:
  1763   000A16                     
  1764                           ;kbd4x4.c: 77:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1765   000A16  0E20               	movlw	32
  1766   000A18  6E01               	movwf	??_Keypad_Get_Char^0,c
  1767   000A1A  0E2A               	movlw	42
  1768   000A1C                     u797:
  1769   000A1C  2EE8               	decfsz	wreg,f,c
  1770   000A1E  D7FE               	bra	u797
  1771   000A20  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1772   000A22  D7FC               	bra	u797
  1773   000A24                     l86:
  1774   000A24  A083               	btfss	131,0,c	;volatile
  1775   000A26  EF17  F005         	goto	u251
  1776   000A2A  EF19  F005         	goto	u250
  1777   000A2E                     u251:
  1778   000A2E  EF12  F005         	goto	l86
  1779   000A32                     u250:
  1780   000A32                     
  1781                           ;kbd4x4.c: 79:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1782   000A32  0E4E               	movlw	78
  1783   000A34  6E01               	movwf	??_Keypad_Get_Char^0,c
  1784   000A36  0EEB               	movlw	235
  1785   000A38                     u807:
  1786   000A38  2EE8               	decfsz	wreg,f,c
  1787   000A3A  D7FE               	bra	u807
  1788   000A3C  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1789   000A3E  D7FC               	bra	u807
  1790   000A40  0000               	nop	
  1791                           
  1792                           ;kbd4x4.c: 80:         return 'B';
  1793   000A42  0E42               	movlw	66
  1794   000A44  EF2D  F006         	goto	l60
  1795   000A48                     l85:
  1796                           
  1797                           ;kbd4x4.c: 83:     PORTDbits.RD7 = 1;
  1798   000A48  8E83               	bsf	131,7,c	;volatile
  1799                           
  1800                           ;kbd4x4.c: 84:     PORTDbits.RD6 = 1;
  1801   000A4A  8C83               	bsf	131,6,c	;volatile
  1802                           
  1803                           ;kbd4x4.c: 85:     PORTDbits.RD5 = 0;
  1804   000A4C  9A83               	bcf	131,5,c	;volatile
  1805                           
  1806                           ;kbd4x4.c: 86:     PORTDbits.RD4 = 1;
  1807   000A4E  8883               	bsf	131,4,c	;volatile
  1808                           
  1809                           ;kbd4x4.c: 87:     if(PORTDbits.RD3 == 0){
  1810   000A50  B683               	btfsc	131,3,c	;volatile
  1811   000A52  EF2D  F005         	goto	u261
  1812   000A56  EF2F  F005         	goto	u260
  1813   000A5A                     u261:
  1814   000A5A  EF48  F005         	goto	l89
  1815   000A5E                     u260:
  1816   000A5E                     
  1817                           ;kbd4x4.c: 88:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1818   000A5E  0E20               	movlw	32
  1819   000A60  6E01               	movwf	??_Keypad_Get_Char^0,c
  1820   000A62  0E2A               	movlw	42
  1821   000A64                     u817:
  1822   000A64  2EE8               	decfsz	wreg,f,c
  1823   000A66  D7FE               	bra	u817
  1824   000A68  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1825   000A6A  D7FC               	bra	u817
  1826   000A6C                     l90:
  1827   000A6C  A683               	btfss	131,3,c	;volatile
  1828   000A6E  EF3B  F005         	goto	u271
  1829   000A72  EF3D  F005         	goto	u270
  1830   000A76                     u271:
  1831   000A76  EF36  F005         	goto	l90
  1832   000A7A                     u270:
  1833   000A7A                     
  1834                           ;kbd4x4.c: 90:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1835   000A7A  0E4E               	movlw	78
  1836   000A7C  6E01               	movwf	??_Keypad_Get_Char^0,c
  1837   000A7E  0EEB               	movlw	235
  1838   000A80                     u827:
  1839   000A80  2EE8               	decfsz	wreg,f,c
  1840   000A82  D7FE               	bra	u827
  1841   000A84  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1842   000A86  D7FC               	bra	u827
  1843   000A88  0000               	nop	
  1844                           
  1845                           ;kbd4x4.c: 91:         return '7';
  1846   000A8A  0E37               	movlw	55
  1847   000A8C  EF2D  F006         	goto	l60
  1848   000A90                     l89:
  1849                           
  1850                           ;kbd4x4.c: 93:     if(PORTDbits.RD2 == 0){
  1851   000A90  B483               	btfsc	131,2,c	;volatile
  1852   000A92  EF4D  F005         	goto	u281
  1853   000A96  EF4F  F005         	goto	u280
  1854   000A9A                     u281:
  1855   000A9A  EF68  F005         	goto	l93
  1856   000A9E                     u280:
  1857   000A9E                     
  1858                           ;kbd4x4.c: 94:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1859   000A9E  0E20               	movlw	32
  1860   000AA0  6E01               	movwf	??_Keypad_Get_Char^0,c
  1861   000AA2  0E2A               	movlw	42
  1862   000AA4                     u837:
  1863   000AA4  2EE8               	decfsz	wreg,f,c
  1864   000AA6  D7FE               	bra	u837
  1865   000AA8  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1866   000AAA  D7FC               	bra	u837
  1867   000AAC                     l94:
  1868   000AAC  A483               	btfss	131,2,c	;volatile
  1869   000AAE  EF5B  F005         	goto	u291
  1870   000AB2  EF5D  F005         	goto	u290
  1871   000AB6                     u291:
  1872   000AB6  EF56  F005         	goto	l94
  1873   000ABA                     u290:
  1874   000ABA                     
  1875                           ;kbd4x4.c: 96:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1876   000ABA  0E4E               	movlw	78
  1877   000ABC  6E01               	movwf	??_Keypad_Get_Char^0,c
  1878   000ABE  0EEB               	movlw	235
  1879   000AC0                     u847:
  1880   000AC0  2EE8               	decfsz	wreg,f,c
  1881   000AC2  D7FE               	bra	u847
  1882   000AC4  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1883   000AC6  D7FC               	bra	u847
  1884   000AC8  0000               	nop	
  1885                           
  1886                           ;kbd4x4.c: 97:         return '8';
  1887   000ACA  0E38               	movlw	56
  1888   000ACC  EF2D  F006         	goto	l60
  1889   000AD0                     l93:
  1890                           
  1891                           ;kbd4x4.c: 99:     if(PORTDbits.RD1 == 0){
  1892   000AD0  B283               	btfsc	131,1,c	;volatile
  1893   000AD2  EF6D  F005         	goto	u301
  1894   000AD6  EF6F  F005         	goto	u300
  1895   000ADA                     u301:
  1896   000ADA  EF88  F005         	goto	l97
  1897   000ADE                     u300:
  1898   000ADE                     
  1899                           ;kbd4x4.c: 100:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1900   000ADE  0E20               	movlw	32
  1901   000AE0  6E01               	movwf	??_Keypad_Get_Char^0,c
  1902   000AE2  0E2A               	movlw	42
  1903   000AE4                     u857:
  1904   000AE4  2EE8               	decfsz	wreg,f,c
  1905   000AE6  D7FE               	bra	u857
  1906   000AE8  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1907   000AEA  D7FC               	bra	u857
  1908   000AEC                     l98:
  1909   000AEC  A283               	btfss	131,1,c	;volatile
  1910   000AEE  EF7B  F005         	goto	u311
  1911   000AF2  EF7D  F005         	goto	u310
  1912   000AF6                     u311:
  1913   000AF6  EF76  F005         	goto	l98
  1914   000AFA                     u310:
  1915   000AFA                     
  1916                           ;kbd4x4.c: 102:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1917   000AFA  0E4E               	movlw	78
  1918   000AFC  6E01               	movwf	??_Keypad_Get_Char^0,c
  1919   000AFE  0EEB               	movlw	235
  1920   000B00                     u867:
  1921   000B00  2EE8               	decfsz	wreg,f,c
  1922   000B02  D7FE               	bra	u867
  1923   000B04  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1924   000B06  D7FC               	bra	u867
  1925   000B08  0000               	nop	
  1926                           
  1927                           ;kbd4x4.c: 103:         return '9';
  1928   000B0A  0E39               	movlw	57
  1929   000B0C  EF2D  F006         	goto	l60
  1930   000B10                     l97:
  1931                           
  1932                           ;kbd4x4.c: 105:     if(PORTDbits.RD0 == 0){
  1933   000B10  B083               	btfsc	131,0,c	;volatile
  1934   000B12  EF8D  F005         	goto	u321
  1935   000B16  EF8F  F005         	goto	u320
  1936   000B1A                     u321:
  1937   000B1A  EFA8  F005         	goto	l101
  1938   000B1E                     u320:
  1939   000B1E                     
  1940                           ;kbd4x4.c: 106:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1941   000B1E  0E20               	movlw	32
  1942   000B20  6E01               	movwf	??_Keypad_Get_Char^0,c
  1943   000B22  0E2A               	movlw	42
  1944   000B24                     u877:
  1945   000B24  2EE8               	decfsz	wreg,f,c
  1946   000B26  D7FE               	bra	u877
  1947   000B28  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1948   000B2A  D7FC               	bra	u877
  1949   000B2C                     l102:
  1950   000B2C  A083               	btfss	131,0,c	;volatile
  1951   000B2E  EF9B  F005         	goto	u331
  1952   000B32  EF9D  F005         	goto	u330
  1953   000B36                     u331:
  1954   000B36  EF96  F005         	goto	l102
  1955   000B3A                     u330:
  1956   000B3A                     
  1957                           ;kbd4x4.c: 108:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1958   000B3A  0E4E               	movlw	78
  1959   000B3C  6E01               	movwf	??_Keypad_Get_Char^0,c
  1960   000B3E  0EEB               	movlw	235
  1961   000B40                     u887:
  1962   000B40  2EE8               	decfsz	wreg,f,c
  1963   000B42  D7FE               	bra	u887
  1964   000B44  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1965   000B46  D7FC               	bra	u887
  1966   000B48  0000               	nop	
  1967                           
  1968                           ;kbd4x4.c: 109:         return 'C';
  1969   000B4A  0E43               	movlw	67
  1970   000B4C  EF2D  F006         	goto	l60
  1971   000B50                     l101:
  1972                           
  1973                           ;kbd4x4.c: 112:     PORTDbits.RD7 = 1;
  1974   000B50  8E83               	bsf	131,7,c	;volatile
  1975                           
  1976                           ;kbd4x4.c: 113:     PORTDbits.RD6 = 1;
  1977   000B52  8C83               	bsf	131,6,c	;volatile
  1978                           
  1979                           ;kbd4x4.c: 114:     PORTDbits.RD5 = 1;
  1980   000B54  8A83               	bsf	131,5,c	;volatile
  1981                           
  1982                           ;kbd4x4.c: 115:     PORTDbits.RD4 = 0;
  1983   000B56  9883               	bcf	131,4,c	;volatile
  1984                           
  1985                           ;kbd4x4.c: 116:     if(PORTDbits.RD3 == 0){
  1986   000B58  B683               	btfsc	131,3,c	;volatile
  1987   000B5A  EFB1  F005         	goto	u341
  1988   000B5E  EFB3  F005         	goto	u340
  1989   000B62                     u341:
  1990   000B62  EFCC  F005         	goto	l105
  1991   000B66                     u340:
  1992   000B66                     
  1993                           ;kbd4x4.c: 117:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1994   000B66  0E20               	movlw	32
  1995   000B68  6E01               	movwf	??_Keypad_Get_Char^0,c
  1996   000B6A  0E2A               	movlw	42
  1997   000B6C                     u897:
  1998   000B6C  2EE8               	decfsz	wreg,f,c
  1999   000B6E  D7FE               	bra	u897
  2000   000B70  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  2001   000B72  D7FC               	bra	u897
  2002   000B74                     l106:
  2003   000B74  A683               	btfss	131,3,c	;volatile
  2004   000B76  EFBF  F005         	goto	u351
  2005   000B7A  EFC1  F005         	goto	u350
  2006   000B7E                     u351:
  2007   000B7E  EFBA  F005         	goto	l106
  2008   000B82                     u350:
  2009   000B82                     
  2010                           ;kbd4x4.c: 119:         _delay((unsigned long)((5)*(48000000/4000.0)));
  2011   000B82  0E4E               	movlw	78
  2012   000B84  6E01               	movwf	??_Keypad_Get_Char^0,c
  2013   000B86  0EEB               	movlw	235
  2014   000B88                     u907:
  2015   000B88  2EE8               	decfsz	wreg,f,c
  2016   000B8A  D7FE               	bra	u907
  2017   000B8C  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  2018   000B8E  D7FC               	bra	u907
  2019   000B90  0000               	nop	
  2020                           
  2021                           ;kbd4x4.c: 120:         return '*';
  2022   000B92  0E2A               	movlw	42
  2023   000B94  EF2D  F006         	goto	l60
  2024   000B98                     l105:
  2025                           
  2026                           ;kbd4x4.c: 122:     if(PORTDbits.RD2 == 0){
  2027   000B98  B483               	btfsc	131,2,c	;volatile
  2028   000B9A  EFD1  F005         	goto	u361
  2029   000B9E  EFD3  F005         	goto	u360
  2030   000BA2                     u361:
  2031   000BA2  EFEC  F005         	goto	l109
  2032   000BA6                     u360:
  2033   000BA6                     
  2034                           ;kbd4x4.c: 123:         _delay((unsigned long)((2)*(48000000/4000.0)));
  2035   000BA6  0E20               	movlw	32
  2036   000BA8  6E01               	movwf	??_Keypad_Get_Char^0,c
  2037   000BAA  0E2A               	movlw	42
  2038   000BAC                     u917:
  2039   000BAC  2EE8               	decfsz	wreg,f,c
  2040   000BAE  D7FE               	bra	u917
  2041   000BB0  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  2042   000BB2  D7FC               	bra	u917
  2043   000BB4                     l110:
  2044   000BB4  A483               	btfss	131,2,c	;volatile
  2045   000BB6  EFDF  F005         	goto	u371
  2046   000BBA  EFE1  F005         	goto	u370
  2047   000BBE                     u371:
  2048   000BBE  EFDA  F005         	goto	l110
  2049   000BC2                     u370:
  2050   000BC2                     
  2051                           ;kbd4x4.c: 125:         _delay((unsigned long)((5)*(48000000/4000.0)));
  2052   000BC2  0E4E               	movlw	78
  2053   000BC4  6E01               	movwf	??_Keypad_Get_Char^0,c
  2054   000BC6  0EEB               	movlw	235
  2055   000BC8                     u927:
  2056   000BC8  2EE8               	decfsz	wreg,f,c
  2057   000BCA  D7FE               	bra	u927
  2058   000BCC  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  2059   000BCE  D7FC               	bra	u927
  2060   000BD0  0000               	nop	
  2061                           
  2062                           ;kbd4x4.c: 126:         return '0';
  2063   000BD2  0E30               	movlw	48
  2064   000BD4  EF2D  F006         	goto	l60
  2065   000BD8                     l109:
  2066                           
  2067                           ;kbd4x4.c: 128:     if(PORTDbits.RD1 == 0){
  2068   000BD8  B283               	btfsc	131,1,c	;volatile
  2069   000BDA  EFF1  F005         	goto	u381
  2070   000BDE  EFF3  F005         	goto	u380
  2071   000BE2                     u381:
  2072   000BE2  EF0C  F006         	goto	l113
  2073   000BE6                     u380:
  2074   000BE6                     
  2075                           ;kbd4x4.c: 129:         _delay((unsigned long)((2)*(48000000/4000.0)));
  2076   000BE6  0E20               	movlw	32
  2077   000BE8  6E01               	movwf	??_Keypad_Get_Char^0,c
  2078   000BEA  0E2A               	movlw	42
  2079   000BEC                     u937:
  2080   000BEC  2EE8               	decfsz	wreg,f,c
  2081   000BEE  D7FE               	bra	u937
  2082   000BF0  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  2083   000BF2  D7FC               	bra	u937
  2084   000BF4                     l114:
  2085   000BF4  A283               	btfss	131,1,c	;volatile
  2086   000BF6  EFFF  F005         	goto	u391
  2087   000BFA  EF01  F006         	goto	u390
  2088   000BFE                     u391:
  2089   000BFE  EFFA  F005         	goto	l114
  2090   000C02                     u390:
  2091   000C02                     
  2092                           ;kbd4x4.c: 131:         _delay((unsigned long)((5)*(48000000/4000.0)));
  2093   000C02  0E4E               	movlw	78
  2094   000C04  6E01               	movwf	??_Keypad_Get_Char^0,c
  2095   000C06  0EEB               	movlw	235
  2096   000C08                     u947:
  2097   000C08  2EE8               	decfsz	wreg,f,c
  2098   000C0A  D7FE               	bra	u947
  2099   000C0C  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  2100   000C0E  D7FC               	bra	u947
  2101   000C10  0000               	nop	
  2102                           
  2103                           ;kbd4x4.c: 132:         return '#';
  2104   000C12  0E23               	movlw	35
  2105   000C14  EF2D  F006         	goto	l60
  2106   000C18                     l113:
  2107                           
  2108                           ;kbd4x4.c: 134:     if(PORTDbits.RD0 == 0){
  2109   000C18  B083               	btfsc	131,0,c	;volatile
  2110   000C1A  EF11  F006         	goto	u401
  2111   000C1E  EF13  F006         	goto	u400
  2112   000C22                     u401:
  2113   000C22  EF2C  F006         	goto	l1089
  2114   000C26                     u400:
  2115   000C26                     
  2116                           ;kbd4x4.c: 135:         _delay((unsigned long)((2)*(48000000/4000.0)));
  2117   000C26  0E20               	movlw	32
  2118   000C28  6E01               	movwf	??_Keypad_Get_Char^0,c
  2119   000C2A  0E2A               	movlw	42
  2120   000C2C                     u957:
  2121   000C2C  2EE8               	decfsz	wreg,f,c
  2122   000C2E  D7FE               	bra	u957
  2123   000C30  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  2124   000C32  D7FC               	bra	u957
  2125   000C34                     l118:
  2126   000C34  A083               	btfss	131,0,c	;volatile
  2127   000C36  EF1F  F006         	goto	u411
  2128   000C3A  EF21  F006         	goto	u410
  2129   000C3E                     u411:
  2130   000C3E  EF1A  F006         	goto	l118
  2131   000C42                     u410:
  2132   000C42                     
  2133                           ;kbd4x4.c: 137:         _delay((unsigned long)((5)*(48000000/4000.0)));
  2134   000C42  0E4E               	movlw	78
  2135   000C44  6E01               	movwf	??_Keypad_Get_Char^0,c
  2136   000C46  0EEB               	movlw	235
  2137   000C48                     u967:
  2138   000C48  2EE8               	decfsz	wreg,f,c
  2139   000C4A  D7FE               	bra	u967
  2140   000C4C  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  2141   000C4E  D7FC               	bra	u967
  2142   000C50  0000               	nop	
  2143                           
  2144                           ;kbd4x4.c: 138:         return 'D';
  2145   000C52  0E44               	movlw	68
  2146   000C54  EF2D  F006         	goto	l60
  2147   000C58                     l1089:
  2148                           
  2149                           ;kbd4x4.c: 140:     return 0;
  2150   000C58  0E00               	movlw	0
  2151   000C5A                     l60:
  2152   000C5A  0012               	return		;funcret
  2153   000C5C                     __end_of_Keypad_Get_Char:
  2154                           	callstack 0
  2155                           
  2156                           	psect	rparam
  2157   000000                     
  2158                           	psect	idloc
  2159                           
  2160                           ;Config register IDLOC0 @ 0x200000
  2161                           ;	unspecified, using default values
  2162   200000                     	org	2097152
  2163   200000  FF                 	db	255
  2164                           
  2165                           ;Config register IDLOC1 @ 0x200001
  2166                           ;	unspecified, using default values
  2167   200001                     	org	2097153
  2168   200001  FF                 	db	255
  2169                           
  2170                           ;Config register IDLOC2 @ 0x200002
  2171                           ;	unspecified, using default values
  2172   200002                     	org	2097154
  2173   200002  FF                 	db	255
  2174                           
  2175                           ;Config register IDLOC3 @ 0x200003
  2176                           ;	unspecified, using default values
  2177   200003                     	org	2097155
  2178   200003  FF                 	db	255
  2179                           
  2180                           ;Config register IDLOC4 @ 0x200004
  2181                           ;	unspecified, using default values
  2182   200004                     	org	2097156
  2183   200004  FF                 	db	255
  2184                           
  2185                           ;Config register IDLOC5 @ 0x200005
  2186                           ;	unspecified, using default values
  2187   200005                     	org	2097157
  2188   200005  FF                 	db	255
  2189                           
  2190                           ;Config register IDLOC6 @ 0x200006
  2191                           ;	unspecified, using default values
  2192   200006                     	org	2097158
  2193   200006  FF                 	db	255
  2194                           
  2195                           ;Config register IDLOC7 @ 0x200007
  2196                           ;	unspecified, using default values
  2197   200007                     	org	2097159
  2198   200007  FF                 	db	255
  2199                           
  2200                           	psect	config
  2201                           
  2202                           ;Config register CONFIG1L @ 0x300000
  2203                           ;	PLL Prescaler Selection bits
  2204                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  2205                           ;	System Clock Postscaler Selection bits
  2206                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  2207                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  2208                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  2209   300000                     	org	3145728
  2210   300000  21                 	db	33
  2211                           
  2212                           ;Config register CONFIG1H @ 0x300001
  2213                           ;	Oscillator Selection bits
  2214                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  2215                           ;	Fail-Safe Clock Monitor Enable bit
  2216                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2217                           ;	Internal/External Oscillator Switchover bit
  2218                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2219   300001                     	org	3145729
  2220   300001  0E                 	db	14
  2221                           
  2222                           ;Config register CONFIG2L @ 0x300002
  2223                           ;	Power-up Timer Enable bit
  2224                           ;	PWRT = OFF, PWRT disabled
  2225                           ;	Brown-out Reset Enable bits
  2226                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  2227                           ;	Brown-out Reset Voltage bits
  2228                           ;	BORV = 3, Minimum setting 2.05V
  2229                           ;	USB Voltage Regulator Enable bit
  2230                           ;	VREGEN = OFF, USB voltage regulator disabled
  2231   300002                     	org	3145730
  2232   300002  19                 	db	25
  2233                           
  2234                           ;Config register CONFIG2H @ 0x300003
  2235                           ;	Watchdog Timer Enable bit
  2236                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2237                           ;	Watchdog Timer Postscale Select bits
  2238                           ;	WDTPS = 32768, 1:32768
  2239   300003                     	org	3145731
  2240   300003  1E                 	db	30
  2241                           
  2242                           ; Padding undefined space
  2243   300004                     	org	3145732
  2244   300004  FF                 	db	255
  2245                           
  2246                           ;Config register CONFIG3H @ 0x300005
  2247                           ;	CCP2 MUX bit
  2248                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  2249                           ;	PORTB A/D Enable bit
  2250                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2251                           ;	Low-Power Timer 1 Oscillator Enable bit
  2252                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2253                           ;	MCLR Pin Enable bit
  2254                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2255   300005                     	org	3145733
  2256   300005  81                 	db	129
  2257                           
  2258                           ;Config register CONFIG4L @ 0x300006
  2259                           ;	Stack Full/Underflow Reset Enable bit
  2260                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2261                           ;	Single-Supply ICSP Enable bit
  2262                           ;	LVP = OFF, Single-Supply ICSP disabled
  2263                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2264                           ;	ICPRT = OFF, ICPORT disabled
  2265                           ;	Extended Instruction Set Enable bit
  2266                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2267                           ;	Background Debugger Enable bit
  2268                           ;	DEBUG = 0x1, unprogrammed default
  2269   300006                     	org	3145734
  2270   300006  81                 	db	129
  2271                           
  2272                           ; Padding undefined space
  2273   300007                     	org	3145735
  2274   300007  FF                 	db	255
  2275                           
  2276                           ;Config register CONFIG5L @ 0x300008
  2277                           ;	Code Protection bit
  2278                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  2279                           ;	Code Protection bit
  2280                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  2281                           ;	Code Protection bit
  2282                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  2283                           ;	Code Protection bit
  2284                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  2285   300008                     	org	3145736
  2286   300008  0F                 	db	15
  2287                           
  2288                           ;Config register CONFIG5H @ 0x300009
  2289                           ;	Boot Block Code Protection bit
  2290                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  2291                           ;	Data EEPROM Code Protection bit
  2292                           ;	CPD = OFF, Data EEPROM is not code-protected
  2293   300009                     	org	3145737
  2294   300009  C0                 	db	192
  2295                           
  2296                           ;Config register CONFIG6L @ 0x30000A
  2297                           ;	Write Protection bit
  2298                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  2299                           ;	Write Protection bit
  2300                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  2301                           ;	Write Protection bit
  2302                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  2303                           ;	Write Protection bit
  2304                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  2305   30000A                     	org	3145738
  2306   30000A  0F                 	db	15
  2307                           
  2308                           ;Config register CONFIG6H @ 0x30000B
  2309                           ;	Configuration Register Write Protection bit
  2310                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2311                           ;	Boot Block Write Protection bit
  2312                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  2313                           ;	Data EEPROM Write Protection bit
  2314                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2315   30000B                     	org	3145739
  2316   30000B  E0                 	db	224
  2317                           
  2318                           ;Config register CONFIG7L @ 0x30000C
  2319                           ;	Table Read Protection bit
  2320                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2321                           ;	Table Read Protection bit
  2322                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2323                           ;	Table Read Protection bit
  2324                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2325                           ;	Table Read Protection bit
  2326                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  2327   30000C                     	org	3145740
  2328   30000C  0F                 	db	15
  2329                           
  2330                           ;Config register CONFIG7H @ 0x30000D
  2331                           ;	Boot Block Table Read Protection bit
  2332                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  2333   30000D                     	org	3145741
  2334   30000D  40                 	db	64
  2335                           tosu	equ	0xFFF
  2336                           tosh	equ	0xFFE
  2337                           tosl	equ	0xFFD
  2338                           stkptr	equ	0xFFC
  2339                           pclatu	equ	0xFFB
  2340                           pclath	equ	0xFFA
  2341                           pcl	equ	0xFF9
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           prodh	equ	0xFF4
  2347                           prodl	equ	0xFF3
  2348                           indf0	equ	0xFEF
  2349                           postinc0	equ	0xFEE
  2350                           postdec0	equ	0xFED
  2351                           preinc0	equ	0xFEC
  2352                           plusw0	equ	0xFEB
  2353                           fsr0h	equ	0xFEA
  2354                           fsr0l	equ	0xFE9
  2355                           wreg	equ	0xFE8
  2356                           indf1	equ	0xFE7
  2357                           postinc1	equ	0xFE6
  2358                           postdec1	equ	0xFE5
  2359                           preinc1	equ	0xFE4
  2360                           plusw1	equ	0xFE3
  2361                           fsr1h	equ	0xFE2
  2362                           fsr1l	equ	0xFE1
  2363                           bsr	equ	0xFE0
  2364                           indf2	equ	0xFDF
  2365                           postinc2	equ	0xFDE
  2366                           postdec2	equ	0xFDD
  2367                           preinc2	equ	0xFDC
  2368                           plusw2	equ	0xFDB
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8

Data Sizes:
    Strings     53
    Constant    0
    Data        5
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      23
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), STR_2(CODE[15]), STR_3(CODE[12]), STR_4(CODE[6]), 
		 -> STR_5(CODE[11]), 

    strcmp@l	PTR const unsigned char  size(1) Largest target is 5
		 -> clave(COMRAM[5]), 

    strcmp@r	PTR const unsigned char  size(1) Largest target is 5
		 -> clave_enter(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2399
                                              8 COMRAM     4     4      0
                    _Keypad_Get_Char
                        _Keypad_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               4     2      2     264
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     3      1     590
                                              4 COMRAM     4     3      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1    1071
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     210
                                              3 COMRAM     2     2      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Get_Char                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keypad_Get_Char
   _Keypad_Init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
   _strcmp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      17       1       24.2%
BITBIGSFRh          3E      0       0      21        0.0%
BITBIGSFRlhh        2B      0       0      22        0.0%
BITBIGSFRllll       23      0       0      26        0.0%
BITBIGSFRllh         8      0       0      24        0.0%
BITBIGSFRlllh        6      0       0      25        0.0%
BITBIGSFRlhl         1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      17       3        0.0%
DATA                 0      0      17       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Apr 13 11:15:04 2024

                      l40 0D5C                        l60 0C5A                        l61 08C0  
                      l53 1090                        l70 091C                        l62 089C  
                      l56 0880                        l81 0A08                        l73 0988  
                      l65 0900                        l57 085C                        l90 0A6C  
                      l82 09E4                        l74 0964                        l66 08DC  
                      l93 0AD0                        l85 0A48                        l77 09C8  
                      l69 0940                        l94 0AAC                        l86 0A24  
                      l78 09A4                        l97 0B10                        l89 0A90  
                      l98 0AEC                        u10 0F64                        u11 0F60  
                      u20 0F7A                        u21 0F76                        u30 0F90  
                      u31 0F8C                        u40 0FA6                        u41 0FA2  
                     l101 0B50                       l110 0BB4                       l102 0B2C  
                     l113 0C18                       l105 0B98                       l114 0BF4  
                     l106 0B74                       l130 0F6A                       l109 0BD8  
                     l118 0C34                       l142 0FAC                       l134 0F80  
                     l151 109E                       l145 0FAE                       l161 0E68  
                     l138 0F96                       l148 107E                       l164 0EF4  
                     l157 0E68                       l173 0FF0                       l167 105E  
                     l901 1044                       l911 1056                       l903 1046  
                     l921 0E76                       l913 105C                       l905 104C  
                     l915 1092                       l931 0EB0                       l923 0E7C  
                     l907 104E                       l917 1080                       l941 0ED8  
                     l933 0EC0                       l925 0E94                       l909 1054  
                     l871 0F64                       l943 0EDE                       l935 0EC6  
                     l927 0E9A                       l919 0E6A                       l881 0F98  
                     l873 0F6C                       l945 0EE4                       l937 0ECC  
                     l929 0EAA                       l883 0FA6                       l875 0F7A  
                     l891 106C                       l947 0EEA                       l939 0ED2  
                     l867 0F52                       l877 0F82                       l869 0F56  
                     l893 107C                       l885 1062                       l949 0EF0  
                     l991 0838                       l879 0F90                       l887 1064  
                     l895 102E                       l993 084E                       l889 106A  
                     l897 103A                       l995 086A                       l899 103C  
                     l999 088E                       u100 084E                       u101 084A  
                     u110 086A                       u111 0866                       u200 0996  
                     u120 088E                       u201 0992                       u121 088A  
                     u210 09B2                       u130 08AA                       u211 09AE  
                     u131 08A6                       u300 0ADE                       u220 09D6  
                     u140 08CE                       u301 0ADA                       u221 09D2  
                     u141 08CA                       u310 0AFA                       u230 09F2  
                     u150 08EA                       u311 0AF6                       u231 09EE  
                     u151 08E6                       u400 0C26                       u320 0B1E  
                     u240 0A16                       u160 090E                       u401 0C22  
                     u321 0B1A                       u241 0A12                       u161 090A  
                     u410 0C42                       u330 0B3A                       u250 0A32  
                     u170 092A                       u411 0C3E                       u331 0B36  
                     u251 0A2E                       u171 0926                       u340 0B66  
                     u260 0A5E                       u180 0956                       u500 0E46  
                     u341 0B62                       u261 0A5A                       u181 0952  
                     u501 0E42                       u350 0B82                       u270 0A7A  
                     u190 0972                       u510 0FF0                       u351 0B7E  
                     u271 0A76                       u191 096E                       u511 0FEC  
                     u360 0BA6                       u280 0A9E                       u520 0F1C  
                     u361 0BA2                       u281 0A9A                       u521 0F18  
                     u370 0BC2                       u290 0ABA                       u530 0F32  
                     u371 0BBE                       u291 0AB6                       u531 0F2E  
                     u380 0BE6                       u540 0CA4                       u381 0BE2  
                     u541 0CA0                       u390 0C02                       u470 0DAA  
                     u550 0CE2                       u391 0BFE                       u471 0DA6  
                     u607 1058                       u551 0CDE                       u480 0DDE  
                     u560 0D1A                       u617 0E86                       u481 0DDA  
                     u561 0D16                       u490 0E12                       u707 08F0  
                     u627 0EA0                       u491 0E0E                       u717 0914  
                     u637 0EB6                       u807 0A38                       u727 0930  
                     u647 1072                       u817 0A64                       u737 095C  
                     u657 0854                       u577 0CEC                       u907 0B88  
                     u827 0A80                       u747 0978                       u667 0870  
                     u587 0D4C                       u917 0BAC                       u837 0AA4  
                     u757 099C                       u677 0894                       u597 1048  
                     u927 0BC8                       u847 0AC0                       u767 09B8  
                     u687 08B0                       u937 0BEC                       u857 0AE4  
                     u777 09DC                       u697 08D4                       u947 0C08  
                     u867 0B00                       u787 09F8                       u957 0C2C  
                     u877 0B24                       u797 0A1C                       u967 0C48  
                     u887 0B40                       u897 0B6C                       wreg 0FE8  
                    l1001 08AA                      l1011 090E                      l1013 092A  
                    l1005 08CE                      l1031 09F2                      l1023 0996  
                    l1007 08EA                      l1041 0A5E                      l1025 09B2  
                    l1017 0956                      l1201 0E34                      l1043 0A7A  
                    l1035 0A16                      l1019 0972                      l1203 0E46  
                    l1211 0FBC                      l1061 0B3A                      l1053 0ADE  
                    l1037 0A32                      l1029 09D6                      l1205 0E58  
                    l1213 0FCE                      l1221 0EFE                      l1071 0BA6  
                    l1055 0AFA                      l1047 0A9E                      l1207 0E5E  
                    l1215 0FD2                      l1223 0F1C                      l1231 0C60  
                    l1073 0BC2                      l1065 0B66                      l1049 0ABA  
                    l1209 0FB0                      l1225 0F32                      l1217 0EF6  
                    l1241 0C70                      l1233 0C62                      l1083 0C26  
                    l1067 0B82                      l1059 0B1E                      l1219 0EFA  
                    l1251 0CA4                      l1243 0C78                      l1235 0C64  
                    l1085 0C42                      l1077 0BE6                      l1181 0DBC  
                    l1261 0CE2                      l1253 0CB0                      l1245 0C82  
                    l1237 0C66                      l1229 0C5C                      l1079 0C02  
                    l1191 0DF6                      l1183 0DC2                      l1271 0D28  
                    l1263 0CF8                      l1255 0CBC                      l1247 0C8E  
                    l1239 0C68                      l1089 0C58                      l1193 0E00  
                    l1185 0DCC                      l1177 0D9A                      l1281 0D72  
                    l1273 0D30                      l1265 0CFC                      l1257 0CC2  
                    l1249 0C94                      l1195 0E12                      l1187 0DDE  
                    l1179 0DAA                      l1291 0D8C                      l1275 0D42  
                    l1267 0D1A                      l1259 0CC6                      l1197 0E24  
                    l1189 0DF0                      l1277 0D60                      l1285 0D88  
                    l1269 0D1E                      l1199 0E2A                      l1287 0D88  
                    l1279 0D6A                      l1289 0D8A                      STR_1 0810  
                    STR_2 0801                      STR_3 081F                      STR_4 0819  
                    STR_5 082B         ?_Lcd_Write_String 0005                      _main 0C5C  
                    fsr1h 0FE2                      fsr2h 0FDA                      indf2 0FDF  
                    fsr1l 0FE1                      fsr2l 0FD9                      start 0000  
      ??_Lcd_Write_String 0006           __end_of_Lcd_Cmd 1080              ___param_bank 0000  
                   ?_main 0001             ??_Keypad_Init 0001                     _clave 000E  
                   _tecla 000D                     main@i 000B                     tablat 0FF5  
                   status 0FD8          __end_of_Lcd_Init 0EF6          __end_of_Lcd_Port 0FB0  
         __initialization 0FF2              __end_of_main 0D98                    ??_main 0009  
           __activetblptr 0001       __end_of_Keypad_Init 1092                 ??_Lcd_Cmd 0002  
                  isa$std 0001                    _strcmp 0EF6              __pdataCOMRAM 0013  
            __mediumconst 0000                    tblptrh 0FF7                    tblptrl 0FF6  
                  tblptru 0FF8           Lcd_Set_Cursor@a 0005           Lcd_Set_Cursor@b 0004  
         Lcd_Set_Cursor@y 0007           Lcd_Set_Cursor@z 0006                __accesstop 0060  
 __end_of__initialization 101E         __end_of_Lcd_Clear 10A0             ___rparam_used 0001  
          __pcstackCOMRAM 0001            _Lcd_Set_Cursor 0D98               _Keypad_Init 1080  
               ?_Lcd_Init 0001                 ?_Lcd_Port 0001    __end_of_Lcd_Set_Cursor 0E6A  
                 ?_strcmp 0001                ??_Lcd_Init 0004                ??_Lcd_Port 0001  
          _Lcd_Write_Char 102C                   _Lcd_Cmd 1060                   __Hparam 0000  
                 __Lparam 0000              __psmallconst 0800                   __pcinit 0FF2  
                 __ramtop 0800           ?_Lcd_Set_Cursor 0004                   __ptext0 0C5C  
                 __ptext1 0EF6                   __ptext2 0FB0                   __ptext3 102C  
                 __ptext4 0D98                   __ptext5 0E6A                   __ptext6 1092  
                 __ptext7 1060                   __ptext8 0F54                   __ptext9 1080  
  __end_of_Lcd_Write_Char 1060      end_of_initialization 101E         ??_Keypad_Get_Char 0001  
                 postdec1 0FE5                   postinc0 0FEE                   postinc1 0FE6  
                 postinc2 0FDE                 Lcd_Port@a 0001                   strcmp@l 0001  
                 strcmp@r 0002                 _PORTDbits 0F83                 _TRISBbits 0F93  
               _TRISDbits 0F95           ?_Lcd_Write_Char 0001         Lcd_Write_String@a 0005  
       Lcd_Write_String@i 0007                 _Lcd_Clear 1092          _Lcd_Write_String 0FB0  
           __pidataCOMRAM 10A0              ?_Keypad_Init 0001            __end_of_strcmp 0F54  
     start_initialization 0FF2                ?_Lcd_Clear 0001           Lcd_Write_Char@a 0004  
         Lcd_Write_Char@y 0003                  ??_strcmp 0003               __pbssCOMRAM 000D  
                ?_Lcd_Cmd 0001          ??_Lcd_Set_Cursor 0005               _clave_enter 0013  
             __smallconst 0800           _Keypad_Get_Char 0838                  _LATBbits 0F8A  
                Lcd_Cmd@a 0003               ??_Lcd_Clear 0004                _ADCON1bits 0FC1  
        ??_Lcd_Write_Char 0002                  _Lcd_Init 0E6A                  _Lcd_Port 0F54  
               copy_data0 1006  __end_of_Lcd_Write_String 0FF2                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800   __end_of_Keypad_Get_Char 0C5C  
                __ptext10 0838                  isa$xinst 0000        Lcd_Write_Char@temp 0002  
        ?_Keypad_Get_Char 0001        Lcd_Set_Cursor@temp 0008  
