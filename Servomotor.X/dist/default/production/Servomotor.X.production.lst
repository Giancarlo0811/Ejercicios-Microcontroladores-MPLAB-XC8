

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 30 09:59:04 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    13                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    14                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 23/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000000                     _T0CONbits	set	4053
    55   000000                     _LATDbits	set	3980
    56   000000                     _TRISDbits	set	3989
    57   000000                     _ADCON1bits	set	4033
    58   000000                     _T0CON	set	4053
    59   000000                     _INTCONbits	set	4082
    60   000000                     _TMR0	set	4054
    61                           
    62                           ; #config settings
    63                           
    64                           	psect	cinit
    65   0009CC                     __pcinit:
    66                           	callstack 0
    67   0009CC                     start_initialization:
    68                           	callstack 0
    69   0009CC                     __initialization:
    70                           	callstack 0
    71                           
    72                           ; Clear objects allocated to COMRAM (10 bytes)
    73   0009CC  EE00  F00C         	lfsr	0,__pbssCOMRAM
    74   0009D0  0E0A               	movlw	10
    75   0009D2                     clear_0:
    76   0009D2  6AEE               	clrf	postinc0,c
    77   0009D4  06E8               	decf	wreg,f,c
    78   0009D6  E1FD               	bnz	clear_0
    79   0009D8                     end_of_initialization:
    80                           	callstack 0
    81   0009D8                     __end_of__initialization:
    82                           	callstack 0
    83   0009D8  9016               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    84   0009DA  9216               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    85   0009DC  0100               	movlb	0
    86   0009DE  EF96  F004         	goto	_main	;jump to C main() function
    87                           
    88                           	psect	bssCOMRAM
    89   00000C                     __pbssCOMRAM:
    90                           	callstack 0
    91   00000C                     _data_s:
    92                           	callstack 0
    93   00000C                     	ds	8
    94   000014                     _cont_sr:
    95                           	callstack 0
    96   000014                     	ds	2
    97                           
    98                           	psect	cstackCOMRAM
    99   000001                     __pcstackCOMRAM:
   100                           	callstack 0
   101   000001                     ?___awdiv:
   102                           	callstack 0
   103   000001                     ___awdiv@dividend:
   104                           	callstack 0
   105                           
   106                           ; 2 bytes @ 0x0
   107   000001                     	ds	2
   108   000003                     ___awdiv@divisor:
   109                           	callstack 0
   110                           
   111                           ; 2 bytes @ 0x2
   112   000003                     	ds	2
   113   000005                     ___awdiv@counter:
   114                           	callstack 0
   115                           
   116                           ; 1 bytes @ 0x4
   117   000005                     	ds	1
   118   000006                     ___awdiv@sign:
   119                           	callstack 0
   120                           
   121                           ; 1 bytes @ 0x5
   122   000006                     	ds	1
   123   000007                     ___awdiv@quotient:
   124                           	callstack 0
   125                           
   126                           ; 2 bytes @ 0x6
   127   000007                     	ds	2
   128   000009                     Servo_1_Write@ang:
   129                           	callstack 0
   130                           
   131                           ; 1 bytes @ 0x8
   132   000009                     	ds	1
   133   00000A                     ??_main:
   134                           
   135                           ; 1 bytes @ 0x9
   136   00000A                     	ds	2
   137                           
   138 ;;
   139 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   140 ;;
   141 ;; *************** function _main *****************
   142 ;; Defined at:
   143 ;;		line 20 in file "servomotor.c"
   144 ;; Parameters:    Size  Location     Type
   145 ;;		None
   146 ;; Auto vars:     Size  Location     Type
   147 ;;		None
   148 ;; Return value:  Size  Location     Type
   149 ;;                  1    wreg      void 
   150 ;; Registers used:
   151 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   152 ;; Tracked objects:
   153 ;;		On entry : 0/0
   154 ;;		On exit  : 0/0
   155 ;;		Unchanged: 0/0
   156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   157 ;;      Params:         0       0       0       0       0       0       0       0       0
   158 ;;      Locals:         0       0       0       0       0       0       0       0       0
   159 ;;      Temps:          2       0       0       0       0       0       0       0       0
   160 ;;      Totals:         2       0       0       0       0       0       0       0       0
   161 ;;Total ram usage:        2 bytes
   162 ;; Hardware stack levels required when called: 3
   163 ;; This function calls:
   164 ;;		_Servo_1_Write
   165 ;;		_Servo_Init
   166 ;; This function is called by:
   167 ;;		Startup code after reset
   168 ;; This function uses a non-reentrant model
   169 ;;
   170                           
   171                           	psect	text0
   172   00092C                     __ptext0:
   173                           	callstack 0
   174   00092C                     _main:
   175                           	callstack 28
   176   00092C                     
   177                           ;servomotor.c: 21:     ADCON1bits.PCFG = 0x0F;
   178   00092C  0E0F               	movlw	15
   179   00092E  12C1               	iorwf	193,f,c	;volatile
   180   000930                     
   181                           ;servomotor.c: 22:     Servo_Init();
   182   000930  ECD9  F004         	call	_Servo_Init	;wreg free
   183   000934                     l855:
   184                           
   185                           ;servomotor.c: 25:         Servo_1_Write(0);
   186   000934  0E00               	movlw	0
   187   000936  ECC8  F004         	call	_Servo_1_Write
   188   00093A                     
   189                           ;servomotor.c: 26:         _delay((unsigned long)((1000)*(48000000/4000.0)));
   190   00093A  0E3D               	movlw	61
   191   00093C  6E0B               	movwf	(??_main+1)^0,c
   192   00093E  0EE1               	movlw	225
   193   000940  6E0A               	movwf	??_main^0,c
   194   000942  0E40               	movlw	64
   195   000944                     u167:
   196   000944  2EE8               	decfsz	wreg,f,c
   197   000946  D7FE               	bra	u167
   198   000948  2E0A               	decfsz	??_main^0,f,c
   199   00094A  D7FC               	bra	u167
   200   00094C  2E0B               	decfsz	(??_main+1)^0,f,c
   201   00094E  D7FA               	bra	u167
   202   000950                     
   203                           ;servomotor.c: 28:         Servo_1_Write(90);
   204   000950  0E5A               	movlw	90
   205   000952  ECC8  F004         	call	_Servo_1_Write
   206   000956                     
   207                           ;servomotor.c: 29:         _delay((unsigned long)((1000)*(48000000/4000.0)));
   208   000956  0E3D               	movlw	61
   209   000958  6E0B               	movwf	(??_main+1)^0,c
   210   00095A  0EE1               	movlw	225
   211   00095C  6E0A               	movwf	??_main^0,c
   212   00095E  0E40               	movlw	64
   213   000960                     u177:
   214   000960  2EE8               	decfsz	wreg,f,c
   215   000962  D7FE               	bra	u177
   216   000964  2E0A               	decfsz	??_main^0,f,c
   217   000966  D7FC               	bra	u177
   218   000968  2E0B               	decfsz	(??_main+1)^0,f,c
   219   00096A  D7FA               	bra	u177
   220   00096C                     
   221                           ;servomotor.c: 31:         Servo_1_Write(180);
   222   00096C  0EB4               	movlw	180
   223   00096E  ECC8  F004         	call	_Servo_1_Write
   224   000972                     
   225                           ;servomotor.c: 32:         _delay((unsigned long)((1000)*(48000000/4000.0)));
   226   000972  0E3D               	movlw	61
   227   000974  6E0B               	movwf	(??_main+1)^0,c
   228   000976  0EE1               	movlw	225
   229   000978  6E0A               	movwf	??_main^0,c
   230   00097A  0E40               	movlw	64
   231   00097C                     u187:
   232   00097C  2EE8               	decfsz	wreg,f,c
   233   00097E  D7FE               	bra	u187
   234   000980  2E0A               	decfsz	??_main^0,f,c
   235   000982  D7FC               	bra	u187
   236   000984  2E0B               	decfsz	(??_main+1)^0,f,c
   237   000986  D7FA               	bra	u187
   238   000988  EF9A  F004         	goto	l855
   239   00098C  EF07  F000         	goto	start
   240   000990                     __end_of_main:
   241                           	callstack 0
   242                           
   243 ;; *************** function _Servo_Init *****************
   244 ;; Defined at:
   245 ;;		line 14 in file "servo.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, status,2
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   259 ;;      Params:         0       0       0       0       0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0
   261 ;;      Temps:          0       0       0       0       0       0       0       0       0
   262 ;;      Totals:         0       0       0       0       0       0       0       0       0
   263 ;;Total ram usage:        0 bytes
   264 ;; Hardware stack levels used: 1
   265 ;; Hardware stack levels required when called: 1
   266 ;; This function calls:
   267 ;;		Nothing
   268 ;; This function is called by:
   269 ;;		_main
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           	psect	text1
   274   0009B2                     __ptext1:
   275                           	callstack 0
   276   0009B2                     _Servo_Init:
   277                           	callstack 29
   278   0009B2                     
   279                           ;servo.c: 17:     TRISDbits.RD0 = 0;
   280   0009B2  9095               	bcf	149,0,c	;volatile
   281                           
   282                           ;servo.c: 18:     LATDbits.LD0 = 0;
   283   0009B4  908C               	bcf	140,0,c	;volatile
   284                           
   285                           ;servo.c: 56:     INTCONbits.GIE = 1;
   286   0009B6  8EF2               	bsf	242,7,c	;volatile
   287                           
   288                           ;servo.c: 57:     INTCONbits.TMR0IE = 1;
   289   0009B8  8AF2               	bsf	242,5,c	;volatile
   290                           
   291                           ;servo.c: 58:     INTCONbits.TMR0IF = 0;
   292   0009BA  94F2               	bcf	242,2,c	;volatile
   293   0009BC                     
   294                           ;servo.c: 59:     T0CON = 0x50;
   295   0009BC  0E50               	movlw	80
   296   0009BE  6ED5               	movwf	213,c	;volatile
   297   0009C0                     
   298                           ;servo.c: 60:     T0CONbits.TMR0ON = 1;
   299   0009C0  8ED5               	bsf	213,7,c	;volatile
   300                           
   301                           ;servo.c: 61:     TMR0 = 50;
   302   0009C2  0E00               	movlw	0
   303   0009C4  6ED7               	movwf	215,c	;volatile
   304   0009C6  0E32               	movlw	50
   305   0009C8  6ED6               	movwf	214,c	;volatile
   306   0009CA  0012               	return		;funcret
   307   0009CC                     __end_of_Servo_Init:
   308                           	callstack 0
   309                           
   310 ;; *************** function _Servo_1_Write *****************
   311 ;; Defined at:
   312 ;;		line 65 in file "servo.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;  ang             1    wreg     unsigned char 
   315 ;; Auto vars:     Size  Location     Type
   316 ;;  ang             1    8[COMRAM] unsigned char 
   317 ;; Return value:  Size  Location     Type
   318 ;;                  1    wreg      void 
   319 ;; Registers used:
   320 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   321 ;; Tracked objects:
   322 ;;		On entry : 0/0
   323 ;;		On exit  : 0/0
   324 ;;		Unchanged: 0/0
   325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   326 ;;      Params:         0       0       0       0       0       0       0       0       0
   327 ;;      Locals:         1       0       0       0       0       0       0       0       0
   328 ;;      Temps:          0       0       0       0       0       0       0       0       0
   329 ;;      Totals:         1       0       0       0       0       0       0       0       0
   330 ;;Total ram usage:        1 bytes
   331 ;; Hardware stack levels used: 1
   332 ;; Hardware stack levels required when called: 2
   333 ;; This function calls:
   334 ;;		___awdiv
   335 ;; This function is called by:
   336 ;;		_main
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           	psect	text2
   341   000990                     __ptext2:
   342                           	callstack 0
   343   000990                     _Servo_1_Write:
   344                           	callstack 28
   345                           
   346                           ;incstack = 0
   347                           ;Servo_1_Write@ang stored from wreg
   348   000990  6E09               	movwf	Servo_1_Write@ang^0,c
   349   000992                     
   350                           ;servo.c: 65: void Servo_1_Write(unsigned char ang);servo.c: 66: {;servo.c: 67:     data
      +                          _s[0] = (ang-0)*(60 -14)/(180-0)+14;
   351   000992  5009               	movf	Servo_1_Write@ang^0,w,c
   352   000994  0D2E               	mullw	46
   353   000996  CFF3 F001          	movff	prodl,___awdiv@dividend
   354   00099A  CFF4 F002          	movff	prodh,___awdiv@dividend+1
   355   00099E  0E00               	movlw	0
   356   0009A0  6E04               	movwf	(___awdiv@divisor+1)^0,c
   357   0009A2  0EB4               	movlw	180
   358   0009A4  6E03               	movwf	___awdiv@divisor^0,c
   359   0009A6  EC01  F004         	call	___awdiv	;wreg free
   360   0009AA  5001               	movf	?___awdiv^0,w,c
   361   0009AC  0F0E               	addlw	14
   362   0009AE  6E0C               	movwf	_data_s^0,c
   363   0009B0  0012               	return		;funcret
   364   0009B2                     __end_of_Servo_1_Write:
   365                           	callstack 0
   366                           
   367 ;; *************** function ___awdiv *****************
   368 ;; Defined at:
   369 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
   370 ;; Parameters:    Size  Location     Type
   371 ;;  dividend        2    0[COMRAM] int 
   372 ;;  divisor         2    2[COMRAM] int 
   373 ;; Auto vars:     Size  Location     Type
   374 ;;  quotient        2    6[COMRAM] int 
   375 ;;  sign            1    5[COMRAM] unsigned char 
   376 ;;  counter         1    4[COMRAM] unsigned char 
   377 ;; Return value:  Size  Location     Type
   378 ;;                  2    0[COMRAM] int 
   379 ;; Registers used:
   380 ;;		wreg, status,2, status,0
   381 ;; Tracked objects:
   382 ;;		On entry : 0/0
   383 ;;		On exit  : 0/0
   384 ;;		Unchanged: 0/0
   385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   386 ;;      Params:         4       0       0       0       0       0       0       0       0
   387 ;;      Locals:         4       0       0       0       0       0       0       0       0
   388 ;;      Temps:          0       0       0       0       0       0       0       0       0
   389 ;;      Totals:         8       0       0       0       0       0       0       0       0
   390 ;;Total ram usage:        8 bytes
   391 ;; Hardware stack levels used: 1
   392 ;; Hardware stack levels required when called: 1
   393 ;; This function calls:
   394 ;;		Nothing
   395 ;; This function is called by:
   396 ;;		_Servo_1_Write
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           	psect	text3
   401   000802                     __ptext3:
   402                           	callstack 0
   403   000802                     ___awdiv:
   404                           	callstack 28
   405   000802  0E00               	movlw	0
   406   000804  6E06               	movwf	___awdiv@sign^0,c
   407   000806  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   408   000808  EF0A  F004         	goto	u100
   409   00080C  EF08  F004         	goto	u101
   410   000810                     u101:
   411   000810  EF10  F004         	goto	l813
   412   000814                     u100:
   413   000814  6C03               	negf	___awdiv@divisor^0,c
   414   000816  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   415   000818  B0D8               	btfsc	status,0,c
   416   00081A  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   417   00081C  0E01               	movlw	1
   418   00081E  6E06               	movwf	___awdiv@sign^0,c
   419   000820                     l813:
   420   000820  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   421   000822  EF17  F004         	goto	u110
   422   000826  EF15  F004         	goto	u111
   423   00082A                     u111:
   424   00082A  EF1D  F004         	goto	l819
   425   00082E                     u110:
   426   00082E  6C01               	negf	___awdiv@dividend^0,c
   427   000830  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   428   000832  B0D8               	btfsc	status,0,c
   429   000834  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   430   000836  0E01               	movlw	1
   431   000838  1A06               	xorwf	___awdiv@sign^0,f,c
   432   00083A                     l819:
   433   00083A  0E00               	movlw	0
   434   00083C  6E08               	movwf	(___awdiv@quotient+1)^0,c
   435   00083E  0E00               	movlw	0
   436   000840  6E07               	movwf	___awdiv@quotient^0,c
   437   000842  5003               	movf	___awdiv@divisor^0,w,c
   438   000844  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   439   000846  B4D8               	btfsc	status,2,c
   440   000848  EF28  F004         	goto	u121
   441   00084C  EF2A  F004         	goto	u120
   442   000850                     u121:
   443   000850  EF52  F004         	goto	l841
   444   000854                     u120:
   445   000854  0E01               	movlw	1
   446   000856  6E05               	movwf	___awdiv@counter^0,c
   447   000858  EF32  F004         	goto	l827
   448   00085C                     l825:
   449   00085C  90D8               	bcf	status,0,c
   450   00085E  3603               	rlcf	___awdiv@divisor^0,f,c
   451   000860  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   452   000862  2A05               	incf	___awdiv@counter^0,f,c
   453   000864                     l827:
   454   000864  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   455   000866  EF37  F004         	goto	u131
   456   00086A  EF39  F004         	goto	u130
   457   00086E                     u131:
   458   00086E  EF2E  F004         	goto	l825
   459   000872                     u130:
   460   000872                     l829:
   461   000872  90D8               	bcf	status,0,c
   462   000874  3607               	rlcf	___awdiv@quotient^0,f,c
   463   000876  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   464   000878  5003               	movf	___awdiv@divisor^0,w,c
   465   00087A  5C01               	subwf	___awdiv@dividend^0,w,c
   466   00087C  5004               	movf	(___awdiv@divisor+1)^0,w,c
   467   00087E  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   468   000880  A0D8               	btfss	status,0,c
   469   000882  EF45  F004         	goto	u141
   470   000886  EF47  F004         	goto	u140
   471   00088A                     u141:
   472   00088A  EF4C  F004         	goto	l837
   473   00088E                     u140:
   474   00088E  5003               	movf	___awdiv@divisor^0,w,c
   475   000890  5E01               	subwf	___awdiv@dividend^0,f,c
   476   000892  5004               	movf	(___awdiv@divisor+1)^0,w,c
   477   000894  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   478   000896  8007               	bsf	___awdiv@quotient^0,0,c
   479   000898                     l837:
   480   000898  90D8               	bcf	status,0,c
   481   00089A  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   482   00089C  3203               	rrcf	___awdiv@divisor^0,f,c
   483   00089E  2E05               	decfsz	___awdiv@counter^0,f,c
   484   0008A0  EF39  F004         	goto	l829
   485   0008A4                     l841:
   486   0008A4  5006               	movf	___awdiv@sign^0,w,c
   487   0008A6  B4D8               	btfsc	status,2,c
   488   0008A8  EF58  F004         	goto	u151
   489   0008AC  EF5A  F004         	goto	u150
   490   0008B0                     u151:
   491   0008B0  EF5E  F004         	goto	l845
   492   0008B4                     u150:
   493   0008B4  6C07               	negf	___awdiv@quotient^0,c
   494   0008B6  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   495   0008B8  B0D8               	btfsc	status,0,c
   496   0008BA  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   497   0008BC                     l845:
   498   0008BC  C007  F001         	movff	___awdiv@quotient,?___awdiv
   499   0008C0  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   500   0008C4  0012               	return		;funcret
   501   0008C6                     __end_of___awdiv:
   502                           	callstack 0
   503                           
   504 ;; *************** function _TMR0_ISR *****************
   505 ;; Defined at:
   506 ;;		line 121 in file "servo.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;		None
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   520 ;;      Params:         0       0       0       0       0       0       0       0       0
   521 ;;      Locals:         0       0       0       0       0       0       0       0       0
   522 ;;      Temps:          0       0       0       0       0       0       0       0       0
   523 ;;      Totals:         0       0       0       0       0       0       0       0       0
   524 ;;Total ram usage:        0 bytes
   525 ;; Hardware stack levels used: 1
   526 ;; This function calls:
   527 ;;		Nothing
   528 ;; This function is called by:
   529 ;;		Interrupt level 2
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	intcode
   534   000008                     __pintcode:
   535                           	callstack 0
   536   000008                     _TMR0_ISR:
   537                           	callstack 28
   538                           
   539                           ;incstack = 0
   540   000008  8216               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   541   00000A  ED63  F004         	call	int_func,f	;refresh shadow registers
   542                           
   543                           	psect	intcode_body
   544   0008C6                     __pintcode_body:
   545                           	callstack 28
   546   0008C6                     int_func:
   547                           	callstack 28
   548   0008C6  0006               	pop		; remove dummy address from shadow register refresh
   549   0008C8                     
   550                           ;servo.c: 123:     if(INTCONbits.TMR0IF == 1)
   551   0008C8  A4F2               	btfss	242,2,c	;volatile
   552   0008CA  EF69  F004         	goto	i2u7_41
   553   0008CE  EF6B  F004         	goto	i2u7_40
   554   0008D2                     i2u7_41:
   555   0008D2  EF94  F004         	goto	i2l47
   556   0008D6                     i2u7_40:
   557   0008D6                     
   558                           ;servo.c: 124:     {;servo.c: 125:         cont_sr = cont_sr + 1;
   559   0008D6  0E01               	movlw	1
   560   0008D8  2414               	addwf	_cont_sr^0,w,c
   561   0008DA  6E14               	movwf	_cont_sr^0,c
   562   0008DC  0E00               	movlw	0
   563   0008DE  2015               	addwfc	(_cont_sr+1)^0,w,c
   564   0008E0  6E15               	movwf	(_cont_sr+1)^0,c
   565                           
   566                           ;servo.c: 126:         if(cont_sr > 490){
   567   0008E2  0EEB               	movlw	235
   568   0008E4  5C14               	subwf	_cont_sr^0,w,c
   569   0008E6  0E01               	movlw	1
   570   0008E8  5815               	subwfb	(_cont_sr+1)^0,w,c
   571   0008EA  A0D8               	btfss	status,0,c
   572   0008EC  EF7A  F004         	goto	i2u8_41
   573   0008F0  EF7C  F004         	goto	i2u8_40
   574   0008F4                     i2u8_41:
   575   0008F4  EF80  F004         	goto	i2l797
   576   0008F8                     i2u8_40:
   577   0008F8                     
   578                           ;servo.c: 127:             cont_sr = 0;
   579   0008F8  0E00               	movlw	0
   580   0008FA  6E15               	movwf	(_cont_sr+1)^0,c
   581   0008FC  0E00               	movlw	0
   582   0008FE  6E14               	movwf	_cont_sr^0,c
   583   000900                     i2l797:
   584                           
   585                           ;servo.c: 130:         if(cont_sr < data_s[0]){LATDbits.LD0 = 1;} else{LATDbits.LD0 = 0;
      +                          }
   586   000900  500C               	movf	_data_s^0,w,c
   587   000902  5C14               	subwf	_cont_sr^0,w,c
   588   000904  0E00               	movlw	0
   589   000906  5815               	subwfb	(_cont_sr+1)^0,w,c
   590   000908  B0D8               	btfsc	status,0,c
   591   00090A  EF89  F004         	goto	i2u9_41
   592   00090E  EF8B  F004         	goto	i2u9_40
   593   000912                     i2u9_41:
   594   000912  EF8E  F004         	goto	i2l45
   595   000916                     i2u9_40:
   596   000916  808C               	bsf	140,0,c	;volatile
   597   000918  EF8F  F004         	goto	i2l801
   598   00091C                     i2l45:
   599   00091C  908C               	bcf	140,0,c	;volatile
   600   00091E                     i2l801:
   601                           
   602                           ;servo.c: 161:         TMR0 = 50;
   603   00091E  0E00               	movlw	0
   604   000920  6ED7               	movwf	215,c	;volatile
   605   000922  0E32               	movlw	50
   606   000924  6ED6               	movwf	214,c	;volatile
   607   000926                     
   608                           ;servo.c: 162:         INTCONbits.TMR0IF = 0;
   609   000926  94F2               	bcf	242,2,c	;volatile
   610   000928                     i2l47:
   611   000928  9216               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   612   00092A  0011               	retfie		f
   613   00092C                     __end_of_TMR0_ISR:
   614                           	callstack 0
   615                           
   616                           	psect	smallconst
   617   000800                     __psmallconst:
   618                           	callstack 0
   619   000800  00                 	db	0
   620   000801  00                 	db	0	; dummy byte at the end
   621   000000                     
   622                           	psect	rparam
   623   000000                     
   624                           	psect	temp
   625   000016                     btemp:
   626                           	callstack 0
   627   000016                     	ds	1
   628   000000                     int$flags	set	btemp
   629   000000                     wtemp8	set	btemp+1
   630   000000                     ttemp5	set	btemp+1
   631   000000                     ttemp6	set	btemp+4
   632   000000                     ttemp7	set	btemp+8
   633                           
   634                           	psect	config
   635                           
   636                           ;Config register CONFIG1L @ 0x300000
   637                           ;	PLL Prescaler Selection bits
   638                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   639                           ;	System Clock Postscaler Selection bits
   640                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   641                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   642                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   643   300000                     	org	3145728
   644   300000  21                 	db	33
   645                           
   646                           ;Config register CONFIG1H @ 0x300001
   647                           ;	Oscillator Selection bits
   648                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   649                           ;	Fail-Safe Clock Monitor Enable bit
   650                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   651                           ;	Internal/External Oscillator Switchover bit
   652                           ;	IESO = OFF, Oscillator Switchover mode disabled
   653   300001                     	org	3145729
   654   300001  0E                 	db	14
   655                           
   656                           ;Config register CONFIG2L @ 0x300002
   657                           ;	Power-up Timer Enable bit
   658                           ;	PWRT = OFF, PWRT disabled
   659                           ;	Brown-out Reset Enable bits
   660                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   661                           ;	Brown-out Reset Voltage bits
   662                           ;	BORV = 3, Minimum setting 2.05V
   663                           ;	USB Voltage Regulator Enable bit
   664                           ;	VREGEN = OFF, USB voltage regulator disabled
   665   300002                     	org	3145730
   666   300002  19                 	db	25
   667                           
   668                           ;Config register CONFIG2H @ 0x300003
   669                           ;	Watchdog Timer Enable bit
   670                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   671                           ;	Watchdog Timer Postscale Select bits
   672                           ;	WDTPS = 32768, 1:32768
   673   300003                     	org	3145731
   674   300003  1E                 	db	30
   675                           
   676                           ; Padding undefined space
   677   300004                     	org	3145732
   678   300004  FF                 	db	255
   679                           
   680                           ;Config register CONFIG3H @ 0x300005
   681                           ;	CCP2 MUX bit
   682                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   683                           ;	PORTB A/D Enable bit
   684                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   685                           ;	Low-Power Timer 1 Oscillator Enable bit
   686                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   687                           ;	MCLR Pin Enable bit
   688                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   689   300005                     	org	3145733
   690   300005  81                 	db	129
   691                           
   692                           ;Config register CONFIG4L @ 0x300006
   693                           ;	Stack Full/Underflow Reset Enable bit
   694                           ;	STVREN = ON, Stack full/underflow will cause Reset
   695                           ;	Single-Supply ICSP Enable bit
   696                           ;	LVP = OFF, Single-Supply ICSP disabled
   697                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   698                           ;	ICPRT = OFF, ICPORT disabled
   699                           ;	Extended Instruction Set Enable bit
   700                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   701                           ;	Background Debugger Enable bit
   702                           ;	DEBUG = 0x1, unprogrammed default
   703   300006                     	org	3145734
   704   300006  81                 	db	129
   705                           
   706                           ; Padding undefined space
   707   300007                     	org	3145735
   708   300007  FF                 	db	255
   709                           
   710                           ;Config register CONFIG5L @ 0x300008
   711                           ;	Code Protection bit
   712                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   713                           ;	Code Protection bit
   714                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   715                           ;	Code Protection bit
   716                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   717                           ;	Code Protection bit
   718                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   719   300008                     	org	3145736
   720   300008  0F                 	db	15
   721                           
   722                           ;Config register CONFIG5H @ 0x300009
   723                           ;	Boot Block Code Protection bit
   724                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   725                           ;	Data EEPROM Code Protection bit
   726                           ;	CPD = OFF, Data EEPROM is not code-protected
   727   300009                     	org	3145737
   728   300009  C0                 	db	192
   729                           
   730                           ;Config register CONFIG6L @ 0x30000A
   731                           ;	Write Protection bit
   732                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   733                           ;	Write Protection bit
   734                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   735                           ;	Write Protection bit
   736                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   737                           ;	Write Protection bit
   738                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   739   30000A                     	org	3145738
   740   30000A  0F                 	db	15
   741                           
   742                           ;Config register CONFIG6H @ 0x30000B
   743                           ;	Configuration Register Write Protection bit
   744                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   745                           ;	Boot Block Write Protection bit
   746                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   747                           ;	Data EEPROM Write Protection bit
   748                           ;	WRTD = OFF, Data EEPROM is not write-protected
   749   30000B                     	org	3145739
   750   30000B  E0                 	db	224
   751                           
   752                           ;Config register CONFIG7L @ 0x30000C
   753                           ;	Table Read Protection bit
   754                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   755                           ;	Table Read Protection bit
   756                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   757                           ;	Table Read Protection bit
   758                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   759                           ;	Table Read Protection bit
   760                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   761   30000C                     	org	3145740
   762   30000C  0F                 	db	15
   763                           
   764                           ;Config register CONFIG7H @ 0x30000D
   765                           ;	Boot Block Table Read Protection bit
   766                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   767   30000D                     	org	3145741
   768   30000D  40                 	db	64
   769                           tosu	equ	0xFFF
   770                           tosh	equ	0xFFE
   771                           tosl	equ	0xFFD
   772                           stkptr	equ	0xFFC
   773                           pclatu	equ	0xFFB
   774                           pclath	equ	0xFFA
   775                           pcl	equ	0xFF9
   776                           tblptru	equ	0xFF8
   777                           tblptrh	equ	0xFF7
   778                           tblptrl	equ	0xFF6
   779                           tablat	equ	0xFF5
   780                           prodh	equ	0xFF4
   781                           prodl	equ	0xFF3
   782                           indf0	equ	0xFEF
   783                           postinc0	equ	0xFEE
   784                           postdec0	equ	0xFED
   785                           preinc0	equ	0xFEC
   786                           plusw0	equ	0xFEB
   787                           fsr0h	equ	0xFEA
   788                           fsr0l	equ	0xFE9
   789                           wreg	equ	0xFE8
   790                           indf1	equ	0xFE7
   791                           postinc1	equ	0xFE6
   792                           postdec1	equ	0xFE5
   793                           preinc1	equ	0xFE4
   794                           plusw1	equ	0xFE3
   795                           fsr1h	equ	0xFE2
   796                           fsr1l	equ	0xFE1
   797                           bsr	equ	0xFE0
   798                           indf2	equ	0xFDF
   799                           postinc2	equ	0xFDE
   800                           postdec2	equ	0xFDD
   801                           preinc2	equ	0xFDC
   802                           plusw2	equ	0xFDB
   803                           fsr2h	equ	0xFDA
   804                           fsr2l	equ	0xFD9
   805                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     11      21
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Servo_1_Write
    _Servo_1_Write->___awdiv

Critical Paths under _TMR0_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _TMR0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMR0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMR0_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMR0_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMR0_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     474
                                              9 COMRAM     2     2      0
                      _Servo_1_Write
                         _Servo_Init
 ---------------------------------------------------------------------------------
 (1) _Servo_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Servo_1_Write                                        1     1      0     474
                                              8 COMRAM     1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Servo_1_Write
     ___awdiv
   _Servo_Init

 _TMR0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      B      15       1       22.3%
BITBIGSFRlll        2C      0       0      26        0.0%
BITBIGSFRlh         2B      0       0      24        0.0%
BITBIGSFRhlh        1A      0       0      22        0.0%
BITBIGSFRhll        13      0       0      23        0.0%
BITBIGSFRhh          D      0       0      21        0.0%
BITBIGSFRllh         8      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      15       3        0.0%
DATA                 0      0      15       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 30 09:59:04 2024

                     l35 09CA                       l38 09B0             ___awdiv@sign 0006  
                    l281 08C4                      l811 081C                      l821 0842  
                    l813 0820                      l805 0802                      l831 0878  
                    l823 0854                      l815 082E                      l807 0806  
                    l833 088E                      l825 085C                      l841 08A4  
                    l817 0836                      l809 0814                      l843 08B4  
                    l835 0896                      l827 0864                      l819 083A  
                    l771 09C0                      l851 092C                      l845 08BC  
                    l837 0898                      l829 0872                      l861 0956  
                    l853 0930                      l839 089E                      l767 09B2  
                    l863 096C                      l855 0934                      l849 0992  
                    l769 09BC                      l865 0972                      l857 093A  
                    l859 0950                      u100 0814                      u101 0810  
                    u110 082E                      u111 082A                      u120 0854  
                    u121 0850                      u130 0872                      u131 086E  
                    u140 088E                      u141 088A                      u150 08B4  
                    u151 08B0                      u167 0944                      u177 0960  
                    u187 097C                      wreg 0FE8                     i2l45 091C  
                   i2l47 0928                     _TMR0 0FD6                     _main 092C  
                   btemp 0016                     prodh 0FF4                     prodl 0FF3  
                   start 000E             ___param_bank 0000                    ?_main 0001  
        __end_of___awdiv 08C6                    _T0CON 0FD5          ___awdiv@divisor 0003  
                  i2l801 091E                    i2l803 0926                    i2l791 08C8  
                  i2l793 08D6                    i2l795 08F8          ___awdiv@counter 0005  
                  i2l797 0900                    i2l799 0916         __end_of_TMR0_ISR 092C  
                  ttemp5 0017                    ttemp6 001A                    ttemp7 001E  
                  status 0FD8                    wtemp8 0017          __initialization 09CC  
           __end_of_main 0990                   ??_main 000A            __activetblptr 0000  
       ___awdiv@dividend 0001                   i2u7_40 08D6                   i2u7_41 08D2  
                 i2u8_40 08F8                   i2u8_41 08F4                   i2u9_40 0916  
                 i2u9_41 0912    __end_of_Servo_1_Write 09B2                ??___awdiv 0005  
                 _data_s 000C               _Servo_Init 09B2                   clear_0 09D2  
       ___awdiv@quotient 0007                   isa$std 0001             __mediumconst 0000  
             __accesstop 0060  __end_of__initialization 09D8            ___rparam_used 0001  
         __pcstackCOMRAM 0001                ?_TMR0_ISR 0001               ??_TMR0_ISR 0001  
            ?_Servo_Init 0001                  __Hparam 0000                  __Lparam 0000  
                ___awdiv 0802             __psmallconst 0800                  __pcinit 09CC  
                __ramtop 0800                  __ptext0 092C                  __ptext1 09B2  
                __ptext2 0990                  __ptext3 0802                _T0CONbits 0FD5  
                _cont_sr 0014           __pintcode_body 08C6     end_of_initialization 09D8  
                int_func 08C6                  postinc0 0FEE                _TRISDbits 0F95  
    start_initialization 09CC             ??_Servo_Init 0001              __pbssCOMRAM 000C  
     __end_of_Servo_Init 09CC            _Servo_1_Write 0990                __pintcode 0008  
               ?___awdiv 0001         Servo_1_Write@ang 0009              __smallconst 0800  
         ?_Servo_1_Write 0001                 _LATDbits 0F8C                 _TMR0_ISR 0008  
             _ADCON1bits 0FC1                 __Hrparam 0000                 __Lrparam 0000  
        ??_Servo_1_Write 0009                 isa$xinst 0000                 int$flags 0016  
             _INTCONbits 0FF2                 intlevel2 0000  
