

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Apr 13 10:11:18 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23   000000                     
    24                           ; Generated 18/08/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58   000000                     _PORTDbits	set	3971
    59   000000                     _TRISDbits	set	3989
    60   000000                     _ADCON1bits	set	4033
    61   000000                     _LATBbits	set	3978
    62   000000                     _TRISBbits	set	3987
    63                           
    64                           	psect	smallconst
    65   000800                     __psmallconst:
    66                           	callstack 0
    67   000800  00                 	db	0
    68   000801                     STR_1:
    69   000801  54                 	db	84	;'T'
    70   000802  65                 	db	101	;'e'
    71   000803  63                 	db	99	;'c'
    72   000804  6C                 	db	108	;'l'
    73   000805  61                 	db	97	;'a'
    74   000806  3A                 	db	58	;':'
    75   000807  20                 	db	32
    76   000808  00                 	db	0
    77   000809  00                 	db	0	; dummy byte at the end
    78   000000                     
    79                           ; #config settings
    80                           
    81                           	psect	cinit
    82   000EE4                     __pcinit:
    83                           	callstack 0
    84   000EE4                     start_initialization:
    85                           	callstack 0
    86   000EE4                     __initialization:
    87                           	callstack 0
    88                           
    89                           ; Clear objects allocated to COMRAM (1 bytes)
    90   000EE4  6A09               	clrf	__pbssCOMRAM& (0+255),c
    91   000EE6                     end_of_initialization:
    92                           	callstack 0
    93   000EE6                     __end_of__initialization:
    94                           	callstack 0
    95   000EE6  0E00               	movlw	low (__Lsmallconst shr (0+16))
    96   000EE8  6EF8               	movwf	tblptru,c
    97   000EEA  0E08               	movlw	high __Lsmallconst
    98   000EEC  6EF7               	movwf	tblptrh,c
    99   000EEE  0100               	movlb	0
   100   000EF0  EFF4  F006         	goto	_main	;jump to C main() function
   101                           
   102                           	psect	bssCOMRAM
   103   000009                     __pbssCOMRAM:
   104                           	callstack 0
   105   000009                     _tecla:
   106                           	callstack 0
   107   000009                     	ds	1
   108                           
   109                           	psect	cstackCOMRAM
   110   000001                     __pcstackCOMRAM:
   111                           	callstack 0
   112   000001                     ??_Keypad_Get_Char:
   113   000001                     Lcd_Port@a:
   114                           	callstack 0
   115                           
   116                           ; 1 bytes @ 0x0
   117   000001                     	ds	1
   118   000002                     ??_Lcd_Cmd:
   119   000002                     Lcd_Write_Char@temp:
   120                           	callstack 0
   121                           
   122                           ; 1 bytes @ 0x1
   123   000002                     	ds	1
   124   000003                     Lcd_Cmd@a:
   125                           	callstack 0
   126   000003                     Lcd_Write_Char@y:
   127                           	callstack 0
   128                           
   129                           ; 1 bytes @ 0x2
   130   000003                     	ds	1
   131   000004                     ??_Lcd_Init:
   132   000004                     Lcd_Set_Cursor@b:
   133                           	callstack 0
   134   000004                     Lcd_Write_Char@a:
   135                           	callstack 0
   136                           
   137                           ; 1 bytes @ 0x3
   138   000004                     	ds	1
   139   000005                     Lcd_Set_Cursor@a:
   140                           	callstack 0
   141   000005                     Lcd_Write_String@a:
   142                           	callstack 0
   143                           
   144                           ; 1 bytes @ 0x4
   145   000005                     	ds	1
   146   000006                     ??_Lcd_Write_String:
   147   000006                     Lcd_Set_Cursor@z:
   148                           	callstack 0
   149                           
   150                           ; 1 bytes @ 0x5
   151   000006                     	ds	1
   152   000007                     Lcd_Set_Cursor@y:
   153                           	callstack 0
   154   000007                     Lcd_Write_String@i:
   155                           	callstack 0
   156                           
   157                           ; 2 bytes @ 0x6
   158   000007                     	ds	1
   159   000008                     Lcd_Set_Cursor@temp:
   160                           	callstack 0
   161                           
   162                           ; 1 bytes @ 0x7
   163   000008                     	ds	1
   164   000009                     
   165                           ; 1 bytes @ 0x8
   166 ;;
   167 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   168 ;;
   169 ;; *************** function _main *****************
   170 ;; Defined at:
   171 ;;		line 23 in file "Keypad4X4_Read.c"
   172 ;; Parameters:    Size  Location     Type
   173 ;;		None
   174 ;; Auto vars:     Size  Location     Type
   175 ;;		None
   176 ;; Return value:  Size  Location     Type
   177 ;;                  1    wreg      void 
   178 ;; Registers used:
   179 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   180 ;; Tracked objects:
   181 ;;		On entry : 0/0
   182 ;;		On exit  : 0/0
   183 ;;		Unchanged: 0/0
   184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   185 ;;      Params:         0       0       0       0       0       0       0       0       0
   186 ;;      Locals:         0       0       0       0       0       0       0       0       0
   187 ;;      Temps:          0       0       0       0       0       0       0       0       0
   188 ;;      Totals:         0       0       0       0       0       0       0       0       0
   189 ;;Total ram usage:        0 bytes
   190 ;; Hardware stack levels required when called: 4
   191 ;; This function calls:
   192 ;;		_Keypad_Get_Char
   193 ;;		_Keypad_Init
   194 ;;		_Lcd_Init
   195 ;;		_Lcd_Set_Cursor
   196 ;;		_Lcd_Write_Char
   197 ;;		_Lcd_Write_String
   198 ;; This function is called by:
   199 ;;		Startup code after reset
   200 ;; This function uses a non-reentrant model
   201 ;;
   202                           
   203                           	psect	text0
   204   000DE8                     __ptext0:
   205                           	callstack 0
   206   000DE8                     _main:
   207                           	callstack 27
   208   000DE8                     
   209                           ;Keypad4X4_Read.c: 25:     ADCON1bits.PCFG = 0x0F;
   210   000DE8  0E0F               	movlw	15
   211   000DEA  12C1               	iorwf	193,f,c	;volatile
   212   000DEC                     
   213                           ;Keypad4X4_Read.c: 26:     Keypad_Init();
   214   000DEC  EC69  F007         	call	_Keypad_Init	;wreg free
   215                           
   216                           ;Keypad4X4_Read.c: 27:     Lcd_Init();
   217   000DF0  EC80  F006         	call	_Lcd_Init	;wreg free
   218   000DF4                     
   219                           ;Keypad4X4_Read.c: 29:     Lcd_Set_Cursor(1,1);
   220   000DF4  0E01               	movlw	1
   221   000DF6  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   222   000DF8  0E01               	movlw	1
   223   000DFA  EC17  F006         	call	_Lcd_Set_Cursor
   224   000DFE                     
   225                           ;Keypad4X4_Read.c: 30:     Lcd_Write_String("Tecla: ");
   226   000DFE  0E01               	movlw	low STR_1
   227   000E00  6E05               	movwf	Lcd_Write_String@a^0,c
   228   000E02  EC1E  F007         	call	_Lcd_Write_String	;wreg free
   229   000E06                     l1140:
   230                           
   231                           ;Keypad4X4_Read.c: 33:     {;Keypad4X4_Read.c: 34:         tecla = Keypad_Get_Char();
   232   000E06  EC05  F004         	call	_Keypad_Get_Char	;wreg free
   233   000E0A  6E09               	movwf	_tecla^0,c
   234   000E0C                     
   235                           ;Keypad4X4_Read.c: 35:         if(tecla != 0)
   236   000E0C  5009               	movf	_tecla^0,w,c
   237   000E0E  B4D8               	btfsc	status,2,c
   238   000E10  EF0C  F007         	goto	u481
   239   000E14  EF0E  F007         	goto	u480
   240   000E18                     u481:
   241   000E18  EF03  F007         	goto	l1140
   242   000E1C                     u480:
   243   000E1C                     
   244                           ;Keypad4X4_Read.c: 36:         {;Keypad4X4_Read.c: 37:             Lcd_Set_Cursor(1,1);
   245   000E1C  0E01               	movlw	1
   246   000E1E  6E04               	movwf	Lcd_Set_Cursor@b^0,c
   247   000E20  0E01               	movlw	1
   248   000E22  EC17  F006         	call	_Lcd_Set_Cursor
   249   000E26                     
   250                           ;Keypad4X4_Read.c: 38:             Lcd_Write_String("Tecla: ");
   251   000E26  0E01               	movlw	low STR_1
   252   000E28  6E05               	movwf	Lcd_Write_String@a^0,c
   253   000E2A  EC1E  F007         	call	_Lcd_Write_String	;wreg free
   254   000E2E                     
   255                           ;Keypad4X4_Read.c: 39:             Lcd_Write_Char(tecla);
   256   000E2E  5009               	movf	_tecla^0,w,c
   257   000E30  EC3F  F007         	call	_Lcd_Write_Char
   258   000E34  EF03  F007         	goto	l1140
   259   000E38  EF00  F000         	goto	start
   260   000E3C                     __end_of_main:
   261                           	callstack 0
   262                           
   263 ;; *************** function _Lcd_Write_String *****************
   264 ;; Defined at:
   265 ;;		line 104 in file "lcd.c"
   266 ;; Parameters:    Size  Location     Type
   267 ;;  a               1    4[COMRAM] PTR const unsigned char 
   268 ;;		 -> STR_2(8), STR_1(8), 
   269 ;; Auto vars:     Size  Location     Type
   270 ;;  i               2    6[COMRAM] int 
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   275 ;; Tracked objects:
   276 ;;		On entry : 0/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   280 ;;      Params:         1       0       0       0       0       0       0       0       0
   281 ;;      Locals:         2       0       0       0       0       0       0       0       0
   282 ;;      Temps:          1       0       0       0       0       0       0       0       0
   283 ;;      Totals:         4       0       0       0       0       0       0       0       0
   284 ;;Total ram usage:        4 bytes
   285 ;; Hardware stack levels used: 1
   286 ;; Hardware stack levels required when called: 2
   287 ;; This function calls:
   288 ;;		_Lcd_Write_Char
   289 ;; This function is called by:
   290 ;;		_main
   291 ;; This function uses a non-reentrant model
   292 ;;
   293                           
   294                           	psect	text1
   295   000E3C                     __ptext1:
   296                           	callstack 0
   297   000E3C                     _Lcd_Write_String:
   298                           	callstack 28
   299   000E3C                     
   300                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
   301   000E3C  0E00               	movlw	0
   302   000E3E  6E08               	movwf	(Lcd_Write_String@i+1)^0,c
   303   000E40  0E00               	movlw	0
   304   000E42  6E07               	movwf	Lcd_Write_String@i^0,c
   305   000E44  EF2F  F007         	goto	l1130
   306   000E48                     l1126:
   307                           
   308                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
   309   000E48  5005               	movf	Lcd_Write_String@a^0,w,c
   310   000E4A  2407               	addwf	Lcd_Write_String@i^0,w,c
   311   000E4C  6E06               	movwf	??_Lcd_Write_String^0,c
   312   000E4E  C006  FFF6         	movff	??_Lcd_Write_String,tblptrl
   313   000E52                     	if	0	;There is only one active tblptr byte
   314   000E52                     	endif
   315   000E52                     	if	0	;tblptru may be non-zero
   316   000E52                     	endif
   317   000E52                     	if	0	;tblptru may be non-zero
   318   000E52                     	endif
   319   000E52  0008               	tblrd		*
   320   000E54  50F5               	movf	tablat,w,c
   321   000E56  EC3F  F007         	call	_Lcd_Write_Char
   322   000E5A  4A07               	infsnz	Lcd_Write_String@i^0,f,c
   323   000E5C  2A08               	incf	(Lcd_Write_String@i+1)^0,f,c
   324   000E5E                     l1130:
   325   000E5E  5005               	movf	Lcd_Write_String@a^0,w,c
   326   000E60  2407               	addwf	Lcd_Write_String@i^0,w,c
   327   000E62  6E06               	movwf	??_Lcd_Write_String^0,c
   328   000E64  C006  FFF6         	movff	??_Lcd_Write_String,tblptrl
   329   000E68                     	if	0	;There is only one active tblptr byte
   330   000E68                     	endif
   331   000E68                     	if	0	;tblptru may be non-zero
   332   000E68                     	endif
   333   000E68                     	if	0	;tblptru may be non-zero
   334   000E68                     	endif
   335   000E68  0008               	tblrd		*
   336   000E6A  50F5               	movf	tablat,w,c
   337   000E6C  0900               	iorlw	0
   338   000E6E  A4D8               	btfss	status,2,c
   339   000E70  EF3C  F007         	goto	u471
   340   000E74  EF3E  F007         	goto	u470
   341   000E78                     u471:
   342   000E78  EF24  F007         	goto	l1126
   343   000E7C                     u470:
   344   000E7C  0012               	return		;funcret
   345   000E7E                     __end_of_Lcd_Write_String:
   346                           	callstack 0
   347                           
   348 ;; *************** function _Lcd_Write_Char *****************
   349 ;; Defined at:
   350 ;;		line 88 in file "lcd.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;  a               1    wreg     unsigned char 
   353 ;; Auto vars:     Size  Location     Type
   354 ;;  a               1    3[COMRAM] unsigned char 
   355 ;;  y               1    2[COMRAM] unsigned char 
   356 ;;  temp            1    1[COMRAM] unsigned char 
   357 ;; Return value:  Size  Location     Type
   358 ;;                  1    wreg      void 
   359 ;; Registers used:
   360 ;;		wreg, status,2, status,0, cstack
   361 ;; Tracked objects:
   362 ;;		On entry : 0/0
   363 ;;		On exit  : 0/0
   364 ;;		Unchanged: 0/0
   365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   366 ;;      Params:         0       0       0       0       0       0       0       0       0
   367 ;;      Locals:         3       0       0       0       0       0       0       0       0
   368 ;;      Temps:          0       0       0       0       0       0       0       0       0
   369 ;;      Totals:         3       0       0       0       0       0       0       0       0
   370 ;;Total ram usage:        3 bytes
   371 ;; Hardware stack levels used: 1
   372 ;; Hardware stack levels required when called: 1
   373 ;; This function calls:
   374 ;;		_Lcd_Port
   375 ;; This function is called by:
   376 ;;		_Lcd_Write_String
   377 ;;		_main
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text2
   382   000E7E                     __ptext2:
   383                           	callstack 0
   384   000E7E                     _Lcd_Write_Char:
   385                           	callstack 28
   386                           
   387                           ;incstack = 0
   388                           ;Lcd_Write_Char@a stored from wreg
   389   000E7E  6E04               	movwf	Lcd_Write_Char@a^0,c
   390   000E80                     
   391                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
   392   000E80  5004               	movf	Lcd_Write_Char@a^0,w,c
   393   000E82  0B0F               	andlw	15
   394   000E84  6E02               	movwf	Lcd_Write_Char@temp^0,c
   395                           
   396                           ;lcd.c: 92:     y = a&0xF0;
   397   000E86  5004               	movf	Lcd_Write_Char@a^0,w,c
   398   000E88  0BF0               	andlw	240
   399   000E8A  6E03               	movwf	Lcd_Write_Char@y^0,c
   400   000E8C                     
   401                           ;lcd.c: 93:     LATBbits.LB2 = 1;
   402   000E8C  848A               	bsf	138,2,c	;volatile
   403   000E8E                     
   404                           ;lcd.c: 94:     Lcd_Port(y>>4);
   405   000E8E  3803               	swapf	Lcd_Write_Char@y^0,w,c
   406   000E90  0B0F               	andlw	15
   407   000E92  ECC6  F006         	call	_Lcd_Port
   408   000E96                     
   409                           ;lcd.c: 95:     LATBbits.LB3 = 1;
   410   000E96  868A               	bsf	138,3,c	;volatile
   411   000E98                     
   412                           ;lcd.c: 96:     _delay((unsigned long)((40)*(48000000/4000000.0)));
   413   000E98  0EA0               	movlw	160
   414   000E9A                     u497:
   415   000E9A  2EE8               	decfsz	wreg,f,c
   416   000E9C  D7FE               	bra	u497
   417   000E9E                     
   418                           ;lcd.c: 97:     LATBbits.LB3 = 0;
   419   000E9E  968A               	bcf	138,3,c	;volatile
   420   000EA0                     
   421                           ;lcd.c: 98:     Lcd_Port(temp);
   422   000EA0  5002               	movf	Lcd_Write_Char@temp^0,w,c
   423   000EA2  ECC6  F006         	call	_Lcd_Port
   424   000EA6                     
   425                           ;lcd.c: 99:     LATBbits.LB3 = 1;
   426   000EA6  868A               	bsf	138,3,c	;volatile
   427   000EA8                     
   428                           ;lcd.c: 100:     _delay((unsigned long)((40)*(48000000/4000000.0)));
   429   000EA8  0EA0               	movlw	160
   430   000EAA                     u507:
   431   000EAA  2EE8               	decfsz	wreg,f,c
   432   000EAC  D7FE               	bra	u507
   433   000EAE                     
   434                           ;lcd.c: 101:     LATBbits.LB3 = 0;
   435   000EAE  968A               	bcf	138,3,c	;volatile
   436   000EB0  0012               	return		;funcret
   437   000EB2                     __end_of_Lcd_Write_Char:
   438                           	callstack 0
   439                           
   440 ;; *************** function _Lcd_Set_Cursor *****************
   441 ;; Defined at:
   442 ;;		line 26 in file "lcd.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;  a               1    wreg     unsigned char 
   445 ;;  b               1    3[COMRAM] unsigned char 
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  a               1    4[COMRAM] unsigned char 
   448 ;;  temp            1    7[COMRAM] unsigned char 
   449 ;;  y               1    6[COMRAM] unsigned char 
   450 ;;  z               1    5[COMRAM] unsigned char 
   451 ;; Return value:  Size  Location     Type
   452 ;;                  1    wreg      void 
   453 ;; Registers used:
   454 ;;		wreg, status,2, status,0, cstack
   455 ;; Tracked objects:
   456 ;;		On entry : 0/0
   457 ;;		On exit  : 0/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   460 ;;      Params:         1       0       0       0       0       0       0       0       0
   461 ;;      Locals:         4       0       0       0       0       0       0       0       0
   462 ;;      Temps:          0       0       0       0       0       0       0       0       0
   463 ;;      Totals:         5       0       0       0       0       0       0       0       0
   464 ;;Total ram usage:        5 bytes
   465 ;; Hardware stack levels used: 1
   466 ;; Hardware stack levels required when called: 2
   467 ;; This function calls:
   468 ;;		_Lcd_Cmd
   469 ;; This function is called by:
   470 ;;		_main
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           	psect	text3
   475   000C2E                     __ptext3:
   476                           	callstack 0
   477   000C2E                     _Lcd_Set_Cursor:
   478                           	callstack 28
   479                           
   480                           ;incstack = 0
   481                           ;Lcd_Set_Cursor@a stored from wreg
   482   000C2E  6E05               	movwf	Lcd_Set_Cursor@a^0,c
   483   000C30                     
   484                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
   485   000C30  0405               	decf	Lcd_Set_Cursor@a^0,w,c
   486   000C32  A4D8               	btfss	status,2,c
   487   000C34  EF1E  F006         	goto	u431
   488   000C38  EF20  F006         	goto	u430
   489   000C3C                     u431:
   490   000C3C  EF31  F006         	goto	l1100
   491   000C40                     u430:
   492   000C40                     
   493                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
   494   000C40  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   495   000C42  0F7F               	addlw	127
   496   000C44  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   497                           
   498                           ;lcd.c: 32:         z = temp>>4;
   499   000C46  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   500   000C48  0B0F               	andlw	15
   501   000C4A  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   502                           
   503                           ;lcd.c: 33:         y = temp & 0x0F;
   504   000C4C  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   505   000C4E  0B0F               	andlw	15
   506   000C50  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   507   000C52                     
   508                           ;lcd.c: 34:         Lcd_Cmd(z);
   509   000C52  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   510   000C54  EC59  F007         	call	_Lcd_Cmd
   511   000C58                     
   512                           ;lcd.c: 35:         Lcd_Cmd(y);
   513   000C58  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   514   000C5A  EC59  F007         	call	_Lcd_Cmd
   515                           
   516                           ;lcd.c: 36:     }
   517   000C5E  EF7F  F006         	goto	l117
   518   000C62                     l1100:
   519   000C62  0E02               	movlw	2
   520   000C64  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   521   000C66  A4D8               	btfss	status,2,c
   522   000C68  EF38  F006         	goto	u441
   523   000C6C  EF3A  F006         	goto	u440
   524   000C70                     u441:
   525   000C70  EF4B  F006         	goto	l1108
   526   000C74                     u440:
   527   000C74                     
   528                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
   529   000C74  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   530   000C76  0FBF               	addlw	191
   531   000C78  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   532                           
   533                           ;lcd.c: 40:         z = temp>>4;
   534   000C7A  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   535   000C7C  0B0F               	andlw	15
   536   000C7E  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   537                           
   538                           ;lcd.c: 41:         y = temp & 0x0F;
   539   000C80  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   540   000C82  0B0F               	andlw	15
   541   000C84  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   542   000C86                     
   543                           ;lcd.c: 42:         Lcd_Cmd(z);
   544   000C86  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   545   000C88  EC59  F007         	call	_Lcd_Cmd
   546   000C8C                     
   547                           ;lcd.c: 43:         Lcd_Cmd(y);
   548   000C8C  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   549   000C8E  EC59  F007         	call	_Lcd_Cmd
   550                           
   551                           ;lcd.c: 44:     }
   552   000C92  EF7F  F006         	goto	l117
   553   000C96                     l1108:
   554   000C96  0E03               	movlw	3
   555   000C98  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   556   000C9A  A4D8               	btfss	status,2,c
   557   000C9C  EF52  F006         	goto	u451
   558   000CA0  EF54  F006         	goto	u450
   559   000CA4                     u451:
   560   000CA4  EF65  F006         	goto	l1116
   561   000CA8                     u450:
   562   000CA8                     
   563                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
   564   000CA8  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   565   000CAA  0F93               	addlw	147
   566   000CAC  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   567                           
   568                           ;lcd.c: 48:         z = temp>>4;
   569   000CAE  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   570   000CB0  0B0F               	andlw	15
   571   000CB2  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   572                           
   573                           ;lcd.c: 49:         y = temp & 0x0F;
   574   000CB4  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   575   000CB6  0B0F               	andlw	15
   576   000CB8  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   577   000CBA                     
   578                           ;lcd.c: 50:         Lcd_Cmd(z);
   579   000CBA  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   580   000CBC  EC59  F007         	call	_Lcd_Cmd
   581   000CC0                     
   582                           ;lcd.c: 51:         Lcd_Cmd(y);
   583   000CC0  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   584   000CC2  EC59  F007         	call	_Lcd_Cmd
   585                           
   586                           ;lcd.c: 52:     }
   587   000CC6  EF7F  F006         	goto	l117
   588   000CCA                     l1116:
   589   000CCA  0E04               	movlw	4
   590   000CCC  1805               	xorwf	Lcd_Set_Cursor@a^0,w,c
   591   000CCE  A4D8               	btfss	status,2,c
   592   000CD0  EF6C  F006         	goto	u461
   593   000CD4  EF6E  F006         	goto	u460
   594   000CD8                     u461:
   595   000CD8  EF7F  F006         	goto	l113
   596   000CDC                     u460:
   597   000CDC                     
   598                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
   599   000CDC  5004               	movf	Lcd_Set_Cursor@b^0,w,c
   600   000CDE  0FD3               	addlw	211
   601   000CE0  6E08               	movwf	Lcd_Set_Cursor@temp^0,c
   602                           
   603                           ;lcd.c: 56:         z = temp>>4;
   604   000CE2  3808               	swapf	Lcd_Set_Cursor@temp^0,w,c
   605   000CE4  0B0F               	andlw	15
   606   000CE6  6E06               	movwf	Lcd_Set_Cursor@z^0,c
   607                           
   608                           ;lcd.c: 57:         y = temp & 0x0F;
   609   000CE8  5008               	movf	Lcd_Set_Cursor@temp^0,w,c
   610   000CEA  0B0F               	andlw	15
   611   000CEC  6E07               	movwf	Lcd_Set_Cursor@y^0,c
   612   000CEE                     
   613                           ;lcd.c: 58:         Lcd_Cmd(z);
   614   000CEE  5006               	movf	Lcd_Set_Cursor@z^0,w,c
   615   000CF0  EC59  F007         	call	_Lcd_Cmd
   616   000CF4                     
   617                           ;lcd.c: 59:         Lcd_Cmd(y);
   618   000CF4  5007               	movf	Lcd_Set_Cursor@y^0,w,c
   619   000CF6  EC59  F007         	call	_Lcd_Cmd
   620   000CFA  EF7F  F006         	goto	l117
   621   000CFE                     l113:
   622   000CFE                     l117:
   623   000CFE  0012               	return		;funcret
   624   000D00                     __end_of_Lcd_Set_Cursor:
   625                           	callstack 0
   626                           
   627 ;; *************** function _Lcd_Init *****************
   628 ;; Defined at:
   629 ;;		line 63 in file "lcd.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;		None
   632 ;; Auto vars:     Size  Location     Type
   633 ;;		None
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, status,2, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   643 ;;      Params:         0       0       0       0       0       0       0       0       0
   644 ;;      Locals:         0       0       0       0       0       0       0       0       0
   645 ;;      Temps:          2       0       0       0       0       0       0       0       0
   646 ;;      Totals:         2       0       0       0       0       0       0       0       0
   647 ;;Total ram usage:        2 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 3
   650 ;; This function calls:
   651 ;;		_Lcd_Clear
   652 ;;		_Lcd_Cmd
   653 ;;		_Lcd_Port
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           	psect	text4
   660   000D00                     __ptext4:
   661                           	callstack 0
   662   000D00                     _Lcd_Init:
   663                           	callstack 27
   664   000D00                     
   665                           ;lcd.c: 65:  TRISBbits.TRISB2 = 0;
   666   000D00  9493               	bcf	147,2,c	;volatile
   667                           
   668                           ;lcd.c: 66:  TRISBbits.TRISB3 = 0;
   669   000D02  9693               	bcf	147,3,c	;volatile
   670                           
   671                           ;lcd.c: 67:  TRISBbits.TRISB4 = 0;
   672   000D04  9893               	bcf	147,4,c	;volatile
   673                           
   674                           ;lcd.c: 68:  TRISBbits.TRISB5 = 0;
   675   000D06  9A93               	bcf	147,5,c	;volatile
   676                           
   677                           ;lcd.c: 69:  TRISBbits.TRISB6 = 0;
   678   000D08  9C93               	bcf	147,6,c	;volatile
   679                           
   680                           ;lcd.c: 70:  TRISBbits.TRISB7 = 0;
   681   000D0A  9E93               	bcf	147,7,c	;volatile
   682   000D0C                     
   683                           ;lcd.c: 71:     Lcd_Port(0x00);
   684   000D0C  0E00               	movlw	0
   685   000D0E  ECC6  F006         	call	_Lcd_Port
   686   000D12                     
   687                           ;lcd.c: 72:     _delay((unsigned long)((20)*(48000000/4000.0)));
   688   000D12  0E02               	movlw	2
   689   000D14  6E05               	movwf	(??_Lcd_Init+1)^0,c
   690   000D16  0E38               	movlw	56
   691   000D18  6E04               	movwf	??_Lcd_Init^0,c
   692   000D1A  0EAD               	movlw	173
   693   000D1C                     u517:
   694   000D1C  2EE8               	decfsz	wreg,f,c
   695   000D1E  D7FE               	bra	u517
   696   000D20  2E04               	decfsz	??_Lcd_Init^0,f,c
   697   000D22  D7FC               	bra	u517
   698   000D24  2E05               	decfsz	(??_Lcd_Init+1)^0,f,c
   699   000D26  D7FA               	bra	u517
   700   000D28  0000               	nop	
   701   000D2A                     
   702                           ;lcd.c: 73:     Lcd_Cmd(0x03);
   703   000D2A  0E03               	movlw	3
   704   000D2C  EC59  F007         	call	_Lcd_Cmd
   705   000D30                     
   706                           ;lcd.c: 74:     _delay((unsigned long)((5)*(48000000/4000.0)));
   707   000D30  0E4E               	movlw	78
   708   000D32  6E04               	movwf	??_Lcd_Init^0,c
   709   000D34  0EEB               	movlw	235
   710   000D36                     u527:
   711   000D36  2EE8               	decfsz	wreg,f,c
   712   000D38  D7FE               	bra	u527
   713   000D3A  2E04               	decfsz	??_Lcd_Init^0,f,c
   714   000D3C  D7FC               	bra	u527
   715   000D3E  0000               	nop	
   716   000D40                     
   717                           ;lcd.c: 75:     Lcd_Cmd(0x03);
   718   000D40  0E03               	movlw	3
   719   000D42  EC59  F007         	call	_Lcd_Cmd
   720   000D46                     
   721                           ;lcd.c: 76:     _delay((unsigned long)((11)*(48000000/4000.0)));
   722   000D46  0EAC               	movlw	172
   723   000D48  6E04               	movwf	??_Lcd_Init^0,c
   724   000D4A  0E6C               	movlw	108
   725   000D4C                     u537:
   726   000D4C  2EE8               	decfsz	wreg,f,c
   727   000D4E  D7FE               	bra	u537
   728   000D50  2E04               	decfsz	??_Lcd_Init^0,f,c
   729   000D52  D7FC               	bra	u537
   730   000D54  D000               	nop2	
   731   000D56                     
   732                           ;lcd.c: 77:     Lcd_Cmd(0x03);
   733   000D56  0E03               	movlw	3
   734   000D58  EC59  F007         	call	_Lcd_Cmd
   735   000D5C                     
   736                           ;lcd.c: 78:     Lcd_Cmd(0x02);
   737   000D5C  0E02               	movlw	2
   738   000D5E  EC59  F007         	call	_Lcd_Cmd
   739   000D62                     
   740                           ;lcd.c: 79:     Lcd_Cmd(0x02);
   741   000D62  0E02               	movlw	2
   742   000D64  EC59  F007         	call	_Lcd_Cmd
   743   000D68                     
   744                           ;lcd.c: 80:     Lcd_Cmd(0x08);
   745   000D68  0E08               	movlw	8
   746   000D6A  EC59  F007         	call	_Lcd_Cmd
   747   000D6E                     
   748                           ;lcd.c: 81:     Lcd_Cmd(0x00);
   749   000D6E  0E00               	movlw	0
   750   000D70  EC59  F007         	call	_Lcd_Cmd
   751   000D74                     
   752                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
   753   000D74  0E0C               	movlw	12
   754   000D76  EC59  F007         	call	_Lcd_Cmd
   755   000D7A                     
   756                           ;lcd.c: 83:     Lcd_Cmd(0x00);
   757   000D7A  0E00               	movlw	0
   758   000D7C  EC59  F007         	call	_Lcd_Cmd
   759   000D80                     
   760                           ;lcd.c: 84:     Lcd_Cmd(0x06);
   761   000D80  0E06               	movlw	6
   762   000D82  EC59  F007         	call	_Lcd_Cmd
   763   000D86                     
   764                           ;lcd.c: 85:     Lcd_Clear();
   765   000D86  EC7A  F007         	call	_Lcd_Clear	;wreg free
   766   000D8A  0012               	return		;funcret
   767   000D8C                     __end_of_Lcd_Init:
   768                           	callstack 0
   769                           
   770 ;; *************** function _Lcd_Clear *****************
   771 ;; Defined at:
   772 ;;		line 20 in file "lcd.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, status,2, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   786 ;;      Params:         0       0       0       0       0       0       0       0       0
   787 ;;      Locals:         0       0       0       0       0       0       0       0       0
   788 ;;      Temps:          0       0       0       0       0       0       0       0       0
   789 ;;      Totals:         0       0       0       0       0       0       0       0       0
   790 ;;Total ram usage:        0 bytes
   791 ;; Hardware stack levels used: 1
   792 ;; Hardware stack levels required when called: 2
   793 ;; This function calls:
   794 ;;		_Lcd_Cmd
   795 ;; This function is called by:
   796 ;;		_Lcd_Init
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text5
   801   000EF4                     __ptext5:
   802                           	callstack 0
   803   000EF4                     _Lcd_Clear:
   804                           	callstack 27
   805   000EF4                     
   806                           ;lcd.c: 22:     Lcd_Cmd(0);
   807   000EF4  0E00               	movlw	0
   808   000EF6  EC59  F007         	call	_Lcd_Cmd
   809                           
   810                           ;lcd.c: 23:     Lcd_Cmd(1);
   811   000EFA  0E01               	movlw	1
   812   000EFC  EC59  F007         	call	_Lcd_Cmd
   813   000F00  0012               	return		;funcret
   814   000F02                     __end_of_Lcd_Clear:
   815                           	callstack 0
   816                           
   817 ;; *************** function _Lcd_Cmd *****************
   818 ;; Defined at:
   819 ;;		line 11 in file "lcd.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  a               1    wreg     unsigned char 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  a               1    2[COMRAM] unsigned char 
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, status,2, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   833 ;;      Params:         0       0       0       0       0       0       0       0       0
   834 ;;      Locals:         1       0       0       0       0       0       0       0       0
   835 ;;      Temps:          1       0       0       0       0       0       0       0       0
   836 ;;      Totals:         2       0       0       0       0       0       0       0       0
   837 ;;Total ram usage:        2 bytes
   838 ;; Hardware stack levels used: 1
   839 ;; Hardware stack levels required when called: 1
   840 ;; This function calls:
   841 ;;		_Lcd_Port
   842 ;; This function is called by:
   843 ;;		_Lcd_Clear
   844 ;;		_Lcd_Set_Cursor
   845 ;;		_Lcd_Init
   846 ;;		_Lcd_Shift_Right
   847 ;;		_Lcd_Shift_Left
   848 ;;		_Lcd_Blink
   849 ;;		_Lcd_NoBlink
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           	psect	text6
   854   000EB2                     __ptext6:
   855                           	callstack 0
   856   000EB2                     _Lcd_Cmd:
   857                           	callstack 28
   858                           
   859                           ;incstack = 0
   860                           ;Lcd_Cmd@a stored from wreg
   861   000EB2  6E03               	movwf	Lcd_Cmd@a^0,c
   862   000EB4                     
   863                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATBbits.LB2 = 0;
   864   000EB4  948A               	bcf	138,2,c	;volatile
   865   000EB6                     
   866                           ;lcd.c: 14:     Lcd_Port(a);
   867   000EB6  5003               	movf	Lcd_Cmd@a^0,w,c
   868   000EB8  ECC6  F006         	call	_Lcd_Port
   869   000EBC                     
   870                           ;lcd.c: 15:     LATBbits.LB3 = 1;
   871   000EBC  868A               	bsf	138,3,c	;volatile
   872   000EBE                     
   873                           ;lcd.c: 16:     _delay((unsigned long)((4)*(48000000/4000.0)));
   874   000EBE  0E3F               	movlw	63
   875   000EC0  6E02               	movwf	??_Lcd_Cmd^0,c
   876   000EC2  0E55               	movlw	85
   877   000EC4                     u547:
   878   000EC4  2EE8               	decfsz	wreg,f,c
   879   000EC6  D7FE               	bra	u547
   880   000EC8  2E02               	decfsz	??_Lcd_Cmd^0,f,c
   881   000ECA  D7FC               	bra	u547
   882   000ECC  0000               	nop	
   883   000ECE                     
   884                           ;lcd.c: 17:     LATBbits.LB3 = 0;
   885   000ECE  968A               	bcf	138,3,c	;volatile
   886   000ED0  0012               	return		;funcret
   887   000ED2                     __end_of_Lcd_Cmd:
   888                           	callstack 0
   889                           
   890 ;; *************** function _Lcd_Port *****************
   891 ;; Defined at:
   892 ;;		line 3 in file "lcd.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;  a               1    wreg     unsigned char 
   895 ;; Auto vars:     Size  Location     Type
   896 ;;  a               1    0[COMRAM] unsigned char 
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      void 
   899 ;; Registers used:
   900 ;;		wreg
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   906 ;;      Params:         0       0       0       0       0       0       0       0       0
   907 ;;      Locals:         1       0       0       0       0       0       0       0       0
   908 ;;      Temps:          0       0       0       0       0       0       0       0       0
   909 ;;      Totals:         1       0       0       0       0       0       0       0       0
   910 ;;Total ram usage:        1 bytes
   911 ;; Hardware stack levels used: 1
   912 ;; This function calls:
   913 ;;		Nothing
   914 ;; This function is called by:
   915 ;;		_Lcd_Cmd
   916 ;;		_Lcd_Init
   917 ;;		_Lcd_Write_Char
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text7
   922   000D8C                     __ptext7:
   923                           	callstack 0
   924   000D8C                     _Lcd_Port:
   925                           	callstack 28
   926                           
   927                           ;incstack = 0
   928                           ;Lcd_Port@a stored from wreg
   929   000D8C  6E01               	movwf	Lcd_Port@a^0,c
   930   000D8E                     
   931                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATBbits.LB4 = 1) 
      +                          : (LATBbits.LB4 = 0);
   932   000D8E  A001               	btfss	Lcd_Port@a^0,0,c
   933   000D90  EFCC  F006         	goto	u11
   934   000D94  EFCE  F006         	goto	u10
   935   000D98                     u11:
   936   000D98  EFD1  F006         	goto	l86
   937   000D9C                     u10:
   938   000D9C  888A               	bsf	138,4,c	;volatile
   939   000D9E  EFD2  F006         	goto	l846
   940   000DA2                     l86:
   941   000DA2  988A               	bcf	138,4,c	;volatile
   942   000DA4                     l846:
   943                           
   944                           ;lcd.c: 6:     (a & 2) ? (LATBbits.LB5 = 1) : (LATBbits.LB5 = 0);
   945   000DA4  A201               	btfss	Lcd_Port@a^0,1,c
   946   000DA6  EFD7  F006         	goto	u21
   947   000DAA  EFD9  F006         	goto	u20
   948   000DAE                     u21:
   949   000DAE  EFDC  F006         	goto	l90
   950   000DB2                     u20:
   951   000DB2  8A8A               	bsf	138,5,c	;volatile
   952   000DB4  EFDD  F006         	goto	l850
   953   000DB8                     l90:
   954   000DB8  9A8A               	bcf	138,5,c	;volatile
   955   000DBA                     l850:
   956                           
   957                           ;lcd.c: 7:     (a & 4) ? (LATBbits.LB6 = 1) : (LATBbits.LB6 = 0);
   958   000DBA  A401               	btfss	Lcd_Port@a^0,2,c
   959   000DBC  EFE2  F006         	goto	u31
   960   000DC0  EFE4  F006         	goto	u30
   961   000DC4                     u31:
   962   000DC4  EFE7  F006         	goto	l94
   963   000DC8                     u30:
   964   000DC8  8C8A               	bsf	138,6,c	;volatile
   965   000DCA  EFE8  F006         	goto	l854
   966   000DCE                     l94:
   967   000DCE  9C8A               	bcf	138,6,c	;volatile
   968   000DD0                     l854:
   969                           
   970                           ;lcd.c: 8:     (a & 8) ? (LATBbits.LB7 = 1) : (LATBbits.LB7 = 0);
   971   000DD0  A601               	btfss	Lcd_Port@a^0,3,c
   972   000DD2  EFED  F006         	goto	u41
   973   000DD6  EFEF  F006         	goto	u40
   974   000DDA                     u41:
   975   000DDA  EFF2  F006         	goto	l98
   976   000DDE                     u40:
   977   000DDE  8E8A               	bsf	138,7,c	;volatile
   978   000DE0  EFF3  F006         	goto	l101
   979   000DE4                     l98:
   980   000DE4  9E8A               	bcf	138,7,c	;volatile
   981   000DE6                     l101:
   982   000DE6  0012               	return		;funcret
   983   000DE8                     __end_of_Lcd_Port:
   984                           	callstack 0
   985                           
   986 ;; *************** function _Keypad_Init *****************
   987 ;; Defined at:
   988 ;;		line 11 in file "kbd4x4.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		None
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1002 ;;      Params:         0       0       0       0       0       0       0       0       0
  1003 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1005 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used: 1
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text8
  1016   000ED2                     __ptext8:
  1017                           	callstack 0
  1018   000ED2                     _Keypad_Init:
  1019                           	callstack 30
  1020   000ED2                     
  1021                           ;kbd4x4.c: 13:     TRISDbits.TRISD7 = 0;
  1022   000ED2  9E95               	bcf	149,7,c	;volatile
  1023                           
  1024                           ;kbd4x4.c: 14:     TRISDbits.TRISD6 = 0;
  1025   000ED4  9C95               	bcf	149,6,c	;volatile
  1026                           
  1027                           ;kbd4x4.c: 15:     TRISDbits.TRISD5 = 0;
  1028   000ED6  9A95               	bcf	149,5,c	;volatile
  1029                           
  1030                           ;kbd4x4.c: 16:     TRISDbits.TRISD4 = 0;
  1031   000ED8  9895               	bcf	149,4,c	;volatile
  1032                           
  1033                           ;kbd4x4.c: 17:     TRISDbits.TRISD3 = 1;
  1034   000EDA  8695               	bsf	149,3,c	;volatile
  1035                           
  1036                           ;kbd4x4.c: 18:     TRISDbits.TRISD2 = 1;
  1037   000EDC  8495               	bsf	149,2,c	;volatile
  1038                           
  1039                           ;kbd4x4.c: 19:     TRISDbits.TRISD1 = 1;
  1040   000EDE  8295               	bsf	149,1,c	;volatile
  1041                           
  1042                           ;kbd4x4.c: 20:     TRISDbits.TRISD0 = 1;
  1043   000EE0  8095               	bsf	149,0,c	;volatile
  1044   000EE2  0012               	return		;funcret
  1045   000EE4                     __end_of_Keypad_Init:
  1046                           	callstack 0
  1047                           
  1048 ;; *************** function _Keypad_Get_Char *****************
  1049 ;; Defined at:
  1050 ;;		line 23 in file "kbd4x4.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      unsigned char 
  1057 ;; Registers used:
  1058 ;;		wreg
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1064 ;;      Params:         0       0       0       0       0       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1066 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1067 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1068 ;;Total ram usage:        1 bytes
  1069 ;; Hardware stack levels used: 1
  1070 ;; This function calls:
  1071 ;;		Nothing
  1072 ;; This function is called by:
  1073 ;;		_main
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text9
  1078   00080A                     __ptext9:
  1079                           	callstack 0
  1080   00080A                     _Keypad_Get_Char:
  1081                           	callstack 30
  1082   00080A                     
  1083                           ;kbd4x4.c: 25:     PORTDbits.RD7 = 0;
  1084   00080A  9E83               	bcf	131,7,c	;volatile
  1085                           
  1086                           ;kbd4x4.c: 26:     PORTDbits.RD6 = 1;
  1087   00080C  8C83               	bsf	131,6,c	;volatile
  1088                           
  1089                           ;kbd4x4.c: 27:     PORTDbits.RD5 = 1;
  1090   00080E  8A83               	bsf	131,5,c	;volatile
  1091                           
  1092                           ;kbd4x4.c: 28:     PORTDbits.RD4 = 1;
  1093   000810  8883               	bsf	131,4,c	;volatile
  1094                           
  1095                           ;kbd4x4.c: 29:     if(PORTDbits.RD3 == 0){
  1096   000812  B683               	btfsc	131,3,c	;volatile
  1097   000814  EF0E  F004         	goto	u51
  1098   000818  EF10  F004         	goto	u50
  1099   00081C                     u51:
  1100   00081C  EF29  F004         	goto	l12
  1101   000820                     u50:
  1102   000820                     
  1103                           ;kbd4x4.c: 30:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1104   000820  0E20               	movlw	32
  1105   000822  6E01               	movwf	??_Keypad_Get_Char^0,c
  1106   000824  0E2A               	movlw	42
  1107   000826                     u557:
  1108   000826  2EE8               	decfsz	wreg,f,c
  1109   000828  D7FE               	bra	u557
  1110   00082A  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1111   00082C  D7FC               	bra	u557
  1112   00082E                     l13:
  1113   00082E  A683               	btfss	131,3,c	;volatile
  1114   000830  EF1C  F004         	goto	u61
  1115   000834  EF1E  F004         	goto	u60
  1116   000838                     u61:
  1117   000838  EF17  F004         	goto	l13
  1118   00083C                     u60:
  1119   00083C                     
  1120                           ;kbd4x4.c: 32:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1121   00083C  0E4E               	movlw	78
  1122   00083E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1123   000840  0EEB               	movlw	235
  1124   000842                     u567:
  1125   000842  2EE8               	decfsz	wreg,f,c
  1126   000844  D7FE               	bra	u567
  1127   000846  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1128   000848  D7FC               	bra	u567
  1129   00084A  0000               	nop	
  1130                           
  1131                           ;kbd4x4.c: 33:         return '1';
  1132   00084C  0E31               	movlw	49
  1133   00084E  EF16  F006         	goto	l16
  1134   000852                     l12:
  1135                           
  1136                           ;kbd4x4.c: 35:     if(PORTDbits.RD2 == 0){
  1137   000852  B483               	btfsc	131,2,c	;volatile
  1138   000854  EF2E  F004         	goto	u71
  1139   000858  EF30  F004         	goto	u70
  1140   00085C                     u71:
  1141   00085C  EF49  F004         	goto	l17
  1142   000860                     u70:
  1143   000860                     
  1144                           ;kbd4x4.c: 36:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1145   000860  0E20               	movlw	32
  1146   000862  6E01               	movwf	??_Keypad_Get_Char^0,c
  1147   000864  0E2A               	movlw	42
  1148   000866                     u577:
  1149   000866  2EE8               	decfsz	wreg,f,c
  1150   000868  D7FE               	bra	u577
  1151   00086A  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1152   00086C  D7FC               	bra	u577
  1153   00086E                     l18:
  1154   00086E  A483               	btfss	131,2,c	;volatile
  1155   000870  EF3C  F004         	goto	u81
  1156   000874  EF3E  F004         	goto	u80
  1157   000878                     u81:
  1158   000878  EF37  F004         	goto	l18
  1159   00087C                     u80:
  1160   00087C                     
  1161                           ;kbd4x4.c: 38:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1162   00087C  0E4E               	movlw	78
  1163   00087E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1164   000880  0EEB               	movlw	235
  1165   000882                     u587:
  1166   000882  2EE8               	decfsz	wreg,f,c
  1167   000884  D7FE               	bra	u587
  1168   000886  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1169   000888  D7FC               	bra	u587
  1170   00088A  0000               	nop	
  1171                           
  1172                           ;kbd4x4.c: 39:         return '2';
  1173   00088C  0E32               	movlw	50
  1174   00088E  EF16  F006         	goto	l16
  1175   000892                     l17:
  1176                           
  1177                           ;kbd4x4.c: 41:     if(PORTDbits.RD1 == 0){
  1178   000892  B283               	btfsc	131,1,c	;volatile
  1179   000894  EF4E  F004         	goto	u91
  1180   000898  EF50  F004         	goto	u90
  1181   00089C                     u91:
  1182   00089C  EF69  F004         	goto	l21
  1183   0008A0                     u90:
  1184   0008A0                     
  1185                           ;kbd4x4.c: 42:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1186   0008A0  0E20               	movlw	32
  1187   0008A2  6E01               	movwf	??_Keypad_Get_Char^0,c
  1188   0008A4  0E2A               	movlw	42
  1189   0008A6                     u597:
  1190   0008A6  2EE8               	decfsz	wreg,f,c
  1191   0008A8  D7FE               	bra	u597
  1192   0008AA  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1193   0008AC  D7FC               	bra	u597
  1194   0008AE                     l22:
  1195   0008AE  A283               	btfss	131,1,c	;volatile
  1196   0008B0  EF5C  F004         	goto	u101
  1197   0008B4  EF5E  F004         	goto	u100
  1198   0008B8                     u101:
  1199   0008B8  EF57  F004         	goto	l22
  1200   0008BC                     u100:
  1201   0008BC                     
  1202                           ;kbd4x4.c: 44:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1203   0008BC  0E4E               	movlw	78
  1204   0008BE  6E01               	movwf	??_Keypad_Get_Char^0,c
  1205   0008C0  0EEB               	movlw	235
  1206   0008C2                     u607:
  1207   0008C2  2EE8               	decfsz	wreg,f,c
  1208   0008C4  D7FE               	bra	u607
  1209   0008C6  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1210   0008C8  D7FC               	bra	u607
  1211   0008CA  0000               	nop	
  1212                           
  1213                           ;kbd4x4.c: 45:         return '3';
  1214   0008CC  0E33               	movlw	51
  1215   0008CE  EF16  F006         	goto	l16
  1216   0008D2                     l21:
  1217                           
  1218                           ;kbd4x4.c: 47:     if(PORTDbits.RD0 == 0){
  1219   0008D2  B083               	btfsc	131,0,c	;volatile
  1220   0008D4  EF6E  F004         	goto	u111
  1221   0008D8  EF70  F004         	goto	u110
  1222   0008DC                     u111:
  1223   0008DC  EF89  F004         	goto	l25
  1224   0008E0                     u110:
  1225   0008E0                     
  1226                           ;kbd4x4.c: 48:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1227   0008E0  0E20               	movlw	32
  1228   0008E2  6E01               	movwf	??_Keypad_Get_Char^0,c
  1229   0008E4  0E2A               	movlw	42
  1230   0008E6                     u617:
  1231   0008E6  2EE8               	decfsz	wreg,f,c
  1232   0008E8  D7FE               	bra	u617
  1233   0008EA  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1234   0008EC  D7FC               	bra	u617
  1235   0008EE                     l26:
  1236   0008EE  A083               	btfss	131,0,c	;volatile
  1237   0008F0  EF7C  F004         	goto	u121
  1238   0008F4  EF7E  F004         	goto	u120
  1239   0008F8                     u121:
  1240   0008F8  EF77  F004         	goto	l26
  1241   0008FC                     u120:
  1242   0008FC                     
  1243                           ;kbd4x4.c: 50:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1244   0008FC  0E4E               	movlw	78
  1245   0008FE  6E01               	movwf	??_Keypad_Get_Char^0,c
  1246   000900  0EEB               	movlw	235
  1247   000902                     u627:
  1248   000902  2EE8               	decfsz	wreg,f,c
  1249   000904  D7FE               	bra	u627
  1250   000906  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1251   000908  D7FC               	bra	u627
  1252   00090A  0000               	nop	
  1253                           
  1254                           ;kbd4x4.c: 51:         return 'A';
  1255   00090C  0E41               	movlw	65
  1256   00090E  EF16  F006         	goto	l16
  1257   000912                     l25:
  1258                           
  1259                           ;kbd4x4.c: 54:     PORTDbits.RD7 = 1;
  1260   000912  8E83               	bsf	131,7,c	;volatile
  1261                           
  1262                           ;kbd4x4.c: 55:     PORTDbits.RD6 = 0;
  1263   000914  9C83               	bcf	131,6,c	;volatile
  1264                           
  1265                           ;kbd4x4.c: 56:     PORTDbits.RD5 = 1;
  1266   000916  8A83               	bsf	131,5,c	;volatile
  1267                           
  1268                           ;kbd4x4.c: 57:     PORTDbits.RD4 = 1;
  1269   000918  8883               	bsf	131,4,c	;volatile
  1270                           
  1271                           ;kbd4x4.c: 58:     if(PORTDbits.RD3 == 0){
  1272   00091A  B683               	btfsc	131,3,c	;volatile
  1273   00091C  EF92  F004         	goto	u131
  1274   000920  EF94  F004         	goto	u130
  1275   000924                     u131:
  1276   000924  EFAD  F004         	goto	l29
  1277   000928                     u130:
  1278   000928                     
  1279                           ;kbd4x4.c: 59:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1280   000928  0E20               	movlw	32
  1281   00092A  6E01               	movwf	??_Keypad_Get_Char^0,c
  1282   00092C  0E2A               	movlw	42
  1283   00092E                     u637:
  1284   00092E  2EE8               	decfsz	wreg,f,c
  1285   000930  D7FE               	bra	u637
  1286   000932  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1287   000934  D7FC               	bra	u637
  1288   000936                     l30:
  1289   000936  A683               	btfss	131,3,c	;volatile
  1290   000938  EFA0  F004         	goto	u141
  1291   00093C  EFA2  F004         	goto	u140
  1292   000940                     u141:
  1293   000940  EF9B  F004         	goto	l30
  1294   000944                     u140:
  1295   000944                     
  1296                           ;kbd4x4.c: 61:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1297   000944  0E4E               	movlw	78
  1298   000946  6E01               	movwf	??_Keypad_Get_Char^0,c
  1299   000948  0EEB               	movlw	235
  1300   00094A                     u647:
  1301   00094A  2EE8               	decfsz	wreg,f,c
  1302   00094C  D7FE               	bra	u647
  1303   00094E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1304   000950  D7FC               	bra	u647
  1305   000952  0000               	nop	
  1306                           
  1307                           ;kbd4x4.c: 62:         return '4';
  1308   000954  0E34               	movlw	52
  1309   000956  EF16  F006         	goto	l16
  1310   00095A                     l29:
  1311                           
  1312                           ;kbd4x4.c: 64:     if(PORTDbits.RD2 == 0){
  1313   00095A  B483               	btfsc	131,2,c	;volatile
  1314   00095C  EFB2  F004         	goto	u151
  1315   000960  EFB4  F004         	goto	u150
  1316   000964                     u151:
  1317   000964  EFCD  F004         	goto	l33
  1318   000968                     u150:
  1319   000968                     
  1320                           ;kbd4x4.c: 65:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1321   000968  0E20               	movlw	32
  1322   00096A  6E01               	movwf	??_Keypad_Get_Char^0,c
  1323   00096C  0E2A               	movlw	42
  1324   00096E                     u657:
  1325   00096E  2EE8               	decfsz	wreg,f,c
  1326   000970  D7FE               	bra	u657
  1327   000972  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1328   000974  D7FC               	bra	u657
  1329   000976                     l34:
  1330   000976  A483               	btfss	131,2,c	;volatile
  1331   000978  EFC0  F004         	goto	u161
  1332   00097C  EFC2  F004         	goto	u160
  1333   000980                     u161:
  1334   000980  EFBB  F004         	goto	l34
  1335   000984                     u160:
  1336   000984                     
  1337                           ;kbd4x4.c: 67:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1338   000984  0E4E               	movlw	78
  1339   000986  6E01               	movwf	??_Keypad_Get_Char^0,c
  1340   000988  0EEB               	movlw	235
  1341   00098A                     u667:
  1342   00098A  2EE8               	decfsz	wreg,f,c
  1343   00098C  D7FE               	bra	u667
  1344   00098E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1345   000990  D7FC               	bra	u667
  1346   000992  0000               	nop	
  1347                           
  1348                           ;kbd4x4.c: 68:         return '5';
  1349   000994  0E35               	movlw	53
  1350   000996  EF16  F006         	goto	l16
  1351   00099A                     l33:
  1352                           
  1353                           ;kbd4x4.c: 70:     if(PORTDbits.RD1 == 0){
  1354   00099A  B283               	btfsc	131,1,c	;volatile
  1355   00099C  EFD2  F004         	goto	u171
  1356   0009A0  EFD4  F004         	goto	u170
  1357   0009A4                     u171:
  1358   0009A4  EFED  F004         	goto	l37
  1359   0009A8                     u170:
  1360   0009A8                     
  1361                           ;kbd4x4.c: 71:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1362   0009A8  0E20               	movlw	32
  1363   0009AA  6E01               	movwf	??_Keypad_Get_Char^0,c
  1364   0009AC  0E2A               	movlw	42
  1365   0009AE                     u677:
  1366   0009AE  2EE8               	decfsz	wreg,f,c
  1367   0009B0  D7FE               	bra	u677
  1368   0009B2  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1369   0009B4  D7FC               	bra	u677
  1370   0009B6                     l38:
  1371   0009B6  A283               	btfss	131,1,c	;volatile
  1372   0009B8  EFE0  F004         	goto	u181
  1373   0009BC  EFE2  F004         	goto	u180
  1374   0009C0                     u181:
  1375   0009C0  EFDB  F004         	goto	l38
  1376   0009C4                     u180:
  1377   0009C4                     
  1378                           ;kbd4x4.c: 73:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1379   0009C4  0E4E               	movlw	78
  1380   0009C6  6E01               	movwf	??_Keypad_Get_Char^0,c
  1381   0009C8  0EEB               	movlw	235
  1382   0009CA                     u687:
  1383   0009CA  2EE8               	decfsz	wreg,f,c
  1384   0009CC  D7FE               	bra	u687
  1385   0009CE  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1386   0009D0  D7FC               	bra	u687
  1387   0009D2  0000               	nop	
  1388                           
  1389                           ;kbd4x4.c: 74:         return '6';
  1390   0009D4  0E36               	movlw	54
  1391   0009D6  EF16  F006         	goto	l16
  1392   0009DA                     l37:
  1393                           
  1394                           ;kbd4x4.c: 76:     if(PORTDbits.RD0 == 0){
  1395   0009DA  B083               	btfsc	131,0,c	;volatile
  1396   0009DC  EFF2  F004         	goto	u191
  1397   0009E0  EFF4  F004         	goto	u190
  1398   0009E4                     u191:
  1399   0009E4  EF0D  F005         	goto	l41
  1400   0009E8                     u190:
  1401   0009E8                     
  1402                           ;kbd4x4.c: 77:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1403   0009E8  0E20               	movlw	32
  1404   0009EA  6E01               	movwf	??_Keypad_Get_Char^0,c
  1405   0009EC  0E2A               	movlw	42
  1406   0009EE                     u697:
  1407   0009EE  2EE8               	decfsz	wreg,f,c
  1408   0009F0  D7FE               	bra	u697
  1409   0009F2  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1410   0009F4  D7FC               	bra	u697
  1411   0009F6                     l42:
  1412   0009F6  A083               	btfss	131,0,c	;volatile
  1413   0009F8  EF00  F005         	goto	u201
  1414   0009FC  EF02  F005         	goto	u200
  1415   000A00                     u201:
  1416   000A00  EFFB  F004         	goto	l42
  1417   000A04                     u200:
  1418   000A04                     
  1419                           ;kbd4x4.c: 79:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1420   000A04  0E4E               	movlw	78
  1421   000A06  6E01               	movwf	??_Keypad_Get_Char^0,c
  1422   000A08  0EEB               	movlw	235
  1423   000A0A                     u707:
  1424   000A0A  2EE8               	decfsz	wreg,f,c
  1425   000A0C  D7FE               	bra	u707
  1426   000A0E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1427   000A10  D7FC               	bra	u707
  1428   000A12  0000               	nop	
  1429                           
  1430                           ;kbd4x4.c: 80:         return 'B';
  1431   000A14  0E42               	movlw	66
  1432   000A16  EF16  F006         	goto	l16
  1433   000A1A                     l41:
  1434                           
  1435                           ;kbd4x4.c: 83:     PORTDbits.RD7 = 1;
  1436   000A1A  8E83               	bsf	131,7,c	;volatile
  1437                           
  1438                           ;kbd4x4.c: 84:     PORTDbits.RD6 = 1;
  1439   000A1C  8C83               	bsf	131,6,c	;volatile
  1440                           
  1441                           ;kbd4x4.c: 85:     PORTDbits.RD5 = 0;
  1442   000A1E  9A83               	bcf	131,5,c	;volatile
  1443                           
  1444                           ;kbd4x4.c: 86:     PORTDbits.RD4 = 1;
  1445   000A20  8883               	bsf	131,4,c	;volatile
  1446                           
  1447                           ;kbd4x4.c: 87:     if(PORTDbits.RD3 == 0){
  1448   000A22  B683               	btfsc	131,3,c	;volatile
  1449   000A24  EF16  F005         	goto	u211
  1450   000A28  EF18  F005         	goto	u210
  1451   000A2C                     u211:
  1452   000A2C  EF31  F005         	goto	l45
  1453   000A30                     u210:
  1454   000A30                     
  1455                           ;kbd4x4.c: 88:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1456   000A30  0E20               	movlw	32
  1457   000A32  6E01               	movwf	??_Keypad_Get_Char^0,c
  1458   000A34  0E2A               	movlw	42
  1459   000A36                     u717:
  1460   000A36  2EE8               	decfsz	wreg,f,c
  1461   000A38  D7FE               	bra	u717
  1462   000A3A  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1463   000A3C  D7FC               	bra	u717
  1464   000A3E                     l46:
  1465   000A3E  A683               	btfss	131,3,c	;volatile
  1466   000A40  EF24  F005         	goto	u221
  1467   000A44  EF26  F005         	goto	u220
  1468   000A48                     u221:
  1469   000A48  EF1F  F005         	goto	l46
  1470   000A4C                     u220:
  1471   000A4C                     
  1472                           ;kbd4x4.c: 90:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1473   000A4C  0E4E               	movlw	78
  1474   000A4E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1475   000A50  0EEB               	movlw	235
  1476   000A52                     u727:
  1477   000A52  2EE8               	decfsz	wreg,f,c
  1478   000A54  D7FE               	bra	u727
  1479   000A56  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1480   000A58  D7FC               	bra	u727
  1481   000A5A  0000               	nop	
  1482                           
  1483                           ;kbd4x4.c: 91:         return '7';
  1484   000A5C  0E37               	movlw	55
  1485   000A5E  EF16  F006         	goto	l16
  1486   000A62                     l45:
  1487                           
  1488                           ;kbd4x4.c: 93:     if(PORTDbits.RD2 == 0){
  1489   000A62  B483               	btfsc	131,2,c	;volatile
  1490   000A64  EF36  F005         	goto	u231
  1491   000A68  EF38  F005         	goto	u230
  1492   000A6C                     u231:
  1493   000A6C  EF51  F005         	goto	l49
  1494   000A70                     u230:
  1495   000A70                     
  1496                           ;kbd4x4.c: 94:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1497   000A70  0E20               	movlw	32
  1498   000A72  6E01               	movwf	??_Keypad_Get_Char^0,c
  1499   000A74  0E2A               	movlw	42
  1500   000A76                     u737:
  1501   000A76  2EE8               	decfsz	wreg,f,c
  1502   000A78  D7FE               	bra	u737
  1503   000A7A  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1504   000A7C  D7FC               	bra	u737
  1505   000A7E                     l50:
  1506   000A7E  A483               	btfss	131,2,c	;volatile
  1507   000A80  EF44  F005         	goto	u241
  1508   000A84  EF46  F005         	goto	u240
  1509   000A88                     u241:
  1510   000A88  EF3F  F005         	goto	l50
  1511   000A8C                     u240:
  1512   000A8C                     
  1513                           ;kbd4x4.c: 96:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1514   000A8C  0E4E               	movlw	78
  1515   000A8E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1516   000A90  0EEB               	movlw	235
  1517   000A92                     u747:
  1518   000A92  2EE8               	decfsz	wreg,f,c
  1519   000A94  D7FE               	bra	u747
  1520   000A96  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1521   000A98  D7FC               	bra	u747
  1522   000A9A  0000               	nop	
  1523                           
  1524                           ;kbd4x4.c: 97:         return '8';
  1525   000A9C  0E38               	movlw	56
  1526   000A9E  EF16  F006         	goto	l16
  1527   000AA2                     l49:
  1528                           
  1529                           ;kbd4x4.c: 99:     if(PORTDbits.RD1 == 0){
  1530   000AA2  B283               	btfsc	131,1,c	;volatile
  1531   000AA4  EF56  F005         	goto	u251
  1532   000AA8  EF58  F005         	goto	u250
  1533   000AAC                     u251:
  1534   000AAC  EF71  F005         	goto	l53
  1535   000AB0                     u250:
  1536   000AB0                     
  1537                           ;kbd4x4.c: 100:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1538   000AB0  0E20               	movlw	32
  1539   000AB2  6E01               	movwf	??_Keypad_Get_Char^0,c
  1540   000AB4  0E2A               	movlw	42
  1541   000AB6                     u757:
  1542   000AB6  2EE8               	decfsz	wreg,f,c
  1543   000AB8  D7FE               	bra	u757
  1544   000ABA  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1545   000ABC  D7FC               	bra	u757
  1546   000ABE                     l54:
  1547   000ABE  A283               	btfss	131,1,c	;volatile
  1548   000AC0  EF64  F005         	goto	u261
  1549   000AC4  EF66  F005         	goto	u260
  1550   000AC8                     u261:
  1551   000AC8  EF5F  F005         	goto	l54
  1552   000ACC                     u260:
  1553   000ACC                     
  1554                           ;kbd4x4.c: 102:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1555   000ACC  0E4E               	movlw	78
  1556   000ACE  6E01               	movwf	??_Keypad_Get_Char^0,c
  1557   000AD0  0EEB               	movlw	235
  1558   000AD2                     u767:
  1559   000AD2  2EE8               	decfsz	wreg,f,c
  1560   000AD4  D7FE               	bra	u767
  1561   000AD6  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1562   000AD8  D7FC               	bra	u767
  1563   000ADA  0000               	nop	
  1564                           
  1565                           ;kbd4x4.c: 103:         return '9';
  1566   000ADC  0E39               	movlw	57
  1567   000ADE  EF16  F006         	goto	l16
  1568   000AE2                     l53:
  1569                           
  1570                           ;kbd4x4.c: 105:     if(PORTDbits.RD0 == 0){
  1571   000AE2  B083               	btfsc	131,0,c	;volatile
  1572   000AE4  EF76  F005         	goto	u271
  1573   000AE8  EF78  F005         	goto	u270
  1574   000AEC                     u271:
  1575   000AEC  EF91  F005         	goto	l57
  1576   000AF0                     u270:
  1577   000AF0                     
  1578                           ;kbd4x4.c: 106:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1579   000AF0  0E20               	movlw	32
  1580   000AF2  6E01               	movwf	??_Keypad_Get_Char^0,c
  1581   000AF4  0E2A               	movlw	42
  1582   000AF6                     u777:
  1583   000AF6  2EE8               	decfsz	wreg,f,c
  1584   000AF8  D7FE               	bra	u777
  1585   000AFA  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1586   000AFC  D7FC               	bra	u777
  1587   000AFE                     l58:
  1588   000AFE  A083               	btfss	131,0,c	;volatile
  1589   000B00  EF84  F005         	goto	u281
  1590   000B04  EF86  F005         	goto	u280
  1591   000B08                     u281:
  1592   000B08  EF7F  F005         	goto	l58
  1593   000B0C                     u280:
  1594   000B0C                     
  1595                           ;kbd4x4.c: 108:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1596   000B0C  0E4E               	movlw	78
  1597   000B0E  6E01               	movwf	??_Keypad_Get_Char^0,c
  1598   000B10  0EEB               	movlw	235
  1599   000B12                     u787:
  1600   000B12  2EE8               	decfsz	wreg,f,c
  1601   000B14  D7FE               	bra	u787
  1602   000B16  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1603   000B18  D7FC               	bra	u787
  1604   000B1A  0000               	nop	
  1605                           
  1606                           ;kbd4x4.c: 109:         return 'C';
  1607   000B1C  0E43               	movlw	67
  1608   000B1E  EF16  F006         	goto	l16
  1609   000B22                     l57:
  1610                           
  1611                           ;kbd4x4.c: 112:     PORTDbits.RD7 = 1;
  1612   000B22  8E83               	bsf	131,7,c	;volatile
  1613                           
  1614                           ;kbd4x4.c: 113:     PORTDbits.RD6 = 1;
  1615   000B24  8C83               	bsf	131,6,c	;volatile
  1616                           
  1617                           ;kbd4x4.c: 114:     PORTDbits.RD5 = 1;
  1618   000B26  8A83               	bsf	131,5,c	;volatile
  1619                           
  1620                           ;kbd4x4.c: 115:     PORTDbits.RD4 = 0;
  1621   000B28  9883               	bcf	131,4,c	;volatile
  1622                           
  1623                           ;kbd4x4.c: 116:     if(PORTDbits.RD3 == 0){
  1624   000B2A  B683               	btfsc	131,3,c	;volatile
  1625   000B2C  EF9A  F005         	goto	u291
  1626   000B30  EF9C  F005         	goto	u290
  1627   000B34                     u291:
  1628   000B34  EFB5  F005         	goto	l61
  1629   000B38                     u290:
  1630   000B38                     
  1631                           ;kbd4x4.c: 117:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1632   000B38  0E20               	movlw	32
  1633   000B3A  6E01               	movwf	??_Keypad_Get_Char^0,c
  1634   000B3C  0E2A               	movlw	42
  1635   000B3E                     u797:
  1636   000B3E  2EE8               	decfsz	wreg,f,c
  1637   000B40  D7FE               	bra	u797
  1638   000B42  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1639   000B44  D7FC               	bra	u797
  1640   000B46                     l62:
  1641   000B46  A683               	btfss	131,3,c	;volatile
  1642   000B48  EFA8  F005         	goto	u301
  1643   000B4C  EFAA  F005         	goto	u300
  1644   000B50                     u301:
  1645   000B50  EFA3  F005         	goto	l62
  1646   000B54                     u300:
  1647   000B54                     
  1648                           ;kbd4x4.c: 119:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1649   000B54  0E4E               	movlw	78
  1650   000B56  6E01               	movwf	??_Keypad_Get_Char^0,c
  1651   000B58  0EEB               	movlw	235
  1652   000B5A                     u807:
  1653   000B5A  2EE8               	decfsz	wreg,f,c
  1654   000B5C  D7FE               	bra	u807
  1655   000B5E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1656   000B60  D7FC               	bra	u807
  1657   000B62  0000               	nop	
  1658                           
  1659                           ;kbd4x4.c: 120:         return '*';
  1660   000B64  0E2A               	movlw	42
  1661   000B66  EF16  F006         	goto	l16
  1662   000B6A                     l61:
  1663                           
  1664                           ;kbd4x4.c: 122:     if(PORTDbits.RD2 == 0){
  1665   000B6A  B483               	btfsc	131,2,c	;volatile
  1666   000B6C  EFBA  F005         	goto	u311
  1667   000B70  EFBC  F005         	goto	u310
  1668   000B74                     u311:
  1669   000B74  EFD5  F005         	goto	l65
  1670   000B78                     u310:
  1671   000B78                     
  1672                           ;kbd4x4.c: 123:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1673   000B78  0E20               	movlw	32
  1674   000B7A  6E01               	movwf	??_Keypad_Get_Char^0,c
  1675   000B7C  0E2A               	movlw	42
  1676   000B7E                     u817:
  1677   000B7E  2EE8               	decfsz	wreg,f,c
  1678   000B80  D7FE               	bra	u817
  1679   000B82  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1680   000B84  D7FC               	bra	u817
  1681   000B86                     l66:
  1682   000B86  A483               	btfss	131,2,c	;volatile
  1683   000B88  EFC8  F005         	goto	u321
  1684   000B8C  EFCA  F005         	goto	u320
  1685   000B90                     u321:
  1686   000B90  EFC3  F005         	goto	l66
  1687   000B94                     u320:
  1688   000B94                     
  1689                           ;kbd4x4.c: 125:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1690   000B94  0E4E               	movlw	78
  1691   000B96  6E01               	movwf	??_Keypad_Get_Char^0,c
  1692   000B98  0EEB               	movlw	235
  1693   000B9A                     u827:
  1694   000B9A  2EE8               	decfsz	wreg,f,c
  1695   000B9C  D7FE               	bra	u827
  1696   000B9E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1697   000BA0  D7FC               	bra	u827
  1698   000BA2  0000               	nop	
  1699                           
  1700                           ;kbd4x4.c: 126:         return '0';
  1701   000BA4  0E30               	movlw	48
  1702   000BA6  EF16  F006         	goto	l16
  1703   000BAA                     l65:
  1704                           
  1705                           ;kbd4x4.c: 128:     if(PORTDbits.RD1 == 0){
  1706   000BAA  B283               	btfsc	131,1,c	;volatile
  1707   000BAC  EFDA  F005         	goto	u331
  1708   000BB0  EFDC  F005         	goto	u330
  1709   000BB4                     u331:
  1710   000BB4  EFF5  F005         	goto	l69
  1711   000BB8                     u330:
  1712   000BB8                     
  1713                           ;kbd4x4.c: 129:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1714   000BB8  0E20               	movlw	32
  1715   000BBA  6E01               	movwf	??_Keypad_Get_Char^0,c
  1716   000BBC  0E2A               	movlw	42
  1717   000BBE                     u837:
  1718   000BBE  2EE8               	decfsz	wreg,f,c
  1719   000BC0  D7FE               	bra	u837
  1720   000BC2  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1721   000BC4  D7FC               	bra	u837
  1722   000BC6                     l70:
  1723   000BC6  A283               	btfss	131,1,c	;volatile
  1724   000BC8  EFE8  F005         	goto	u341
  1725   000BCC  EFEA  F005         	goto	u340
  1726   000BD0                     u341:
  1727   000BD0  EFE3  F005         	goto	l70
  1728   000BD4                     u340:
  1729   000BD4                     
  1730                           ;kbd4x4.c: 131:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1731   000BD4  0E4E               	movlw	78
  1732   000BD6  6E01               	movwf	??_Keypad_Get_Char^0,c
  1733   000BD8  0EEB               	movlw	235
  1734   000BDA                     u847:
  1735   000BDA  2EE8               	decfsz	wreg,f,c
  1736   000BDC  D7FE               	bra	u847
  1737   000BDE  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1738   000BE0  D7FC               	bra	u847
  1739   000BE2  0000               	nop	
  1740                           
  1741                           ;kbd4x4.c: 132:         return '#';
  1742   000BE4  0E23               	movlw	35
  1743   000BE6  EF16  F006         	goto	l16
  1744   000BEA                     l69:
  1745                           
  1746                           ;kbd4x4.c: 134:     if(PORTDbits.RD0 == 0){
  1747   000BEA  B083               	btfsc	131,0,c	;volatile
  1748   000BEC  EFFA  F005         	goto	u351
  1749   000BF0  EFFC  F005         	goto	u350
  1750   000BF4                     u351:
  1751   000BF4  EF15  F006         	goto	l990
  1752   000BF8                     u350:
  1753   000BF8                     
  1754                           ;kbd4x4.c: 135:         _delay((unsigned long)((2)*(48000000/4000.0)));
  1755   000BF8  0E20               	movlw	32
  1756   000BFA  6E01               	movwf	??_Keypad_Get_Char^0,c
  1757   000BFC  0E2A               	movlw	42
  1758   000BFE                     u857:
  1759   000BFE  2EE8               	decfsz	wreg,f,c
  1760   000C00  D7FE               	bra	u857
  1761   000C02  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1762   000C04  D7FC               	bra	u857
  1763   000C06                     l74:
  1764   000C06  A083               	btfss	131,0,c	;volatile
  1765   000C08  EF08  F006         	goto	u361
  1766   000C0C  EF0A  F006         	goto	u360
  1767   000C10                     u361:
  1768   000C10  EF03  F006         	goto	l74
  1769   000C14                     u360:
  1770   000C14                     
  1771                           ;kbd4x4.c: 137:         _delay((unsigned long)((5)*(48000000/4000.0)));
  1772   000C14  0E4E               	movlw	78
  1773   000C16  6E01               	movwf	??_Keypad_Get_Char^0,c
  1774   000C18  0EEB               	movlw	235
  1775   000C1A                     u867:
  1776   000C1A  2EE8               	decfsz	wreg,f,c
  1777   000C1C  D7FE               	bra	u867
  1778   000C1E  2E01               	decfsz	??_Keypad_Get_Char^0,f,c
  1779   000C20  D7FC               	bra	u867
  1780   000C22  0000               	nop	
  1781                           
  1782                           ;kbd4x4.c: 138:         return 'D';
  1783   000C24  0E44               	movlw	68
  1784   000C26  EF16  F006         	goto	l16
  1785   000C2A                     l990:
  1786                           
  1787                           ;kbd4x4.c: 140:     return 0;
  1788   000C2A  0E00               	movlw	0
  1789   000C2C                     l16:
  1790   000C2C  0012               	return		;funcret
  1791   000C2E                     __end_of_Keypad_Get_Char:
  1792                           	callstack 0
  1793                           
  1794                           	psect	rparam
  1795   000000                     
  1796                           	psect	idloc
  1797                           
  1798                           ;Config register IDLOC0 @ 0x200000
  1799                           ;	unspecified, using default values
  1800   200000                     	org	2097152
  1801   200000  FF                 	db	255
  1802                           
  1803                           ;Config register IDLOC1 @ 0x200001
  1804                           ;	unspecified, using default values
  1805   200001                     	org	2097153
  1806   200001  FF                 	db	255
  1807                           
  1808                           ;Config register IDLOC2 @ 0x200002
  1809                           ;	unspecified, using default values
  1810   200002                     	org	2097154
  1811   200002  FF                 	db	255
  1812                           
  1813                           ;Config register IDLOC3 @ 0x200003
  1814                           ;	unspecified, using default values
  1815   200003                     	org	2097155
  1816   200003  FF                 	db	255
  1817                           
  1818                           ;Config register IDLOC4 @ 0x200004
  1819                           ;	unspecified, using default values
  1820   200004                     	org	2097156
  1821   200004  FF                 	db	255
  1822                           
  1823                           ;Config register IDLOC5 @ 0x200005
  1824                           ;	unspecified, using default values
  1825   200005                     	org	2097157
  1826   200005  FF                 	db	255
  1827                           
  1828                           ;Config register IDLOC6 @ 0x200006
  1829                           ;	unspecified, using default values
  1830   200006                     	org	2097158
  1831   200006  FF                 	db	255
  1832                           
  1833                           ;Config register IDLOC7 @ 0x200007
  1834                           ;	unspecified, using default values
  1835   200007                     	org	2097159
  1836   200007  FF                 	db	255
  1837                           
  1838                           	psect	config
  1839                           
  1840                           ;Config register CONFIG1L @ 0x300000
  1841                           ;	PLL Prescaler Selection bits
  1842                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1843                           ;	System Clock Postscaler Selection bits
  1844                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1845                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1846                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1847   300000                     	org	3145728
  1848   300000  21                 	db	33
  1849                           
  1850                           ;Config register CONFIG1H @ 0x300001
  1851                           ;	Oscillator Selection bits
  1852                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  1853                           ;	Fail-Safe Clock Monitor Enable bit
  1854                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1855                           ;	Internal/External Oscillator Switchover bit
  1856                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1857   300001                     	org	3145729
  1858   300001  0E                 	db	14
  1859                           
  1860                           ;Config register CONFIG2L @ 0x300002
  1861                           ;	Power-up Timer Enable bit
  1862                           ;	PWRT = OFF, PWRT disabled
  1863                           ;	Brown-out Reset Enable bits
  1864                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1865                           ;	Brown-out Reset Voltage bits
  1866                           ;	BORV = 3, Minimum setting 2.05V
  1867                           ;	USB Voltage Regulator Enable bit
  1868                           ;	VREGEN = OFF, USB voltage regulator disabled
  1869   300002                     	org	3145730
  1870   300002  19                 	db	25
  1871                           
  1872                           ;Config register CONFIG2H @ 0x300003
  1873                           ;	Watchdog Timer Enable bit
  1874                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1875                           ;	Watchdog Timer Postscale Select bits
  1876                           ;	WDTPS = 32768, 1:32768
  1877   300003                     	org	3145731
  1878   300003  1E                 	db	30
  1879                           
  1880                           ; Padding undefined space
  1881   300004                     	org	3145732
  1882   300004  FF                 	db	255
  1883                           
  1884                           ;Config register CONFIG3H @ 0x300005
  1885                           ;	CCP2 MUX bit
  1886                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1887                           ;	PORTB A/D Enable bit
  1888                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1889                           ;	Low-Power Timer 1 Oscillator Enable bit
  1890                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1891                           ;	MCLR Pin Enable bit
  1892                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1893   300005                     	org	3145733
  1894   300005  81                 	db	129
  1895                           
  1896                           ;Config register CONFIG4L @ 0x300006
  1897                           ;	Stack Full/Underflow Reset Enable bit
  1898                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1899                           ;	Single-Supply ICSP Enable bit
  1900                           ;	LVP = OFF, Single-Supply ICSP disabled
  1901                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1902                           ;	ICPRT = OFF, ICPORT disabled
  1903                           ;	Extended Instruction Set Enable bit
  1904                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1905                           ;	Background Debugger Enable bit
  1906                           ;	DEBUG = 0x1, unprogrammed default
  1907   300006                     	org	3145734
  1908   300006  81                 	db	129
  1909                           
  1910                           ; Padding undefined space
  1911   300007                     	org	3145735
  1912   300007  FF                 	db	255
  1913                           
  1914                           ;Config register CONFIG5L @ 0x300008
  1915                           ;	Code Protection bit
  1916                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1917                           ;	Code Protection bit
  1918                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1919                           ;	Code Protection bit
  1920                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1921                           ;	Code Protection bit
  1922                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1923   300008                     	org	3145736
  1924   300008  0F                 	db	15
  1925                           
  1926                           ;Config register CONFIG5H @ 0x300009
  1927                           ;	Boot Block Code Protection bit
  1928                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1929                           ;	Data EEPROM Code Protection bit
  1930                           ;	CPD = OFF, Data EEPROM is not code-protected
  1931   300009                     	org	3145737
  1932   300009  C0                 	db	192
  1933                           
  1934                           ;Config register CONFIG6L @ 0x30000A
  1935                           ;	Write Protection bit
  1936                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1937                           ;	Write Protection bit
  1938                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1939                           ;	Write Protection bit
  1940                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1941                           ;	Write Protection bit
  1942                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1943   30000A                     	org	3145738
  1944   30000A  0F                 	db	15
  1945                           
  1946                           ;Config register CONFIG6H @ 0x30000B
  1947                           ;	Configuration Register Write Protection bit
  1948                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1949                           ;	Boot Block Write Protection bit
  1950                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1951                           ;	Data EEPROM Write Protection bit
  1952                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1953   30000B                     	org	3145739
  1954   30000B  E0                 	db	224
  1955                           
  1956                           ;Config register CONFIG7L @ 0x30000C
  1957                           ;	Table Read Protection bit
  1958                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1959                           ;	Table Read Protection bit
  1960                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1961                           ;	Table Read Protection bit
  1962                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1963                           ;	Table Read Protection bit
  1964                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1965   30000C                     	org	3145740
  1966   30000C  0F                 	db	15
  1967                           
  1968                           ;Config register CONFIG7H @ 0x30000D
  1969                           ;	Boot Block Table Read Protection bit
  1970                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1971   30000D                     	org	3145741
  1972   30000D  40                 	db	64
  1973                           tosu	equ	0xFFF
  1974                           tosh	equ	0xFFE
  1975                           tosl	equ	0xFFD
  1976                           stkptr	equ	0xFFC
  1977                           pclatu	equ	0xFFB
  1978                           pclath	equ	0xFFA
  1979                           pcl	equ	0xFF9
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           prodh	equ	0xFF4
  1985                           prodl	equ	0xFF3
  1986                           indf0	equ	0xFEF
  1987                           postinc0	equ	0xFEE
  1988                           postdec0	equ	0xFED
  1989                           preinc0	equ	0xFEC
  1990                           plusw0	equ	0xFEB
  1991                           fsr0h	equ	0xFEA
  1992                           fsr0l	equ	0xFE9
  1993                           wreg	equ	0xFE8
  1994                           indf1	equ	0xFE7
  1995                           postinc1	equ	0xFE6
  1996                           postdec1	equ	0xFE5
  1997                           preinc1	equ	0xFE4
  1998                           plusw1	equ	0xFE3
  1999                           fsr1h	equ	0xFE2
  2000                           fsr1l	equ	0xFE1
  2001                           bsr	equ	0xFE0
  2002                           indf2	equ	0xFDF
  2003                           postinc2	equ	0xFDE
  2004                           postdec2	equ	0xFDD
  2005                           preinc2	equ	0xFDC
  2006                           plusw2	equ	0xFDB
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8

Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      8       9
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), STR_2(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1459
                    _Keypad_Get_Char
                        _Keypad_Init
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     3      1     362
                                              4 COMRAM     4     3      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     767
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     210
                                              3 COMRAM     2     2      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Get_Char                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keypad_Get_Char
   _Keypad_Init
   _Lcd_Init
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      8       9       1        9.5%
BITBIGSFRhh         3E      0       0      21        0.0%
BITBIGSFRhl         2B      0       0      22        0.0%
BITBIGSFRll         23      0       0      26        0.0%
BITBIGSFRlhhl        8      0       0      24        0.0%
BITBIGSFRlhl         6      0       0      25        0.0%
BITBIGSFRlhhh        1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       9       3        0.0%
DATA                 0      0       9       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Apr 13 10:11:18 2024

                       l9 0EE2                        l12 0852                        l21 08D2  
                      l13 082E                        l30 0936                        l22 08AE  
                      l16 0C2C                        l41 0A1A                        l33 099A  
                      l25 0912                        l17 0892                        l50 0A7E  
                      l42 09F6                        l34 0976                        l26 08EE  
                      l18 086E                        l61 0B6A                        l53 0AE2  
                      l45 0A62                        l37 09DA                        l29 095A  
                      l70 0BC6                        l62 0B46                        l54 0ABE  
                      l46 0A3E                        l38 09B6                        l65 0BAA  
                      l57 0B22                        l49 0AA2                        l74 0C06  
                      l66 0B86                        l58 0AFE                        l90 0DB8  
                      l69 0BEA                        l94 0DCE                        l86 0DA2  
                      l98 0DE4                        u10 0D9C                        u11 0D98  
                      u20 0DB2                        u21 0DAE                        u30 0DC8  
                      u31 0DC4                        u40 0DDE                        u41 0DDA  
                      u50 0820                        u51 081C                        u60 083C  
                      u61 0838                        u70 0860                        u71 085C  
                      u80 087C                        u81 0878                        u90 08A0  
                      u91 089C                       l101 0DE6                       l104 0ED0  
                     l120 0D8A                       l113 0CFE                       l107 0F00  
                     l123 0EB0                       l117 0CFE                       l129 0E7C  
                     l900 0860                       l902 087C                       l920 0944  
                     l912 08E0                       l930 09A8                       l914 08FC  
                     l906 08A0                       l850 0DBA                       l842 0D8E  
                     l932 09C4                       l924 0968                       l908 08BC  
                     l852 0DC8                       l844 0D9C                       l860 0EB6  
                     l950 0A8C                       l942 0A30                       l926 0984  
                     l918 0928                       l854 0DD0                       l846 0DA4  
                     l862 0EBC                       l870 0E80                       l960 0AF0  
                     l944 0A4C                       l936 09E8                       l856 0DDE  
                     l848 0DB2                       l864 0EBE                       l880 0E9E  
                     l872 0E8C                       l962 0B0C                       l954 0AB0  
                     l938 0A04                       l890 0ED2                       l866 0ECE  
                     l858 0EB4                       l882 0EA0                       l874 0E8E  
                     l980 0BD4                       l972 0B78                       l956 0ACC  
                     l948 0A70                       l892 080A                       l868 0EF4  
                     l884 0EA6                       l876 0E96                       l990 0C2A  
                     l974 0B94                       l966 0B38                       l894 0820  
                     l886 0EA8                       l878 0E98                       l984 0BF8  
                     l968 0B54                       l896 083C                       l888 0EAE  
                     l986 0C14                       l978 0BB8                       u100 08BC  
                     u101 08B8                       u110 08E0                       u111 08DC  
                     u200 0A04                       u120 08FC                       u201 0A00  
                     u121 08F8                       u210 0A30                       u130 0928  
                     u211 0A2C                       u131 0924                       u300 0B54  
                     u220 0A4C                       u140 0944                       u301 0B50  
                     u221 0A48                       u141 0940                       u310 0B78  
                     u230 0A70                       u150 0968                       u311 0B74  
                     u231 0A6C                       u151 0964                       u320 0B94  
                     u240 0A8C                       u160 0984                       u321 0B90  
                     u241 0A88                       u161 0980                       u330 0BB8  
                     u250 0AB0                       u170 09A8                       u331 0BB4  
                     u251 0AAC                       u171 09A4                       u340 0BD4  
                     u260 0ACC                       u180 09C4                       u341 0BD0  
                     u261 0AC8                       u181 09C0                       u350 0BF8  
                     u270 0AF0                       u190 09E8                       u430 0C40  
                     u351 0BF4                       u271 0AEC                       u191 09E4  
                     u431 0C3C                       u360 0C14                       u280 0B0C  
                     u440 0C74                       u361 0C10                       u281 0B08  
                     u441 0C70                       u290 0B38                       u450 0CA8  
                     u291 0B34                       u451 0CA4                       u507 0EAA  
                     u460 0CDC                       u517 0D1C                       u461 0CD8  
                     u470 0E7C                       u607 08C2                       u527 0D36  
                     u471 0E78                       u480 0E1C                       u617 08E6  
                     u537 0D4C                       u481 0E18                       u707 0A0A  
                     u627 0902                       u547 0EC4                       u717 0A36  
                     u637 092E                       u557 0826                       u807 0B5A  
                     u727 0A52                       u647 094A                       u567 0842  
                     u817 0B7E                       u737 0A76                       u657 096E  
                     u577 0866                       u497 0E9A                       u827 0B9A  
                     u747 0A92                       u667 098A                       u587 0882  
                     u837 0BBE                       u757 0AB6                       u677 09AE  
                     u597 08A6                       u847 0BDA                       u767 0AD2  
                     u687 09CA                       u857 0BFE                       u777 0AF6  
                     u697 09EE                       u867 0C1A                       u787 0B12  
                     u797 0B3E                       wreg 0FE8                      l1100 0C62  
                    l1030 0D12                      l1110 0CA8                      l1102 0C74  
                    l1040 0D56                      l1032 0D2A                      l1120 0CEE  
                    l1112 0CBA                      l1104 0C86                      l1050 0D74  
                    l1042 0D5C                      l1034 0D30                      l1026 0D00  
                    l1122 0CF4                      l1114 0CC0                      l1106 0C8C  
                    l1130 0E5E                      l1052 0D7A                      l1044 0D62  
                    l1036 0D40                      l1028 0D0C                      l1116 0CCA  
                    l1108 0C96                      l1124 0E3C                      l1140 0E06  
                    l1132 0DE8                      l1054 0D80                      l1046 0D68  
                    l1038 0D46                      l1118 0CDC                      l1126 0E48  
                    l1142 0E0C                      l1134 0DEC                      l1056 0D86  
                    l1048 0D6E                      l1128 0E5A                      l1144 0E1C  
                    l1136 0DF4                      l1146 0E26                      l1138 0DFE  
                    l1092 0C30                      l1148 0E2E                      l1094 0C40  
                    l1096 0C52                      l1098 0C58                      STR_1 0801  
                    STR_2 0801         ?_Lcd_Write_String 0005                      _main 0DE8  
                    start 0000        ??_Lcd_Write_String 0006           __end_of_Lcd_Cmd 0ED2  
            ___param_bank 0000                     ?_main 0001             ??_Keypad_Init 0001  
                   _tecla 0009                     tablat 0FF5                     status 0FD8  
        __end_of_Lcd_Init 0D8C          __end_of_Lcd_Port 0DE8           __initialization 0EE4  
            __end_of_main 0E3C                    ??_main 0009             __activetblptr 0001  
     __end_of_Keypad_Init 0EE4                 ??_Lcd_Cmd 0002                    isa$std 0001  
            __mediumconst 0000                    tblptrh 0FF7                    tblptrl 0FF6  
                  tblptru 0FF8           Lcd_Set_Cursor@a 0005           Lcd_Set_Cursor@b 0004  
         Lcd_Set_Cursor@y 0007           Lcd_Set_Cursor@z 0006                __accesstop 0060  
 __end_of__initialization 0EE6         __end_of_Lcd_Clear 0F02             ___rparam_used 0001  
          __pcstackCOMRAM 0001            _Lcd_Set_Cursor 0C2E               _Keypad_Init 0ED2  
               ?_Lcd_Init 0001                 ?_Lcd_Port 0001    __end_of_Lcd_Set_Cursor 0D00  
              ??_Lcd_Init 0004                ??_Lcd_Port 0001            _Lcd_Write_Char 0E7E  
                 _Lcd_Cmd 0EB2                   __Hparam 0000                   __Lparam 0000  
            __psmallconst 0800                   __pcinit 0EE4                   __ramtop 0800  
         ?_Lcd_Set_Cursor 0004                   __ptext0 0DE8                   __ptext1 0E3C  
                 __ptext2 0E7E                   __ptext3 0C2E                   __ptext4 0D00  
                 __ptext5 0EF4                   __ptext6 0EB2                   __ptext7 0D8C  
                 __ptext8 0ED2                   __ptext9 080A    __end_of_Lcd_Write_Char 0EB2  
    end_of_initialization 0EE6         ??_Keypad_Get_Char 0001                 Lcd_Port@a 0001  
               _PORTDbits 0F83                 _TRISBbits 0F93                 _TRISDbits 0F95  
         ?_Lcd_Write_Char 0001         Lcd_Write_String@a 0005         Lcd_Write_String@i 0007  
               _Lcd_Clear 0EF4          _Lcd_Write_String 0E3C              ?_Keypad_Init 0001  
     start_initialization 0EE4                ?_Lcd_Clear 0001           Lcd_Write_Char@a 0004  
         Lcd_Write_Char@y 0003               __pbssCOMRAM 0009                  ?_Lcd_Cmd 0001  
        ??_Lcd_Set_Cursor 0005               __smallconst 0800           _Keypad_Get_Char 080A  
                _LATBbits 0F8A                  Lcd_Cmd@a 0003               ??_Lcd_Clear 0004  
              _ADCON1bits 0FC1          ??_Lcd_Write_Char 0002                  _Lcd_Init 0D00  
                _Lcd_Port 0D8C  __end_of_Lcd_Write_String 0E7E                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800   __end_of_Keypad_Get_Char 0C2E  
                isa$xinst 0000        Lcd_Write_Char@temp 0002          ?_Keypad_Get_Char 0001  
      Lcd_Set_Cursor@temp 0008  
