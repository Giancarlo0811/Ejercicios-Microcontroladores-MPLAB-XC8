

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Apr 19 10:06:55 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27   000000                     
    28                           ; Generated 23/03/2023 GMT
    29                           ; 
    30                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     _RCREG	set	4014
    63   000000                     _TXREG	set	4013
    64   000000                     _SPBRG	set	4015
    65   000000                     _BAUDCON	set	4024
    66   000000                     _ADCON0bits	set	4034
    67   000000                     _RCSTAbits	set	4011
    68   000000                     _TXSTAbits	set	4012
    69   000000                     _BAUDCONbits	set	4024
    70   000000                     _TRISCbits	set	3988
    71   000000                     _PIR1bits	set	3998
    72   000000                     _RCSTA	set	4011
    73   000000                     _TXSTA	set	4012
    74   000000                     _ADCON2	set	4032
    75   000000                     _ADCON1	set	4033
    76   000000                     _SPBRGH	set	4016
    77   000000                     _ADRES	set	4035
    78   000000                     _ADCON0	set	4034
    79                           
    80                           	psect	smallconst
    81   000800                     __psmallconst:
    82                           	callstack 0
    83   000800  00                 	db	0
    84   000801                     STR_1:
    85   000801  41                 	db	65	;'A'
    86   000802  44                 	db	68	;'D'
    87   000803  43                 	db	67	;'C'
    88   000804  20                 	db	32
    89   000805  43                 	db	67	;'C'
    90   000806  48                 	db	72	;'H'
    91   000807  30                 	db	48	;'0'
    92   000808  3A                 	db	58	;':'
    93   000809  20                 	db	32
    94   00080A  25                 	db	37
    95   00080B  75                 	db	117	;'u'
    96   00080C  2C                 	db	44
    97   00080D  20                 	db	32
    98   00080E  41                 	db	65	;'A'
    99   00080F  44                 	db	68	;'D'
   100   000810  43                 	db	67	;'C'
   101   000811  20                 	db	32
   102   000812  43                 	db	67	;'C'
   103   000813  48                 	db	72	;'H'
   104   000814  31                 	db	49	;'1'
   105   000815  3A                 	db	58	;':'
   106   000816  20                 	db	32
   107   000817  25                 	db	37
   108   000818  75                 	db	117	;'u'
   109   000819  0D                 	db	13
   110   00081A  0A                 	db	10
   111   00081B  00                 	db	0
   112   00081C  00                 	db	0	; dummy byte at the end
   113   000000                     
   114                           ; #config settings
   115                           
   116                           	psect	cinit
   117   000D8C                     __pcinit:
   118                           	callstack 0
   119   000D8C                     start_initialization:
   120                           	callstack 0
   121   000D8C                     __initialization:
   122                           	callstack 0
   123                           
   124                           ; Clear objects allocated to BANK0 (32 bytes)
   125   000D8C  EE00  F060         	lfsr	0,__pbssBANK0
   126   000D90  0E20               	movlw	32
   127   000D92                     clear_0:
   128   000D92  6AEE               	clrf	postinc0,c
   129   000D94  06E8               	decf	wreg,f,c
   130   000D96  E1FD               	bnz	clear_0
   131                           
   132                           ; Clear objects allocated to COMRAM (35 bytes)
   133   000D98  EE00  F031         	lfsr	0,__pbssCOMRAM
   134   000D9C  0E23               	movlw	35
   135   000D9E                     clear_1:
   136   000D9E  6AEE               	clrf	postinc0,c
   137   000DA0  06E8               	decf	wreg,f,c
   138   000DA2  E1FD               	bnz	clear_1
   139   000DA4                     end_of_initialization:
   140                           	callstack 0
   141   000DA4                     __end_of__initialization:
   142                           	callstack 0
   143   000DA4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144   000DA6  6EF8               	movwf	tblptru,c
   145   000DA8  0100               	movlb	0
   146   000DAA  EF75  F005         	goto	_main	;jump to C main() function
   147                           
   148                           	psect	bssCOMRAM
   149   000031                     __pbssCOMRAM:
   150                           	callstack 0
   151   000031                     _width:
   152                           	callstack 0
   153   000031                     	ds	2
   154   000033                     _prec:
   155                           	callstack 0
   156   000033                     	ds	2
   157   000035                     _flags:
   158                           	callstack 0
   159   000035                     	ds	1
   160   000036                     _buffer:
   161                           	callstack 0
   162   000036                     	ds	30
   163                           
   164                           	psect	bssBANK0
   165   000060                     __pbssBANK0:
   166                           	callstack 0
   167   000060                     _dbuf:
   168                           	callstack 0
   169   000060                     	ds	32
   170                           
   171                           	psect	cstackCOMRAM
   172   000001                     __pcstackCOMRAM:
   173                           	callstack 0
   174   000001                     ?_ADC_Read:
   175                           	callstack 0
   176   000001                     ?___lwdiv:
   177                           	callstack 0
   178   000001                     ?___lwmod:
   179                           	callstack 0
   180   000001                     ?___lldiv:
   181                           	callstack 0
   182   000001                     Uart_Send_Char@txData:
   183                           	callstack 0
   184   000001                     ADC_Init@p_ang:
   185                           	callstack 0
   186   000001                     ___lwdiv@dividend:
   187                           	callstack 0
   188   000001                     ___lwmod@dividend:
   189                           	callstack 0
   190   000001                     fputc@c:
   191                           	callstack 0
   192   000001                     ___lldiv@dividend:
   193                           	callstack 0
   194                           
   195                           ; 4 bytes @ 0x0
   196   000001                     	ds	1
   197   000002                     Uart_Send_String@info:
   198                           	callstack 0
   199                           
   200                           ; 1 bytes @ 0x1
   201   000002                     	ds	1
   202   000003                     ADC_Read@ch:
   203                           	callstack 0
   204   000003                     fputc@fp:
   205                           	callstack 0
   206   000003                     ___lwdiv@divisor:
   207                           	callstack 0
   208   000003                     ___lwmod@divisor:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x2
   212   000003                     	ds	1
   213   000004                     ??_fputc:
   214                           
   215                           ; 1 bytes @ 0x3
   216   000004                     	ds	1
   217   000005                     ___lwmod@counter:
   218                           	callstack 0
   219   000005                     ___lwdiv@quotient:
   220                           	callstack 0
   221   000005                     ___lldiv@divisor:
   222                           	callstack 0
   223                           
   224                           ; 4 bytes @ 0x4
   225   000005                     	ds	2
   226   000007                     ___lwdiv@counter:
   227                           	callstack 0
   228                           
   229                           ; 1 bytes @ 0x6
   230   000007                     	ds	2
   231   000009                     vfpfcnvrt@fp:
   232                           	callstack 0
   233   000009                     ___lldiv@quotient:
   234                           	callstack 0
   235                           
   236                           ; 4 bytes @ 0x8
   237   000009                     	ds	1
   238   00000A                     vfpfcnvrt@fmt:
   239                           	callstack 0
   240                           
   241                           ; 1 bytes @ 0x9
   242   00000A                     	ds	1
   243   00000B                     vfpfcnvrt@ap:
   244                           	callstack 0
   245                           
   246                           ; 1 bytes @ 0xA
   247   00000B                     	ds	1
   248   00000C                     ??_vfpfcnvrt:
   249                           
   250                           ; 1 bytes @ 0xB
   251   00000C                     	ds	1
   252   00000D                     ___lldiv@counter:
   253                           	callstack 0
   254                           
   255                           ; 1 bytes @ 0xC
   256   00000D                     	ds	1
   257   00000E                     Uart_Init@baud:
   258                           	callstack 0
   259   00000E                     vfpfcnvrt@convarg:
   260                           	callstack 0
   261                           
   262                           ; 4 bytes @ 0xD
   263   00000E                     	ds	4
   264   000012                     ??_Uart_Init:
   265   000012                     vfpfcnvrt@cp:
   266                           	callstack 0
   267                           
   268                           ; 1 bytes @ 0x11
   269   000012                     	ds	1
   270   000013                     vfpfcnvrt@c:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x12
   274   000013                     	ds	1
   275   000014                     ?_vfprintf:
   276                           	callstack 0
   277   000014                     vfprintf@fp:
   278                           	callstack 0
   279                           
   280                           ; 1 bytes @ 0x13
   281   000014                     	ds	1
   282   000015                     vfprintf@fmt:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x14
   286   000015                     	ds	1
   287   000016                     vfprintf@ap:
   288                           	callstack 0
   289   000016                     Uart_Init@vx:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x15
   293   000016                     	ds	1
   294   000017                     vfprintf@cfmt:
   295                           	callstack 0
   296                           
   297                           ; 1 bytes @ 0x16
   298   000017                     	ds	1
   299   000018                     ?_sprintf:
   300                           	callstack 0
   301   000018                     sprintf@s:
   302                           	callstack 0
   303                           
   304                           ; 1 bytes @ 0x17
   305   000018                     	ds	1
   306   000019                     sprintf@fmt:
   307                           	callstack 0
   308                           
   309                           ; 1 bytes @ 0x18
   310   000019                     	ds	5
   311   00001E                     sprintf@ap:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x1D
   315   00001E                     	ds	1
   316   00001F                     sprintf@f:
   317                           	callstack 0
   318                           
   319                           ; 12 bytes @ 0x1E
   320   00001F                     	ds	12
   321   00002B                     ??_main:
   322                           
   323                           ; 1 bytes @ 0x2A
   324   00002B                     	ds	2
   325   00002D                     main@valor_ch0:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x2C
   329   00002D                     	ds	2
   330   00002F                     main@valor_ch1:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x2E
   334   00002F                     	ds	2
   335                           
   336 ;;
   337 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   338 ;;
   339 ;; *************** function _main *****************
   340 ;; Defined at:
   341 ;;		line 25 in file "uart_tx_datos.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;  valor_ch1       2   46[COMRAM] int 
   346 ;;  valor_ch0       2   44[COMRAM] int 
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : 0/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   356 ;;      Params:         0       0       0       0       0       0       0       0       0
   357 ;;      Locals:         4       0       0       0       0       0       0       0       0
   358 ;;      Temps:          2       0       0       0       0       0       0       0       0
   359 ;;      Totals:         6       0       0       0       0       0       0       0       0
   360 ;;Total ram usage:        6 bytes
   361 ;; Hardware stack levels required when called: 5
   362 ;; This function calls:
   363 ;;		_ADC_Init
   364 ;;		_ADC_Read
   365 ;;		_Uart_Init
   366 ;;		_Uart_Send_String
   367 ;;		_sprintf
   368 ;; This function is called by:
   369 ;;		Startup code after reset
   370 ;; This function uses a non-reentrant model
   371 ;;
   372                           
   373                           	psect	text0
   374   000AEA                     __ptext0:
   375                           	callstack 0
   376   000AEA                     _main:
   377                           	callstack 26
   378   000AEA                     
   379                           ;uart_tx_datos.c: 26:     ADC_Init(0x0D);
   380   000AEA  0E0D               	movlw	13
   381   000AEC  ECE2  F006         	call	_ADC_Init
   382   000AF0                     
   383                           ;uart_tx_datos.c: 27:     Uart_Init(9600);
   384   000AF0  0E80               	movlw	128
   385   000AF2  6E0E               	movwf	Uart_Init@baud^0,c
   386   000AF4  0E25               	movlw	37
   387   000AF6  6E0F               	movwf	(Uart_Init@baud+1)^0,c
   388   000AF8  0E00               	movlw	0
   389   000AFA  6E10               	movwf	(Uart_Init@baud+2)^0,c
   390   000AFC  0E00               	movlw	0
   391   000AFE  6E11               	movwf	(Uart_Init@baud+3)^0,c
   392   000B00  ECEC  F005         	call	_Uart_Init	;wreg free
   393   000B04                     l1319:
   394                           
   395                           ;uart_tx_datos.c: 30:         int valor_ch0 = ADC_Read(0);
   396   000B04  0E00               	movlw	0
   397   000B06  EC55  F006         	call	_ADC_Read
   398   000B0A  C001  F02D         	movff	?_ADC_Read,main@valor_ch0
   399   000B0E  C002  F02E         	movff	?_ADC_Read+1,main@valor_ch0+1
   400   000B12                     
   401                           ;uart_tx_datos.c: 31:         int valor_ch1 = ADC_Read(1);
   402   000B12  0E01               	movlw	1
   403   000B14  EC55  F006         	call	_ADC_Read
   404   000B18  C001  F02F         	movff	?_ADC_Read,main@valor_ch1
   405   000B1C  C002  F030         	movff	?_ADC_Read+1,main@valor_ch1+1
   406   000B20                     
   407                           ;uart_tx_datos.c: 33:         sprintf(buffer, "ADC CH0: %u, ADC CH1: %u\r\n", valor_ch0,
      +                           valor_ch1);
   408   000B20  0E36               	movlw	low _buffer
   409   000B22  6E18               	movwf	sprintf@s^0,c
   410   000B24  0E01               	movlw	low STR_1
   411   000B26  6E19               	movwf	sprintf@fmt^0,c
   412   000B28  C02D  F01A         	movff	main@valor_ch0,?_sprintf+2
   413   000B2C  C02E  F01B         	movff	main@valor_ch0+1,?_sprintf+3
   414   000B30  C02F  F01C         	movff	main@valor_ch1,?_sprintf+4
   415   000B34  C030  F01D         	movff	main@valor_ch1+1,?_sprintf+5
   416   000B38  EC97  F006         	call	_sprintf	;wreg free
   417   000B3C                     
   418                           ;uart_tx_datos.c: 34:         Uart_Send_String(buffer);
   419   000B3C  0E36               	movlw	low _buffer
   420   000B3E  6E02               	movwf	Uart_Send_String@info^0,c
   421   000B40  ECB1  F006         	call	_Uart_Send_String	;wreg free
   422   000B44                     
   423                           ;uart_tx_datos.c: 35:         _delay((unsigned long)((100)*(48000000/4000.0)));
   424   000B44  0E07               	movlw	7
   425   000B46  6E2C               	movwf	(??_main+1)^0,c
   426   000B48  0E17               	movlw	23
   427   000B4A  6E2B               	movwf	??_main^0,c
   428   000B4C  0E6A               	movlw	106
   429   000B4E                     u557:
   430   000B4E  2EE8               	decfsz	wreg,f,c
   431   000B50  D7FE               	bra	u557
   432   000B52  2E2B               	decfsz	??_main^0,f,c
   433   000B54  D7FC               	bra	u557
   434   000B56  2E2C               	decfsz	(??_main+1)^0,f,c
   435   000B58  D7FA               	bra	u557
   436   000B5A  D000               	nop2	
   437   000B5C  EF82  F005         	goto	l1319
   438   000B60  EF00  F000         	goto	start
   439   000B64                     __end_of_main:
   440                           	callstack 0
   441                           
   442 ;; *************** function _sprintf *****************
   443 ;; Defined at:
   444 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;  s               1   23[COMRAM] PTR unsigned char 
   447 ;;		 -> buffer(30), 
   448 ;;  fmt             1   24[COMRAM] PTR const unsigned char 
   449 ;;		 -> STR_1(27), 
   450 ;; Auto vars:     Size  Location     Type
   451 ;;  f              12   30[COMRAM] struct _IO_FILE
   452 ;;  ret             2    0        int 
   453 ;;  ap              1   29[COMRAM] PTR void [1]
   454 ;;		 -> ?_sprintf(2), 
   455 ;; Return value:  Size  Location     Type
   456 ;;                  2   23[COMRAM] int 
   457 ;; Registers used:
   458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   464 ;;      Params:         6       0       0       0       0       0       0       0       0
   465 ;;      Locals:        13       0       0       0       0       0       0       0       0
   466 ;;      Temps:          0       0       0       0       0       0       0       0       0
   467 ;;      Totals:        19       0       0       0       0       0       0       0       0
   468 ;;Total ram usage:       19 bytes
   469 ;; Hardware stack levels used: 1
   470 ;; Hardware stack levels required when called: 4
   471 ;; This function calls:
   472 ;;		_vfprintf
   473 ;; This function is called by:
   474 ;;		_main
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478                           	psect	text1
   479   000D2E                     __ptext1:
   480                           	callstack 0
   481   000D2E                     _sprintf:
   482                           	callstack 26
   483   000D2E  0E1A               	movlw	low (?_sprintf+2)
   484   000D30  6E1E               	movwf	sprintf@ap^0,c
   485   000D32  C018  F01F         	movff	sprintf@s,sprintf@f
   486   000D36  0E00               	movlw	0
   487   000D38  6E23               	movwf	(sprintf@f+4)^0,c
   488   000D3A  0E00               	movlw	0
   489   000D3C  6E22               	movwf	(sprintf@f+3)^0,c
   490   000D3E  0E00               	movlw	0
   491   000D40  6E2A               	movwf	(sprintf@f+11)^0,c
   492   000D42  0E00               	movlw	0
   493   000D44  6E29               	movwf	(sprintf@f+10)^0,c
   494   000D46  0E1F               	movlw	low sprintf@f
   495   000D48  6E14               	movwf	vfprintf@fp^0,c
   496   000D4A  C019  F015         	movff	sprintf@fmt,vfprintf@fmt
   497   000D4E  0E1E               	movlw	low sprintf@ap
   498   000D50  6E16               	movwf	vfprintf@ap^0,c
   499   000D52  EC78  F006         	call	_vfprintf	;wreg free
   500   000D56  5018               	movf	sprintf@s^0,w,c
   501   000D58  2422               	addwf	(sprintf@f+3)^0,w,c
   502   000D5A  6ED9               	movwf	fsr2l,c
   503   000D5C  6ADA               	clrf	fsr2h,c
   504   000D5E  6ADF               	clrf	indf2,c
   505   000D60  0012               	return		;funcret
   506   000D62                     __end_of_sprintf:
   507                           	callstack 0
   508                           
   509 ;; *************** function _vfprintf *****************
   510 ;; Defined at:
   511 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;  fp              1   19[COMRAM] PTR struct _IO_FILE
   514 ;;		 -> sprintf@f(12), 
   515 ;;  fmt             1   20[COMRAM] PTR const unsigned char 
   516 ;;		 -> STR_1(27), 
   517 ;;  ap              1   21[COMRAM] PTR PTR void 
   518 ;;		 -> sprintf@ap(1), 
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  cfmt            1   22[COMRAM] PTR unsigned char 
   521 ;;		 -> STR_1(27), 
   522 ;; Return value:  Size  Location     Type
   523 ;;                  2   19[COMRAM] int 
   524 ;; Registers used:
   525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   531 ;;      Params:         3       0       0       0       0       0       0       0       0
   532 ;;      Locals:         1       0       0       0       0       0       0       0       0
   533 ;;      Temps:          0       0       0       0       0       0       0       0       0
   534 ;;      Totals:         4       0       0       0       0       0       0       0       0
   535 ;;Total ram usage:        4 bytes
   536 ;; Hardware stack levels used: 1
   537 ;; Hardware stack levels required when called: 3
   538 ;; This function calls:
   539 ;;		_vfpfcnvrt
   540 ;; This function is called by:
   541 ;;		_sprintf
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text2
   546   000CF0                     __ptext2:
   547                           	callstack 0
   548   000CF0                     _vfprintf:
   549                           	callstack 26
   550   000CF0                     
   551                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
   552   000CF0  C015  F017         	movff	vfprintf@fmt,vfprintf@cfmt
   553                           
   554                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   555   000CF4  EF84  F006         	goto	l1261
   556   000CF8                     l1259:
   557                           
   558                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   559   000CF8  C014  F009         	movff	vfprintf@fp,vfpfcnvrt@fp
   560   000CFC  0E17               	movlw	low vfprintf@cfmt
   561   000CFE  6E0A               	movwf	vfpfcnvrt@fmt^0,c
   562   000D00  C016  F00B         	movff	vfprintf@ap,vfpfcnvrt@ap
   563   000D04  EC0F  F004         	call	_vfpfcnvrt	;wreg free
   564   000D08                     l1261:
   565                           
   566                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   567   000D08  C017  FFF6         	movff	vfprintf@cfmt,tblptrl
   568   000D0C                     	if	1	;There is more than 1 active tblptr byte
   569   000D0C  0E08               	movlw	high __smallconst
   570   000D0E  6EF7               	movwf	tblptrh,c
   571   000D10                     	endif
   572   000D10                     	if	0	;tblptru may be non-zero
   573   000D10                     	endif
   574   000D10                     	if	0	;tblptru may be non-zero
   575   000D10                     	endif
   576   000D10  0008               	tblrd		*
   577   000D12  50F5               	movf	tablat,w,c
   578   000D14  0900               	iorlw	0
   579   000D16  A4D8               	btfss	status,2,c
   580   000D18  EF90  F006         	goto	u501
   581   000D1C  EF92  F006         	goto	u500
   582   000D20                     u501:
   583   000D20  EF7C  F006         	goto	l1259
   584   000D24                     u500:
   585   000D24                     
   586                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
   587   000D24  0E00               	movlw	0
   588   000D26  6E15               	movwf	(?_vfprintf+1)^0,c
   589   000D28  0E00               	movlw	0
   590   000D2A  6E14               	movwf	?_vfprintf^0,c
   591   000D2C  0012               	return		;funcret
   592   000D2E                     __end_of_vfprintf:
   593                           	callstack 0
   594                           
   595 ;; *************** function _vfpfcnvrt *****************
   596 ;; Defined at:
   597 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;  fp              1    8[COMRAM] PTR struct _IO_FILE
   600 ;;		 -> sprintf@f(12), 
   601 ;;  fmt             1    9[COMRAM] PTR PTR unsigned char 
   602 ;;		 -> vfprintf@cfmt(1), 
   603 ;;  ap              1   10[COMRAM] PTR PTR void 
   604 ;;		 -> sprintf@ap(1), 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  convarg         4   13[COMRAM] struct .
   607 ;;  c               1   18[COMRAM] unsigned char 
   608 ;;  cp              1   17[COMRAM] PTR unsigned char 
   609 ;;		 -> STR_1(27), 
   610 ;;  done            1    0        _Bool 
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   620 ;;      Params:         3       0       0       0       0       0       0       0       0
   621 ;;      Locals:         6       0       0       0       0       0       0       0       0
   622 ;;      Temps:          2       0       0       0       0       0       0       0       0
   623 ;;      Totals:        11       0       0       0       0       0       0       0       0
   624 ;;Total ram usage:       11 bytes
   625 ;; Hardware stack levels used: 1
   626 ;; Hardware stack levels required when called: 2
   627 ;; This function calls:
   628 ;;		___lwdiv
   629 ;;		___lwmod
   630 ;;		_fputc
   631 ;; This function is called by:
   632 ;;		_vfprintf
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text3
   637   00081E                     __ptext3:
   638                           	callstack 0
   639   00081E                     _vfpfcnvrt:
   640                           	callstack 26
   641   00081E                     
   642                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
   643   00081E  500A               	movf	vfpfcnvrt@fmt^0,w,c
   644   000820  6ED9               	movwf	fsr2l,c
   645   000822  6ADA               	clrf	fsr2h,c
   646   000824  CFDF FFF6          	movff	indf2,tblptrl
   647   000828                     	if	1	;There is more than 1 active tblptr byte
   648   000828  0E08               	movlw	high __smallconst
   649   00082A  6EF7               	movwf	tblptrh,c
   650   00082C                     	endif
   651   00082C                     	if	0	;tblptru may be non-zero
   652   00082C                     	endif
   653   00082C                     	if	0	;tblptru may be non-zero
   654   00082C                     	endif
   655   00082C  0008               	tblrd		*
   656   00082E  50F5               	movf	tablat,w,c
   657   000830  0A25               	xorlw	37
   658   000832  A4D8               	btfss	status,2,c
   659   000834  EF1E  F004         	goto	u421
   660   000838  EF20  F004         	goto	u420
   661   00083C                     u421:
   662   00083C  EFBC  F004         	goto	l1225
   663   000840                     u420:
   664   000840                     
   665                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
   666   000840  500A               	movf	vfpfcnvrt@fmt^0,w,c
   667   000842  6ED9               	movwf	fsr2l,c
   668   000844  6ADA               	clrf	fsr2h,c
   669   000846  2ADF               	incf	indf2,f,c
   670   000848                     
   671                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
   672   000848  0E00               	movlw	0
   673   00084A  6E32               	movwf	(_width+1)^0,c
   674   00084C  0E00               	movlw	0
   675   00084E  6E31               	movwf	_width^0,c
   676   000850  C031  F035         	movff	_width,_flags
   677   000854                     
   678                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
   679   000854  6833               	setf	_prec^0,c
   680   000856  6834               	setf	(_prec+1)^0,c
   681   000858                     
   682                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1439:   if (0
   683   000858  500A               	movf	vfpfcnvrt@fmt^0,w,c
   684   00085A  6ED9               	movwf	fsr2l,c
   685   00085C  6ADA               	clrf	fsr2h,c
   686   00085E  50DF               	movf	indf2,w,c
   687   000860  6E12               	movwf	vfpfcnvrt@cp^0,c
   688   000862  C012  FFF6         	movff	vfpfcnvrt@cp,tblptrl
   689   000866                     	if	1	;There is more than 1 active tblptr byte
   690   000866  0E08               	movlw	high __smallconst
   691   000868  6EF7               	movwf	tblptrh,c
   692   00086A                     	endif
   693   00086A                     	if	0	;tblptru may be non-zero
   694   00086A                     	endif
   695   00086A                     	if	0	;tblptru may be non-zero
   696   00086A                     	endif
   697   00086A  0008               	tblrd		*
   698   00086C  50F5               	movf	tablat,w,c
   699   00086E  0A75               	xorlw	117
   700   000870  A4D8               	btfss	status,2,c
   701   000872  EF3D  F004         	goto	u431
   702   000876  EF3F  F004         	goto	u430
   703   00087A                     u431:
   704   00087A  EFB6  F004         	goto	l1221
   705   00087E                     u430:
   706   00087E                     
   707                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
   708   00087E  500B               	movf	vfpfcnvrt@ap^0,w,c
   709   000880  6ED9               	movwf	fsr2l,c
   710   000882  6ADA               	clrf	fsr2h,c
   711   000884  0E02               	movlw	2
   712   000886  26DF               	addwf	indf2,f,c
   713   000888  5CDF               	subwf	indf2,w,c
   714   00088A  6ED9               	movwf	fsr2l,c
   715   00088C  6ADA               	clrf	fsr2h,c
   716   00088E  CFDE F00E          	movff	postinc2,vfpfcnvrt@convarg
   717   000892  CFDE F00F          	movff	postinc2,vfpfcnvrt@convarg+1
   718   000896                     
   719                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
   720   000896  500A               	movf	vfpfcnvrt@fmt^0,w,c
   721   000898  6ED9               	movwf	fsr2l,c
   722   00089A  6ADA               	clrf	fsr2h,c
   723   00089C  2812               	incf	vfpfcnvrt@cp^0,w,c
   724   00089E  6EDF               	movwf	indf2,c
   725                           
   726                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
   727   0008A0  EFA0  F004         	goto	l1219
   728   0008A4                     l1201:
   729                           
   730                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
   731   0008A4  0E20               	movlw	32
   732   0008A6  6E13               	movwf	vfpfcnvrt@c^0,c
   733   0008A8                     l1203:
   734                           
   735                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
   736   0008A8  0613               	decf	vfpfcnvrt@c^0,f,c
   737   0008AA  5013               	movf	vfpfcnvrt@c^0,w,c
   738   0008AC  0F60               	addlw	low _dbuf
   739   0008AE  6ED9               	movwf	fsr2l,c
   740   0008B0  6ADA               	clrf	fsr2h,c
   741   0008B2  C00E  F001         	movff	vfpfcnvrt@convarg,___lwmod@dividend
   742   0008B6  C00F  F002         	movff	vfpfcnvrt@convarg+1,___lwmod@dividend+1
   743   0008BA  0E00               	movlw	0
   744   0008BC  6E04               	movwf	(___lwmod@divisor+1)^0,c
   745   0008BE  0E0A               	movlw	10
   746   0008C0  6E03               	movwf	___lwmod@divisor^0,c
   747   0008C2  EC23  F006         	call	___lwmod	;wreg free
   748   0008C6  5001               	movf	?___lwmod^0,w,c
   749   0008C8  0F30               	addlw	48
   750   0008CA  6EDF               	movwf	indf2,c
   751   0008CC                     
   752                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
   753   0008CC  C00E  F001         	movff	vfpfcnvrt@convarg,___lwdiv@dividend
   754   0008D0  C00F  F002         	movff	vfpfcnvrt@convarg+1,___lwdiv@dividend+1
   755   0008D4  0E00               	movlw	0
   756   0008D6  6E04               	movwf	(___lwdiv@divisor+1)^0,c
   757   0008D8  0E0A               	movlw	10
   758   0008DA  6E03               	movwf	___lwdiv@divisor^0,c
   759   0008DC  ECB2  F005         	call	___lwdiv	;wreg free
   760   0008E0  C001  F00E         	movff	?___lwdiv,vfpfcnvrt@convarg
   761   0008E4  C002  F00F         	movff	?___lwdiv+1,vfpfcnvrt@convarg+1
   762   0008E8                     
   763                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
   764   0008E8  500E               	movf	vfpfcnvrt@convarg^0,w,c
   765   0008EA  100F               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
   766   0008EC  B4D8               	btfsc	status,2,c
   767   0008EE  EF7B  F004         	goto	u441
   768   0008F2  EF7D  F004         	goto	u440
   769   0008F6                     u441:
   770   0008F6  EF95  F004         	goto	l1215
   771   0008FA                     u440:
   772   0008FA  5013               	movf	vfpfcnvrt@c^0,w,c
   773   0008FC  A4D8               	btfss	status,2,c
   774   0008FE  EF83  F004         	goto	u451
   775   000902  EF85  F004         	goto	u450
   776   000906                     u451:
   777   000906  EF54  F004         	goto	l1203
   778   00090A                     u450:
   779   00090A  EF95  F004         	goto	l1215
   780   00090E                     l1211:
   781                           
   782                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
   783   00090E  5013               	movf	vfpfcnvrt@c^0,w,c
   784   000910  0F60               	addlw	low _dbuf
   785   000912  6ED9               	movwf	fsr2l,c
   786   000914  6ADA               	clrf	fsr2h,c
   787   000916  50DF               	movf	indf2,w,c
   788   000918  6E0C               	movwf	??_vfpfcnvrt^0,c
   789   00091A  500C               	movf	??_vfpfcnvrt^0,w,c
   790   00091C  6E01               	movwf	fputc@c^0,c
   791   00091E  6A02               	clrf	(fputc@c+1)^0,c
   792   000920  C009  F003         	movff	vfpfcnvrt@fp,fputc@fp
   793   000924  ECCE  F004         	call	_fputc	;wreg free
   794   000928  2A13               	incf	vfpfcnvrt@c^0,f,c
   795   00092A                     l1215:
   796                           
   797                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
   798   00092A  0E20               	movlw	32
   799   00092C  1813               	xorwf	vfpfcnvrt@c^0,w,c
   800   00092E  A4D8               	btfss	status,2,c
   801   000930  EF9C  F004         	goto	u461
   802   000934  EF9E  F004         	goto	u460
   803   000938                     u461:
   804   000938  EF87  F004         	goto	l1211
   805   00093C                     u460:
   806   00093C  EFCD  F004         	goto	l829
   807   000940                     l1219:
   808   000940  C012  FFF6         	movff	vfpfcnvrt@cp,tblptrl
   809   000944                     	if	1	;There is more than 1 active tblptr byte
   810   000944  0E08               	movlw	high __smallconst
   811   000946  6EF7               	movwf	tblptrh,c
   812   000948                     	endif
   813   000948                     	if	0	;tblptru may be non-zero
   814   000948                     	endif
   815   000948                     	if	0	;tblptru may be non-zero
   816   000948                     	endif
   817   000948  0008               	tblrd		*
   818   00094A  50F5               	movf	tablat,w,c
   819   00094C  6E0C               	movwf	??_vfpfcnvrt^0,c
   820   00094E  6A0D               	clrf	(??_vfpfcnvrt+1)^0,c
   821                           
   822                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   823                           ; Switch size 1, requested type "simple"
   824                           ; Number of cases is 1, Range of values is 0 to 0
   825                           ; switch strategies available:
   826                           ; Name         Instructions Cycles
   827                           ; simple_byte            4     3 (average)
   828                           ;	Chosen strategy is simple_byte
   829   000950  500D               	movf	(??_vfpfcnvrt+1)^0,w,c
   830   000952  0A00               	xorlw	0	; case 0
   831   000954  B4D8               	btfsc	status,2,c
   832   000956  EFAF  F004         	goto	l1333
   833   00095A  EFB6  F004         	goto	l1221
   834   00095E                     l1333:
   835                           
   836                           ; Switch size 1, requested type "simple"
   837                           ; Number of cases is 1, Range of values is 117 to 117
   838                           ; switch strategies available:
   839                           ; Name         Instructions Cycles
   840                           ; simple_byte            4     3 (average)
   841                           ;	Chosen strategy is simple_byte
   842   00095E  500C               	movf	??_vfpfcnvrt^0,w,c
   843   000960  0A75               	xorlw	117	; case 117
   844   000962  B4D8               	btfsc	status,2,c
   845   000964  EF52  F004         	goto	l1201
   846   000968  EFB6  F004         	goto	l1221
   847   00096C                     l1221:
   848                           
   849                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
   850   00096C  500A               	movf	vfpfcnvrt@fmt^0,w,c
   851   00096E  6ED9               	movwf	fsr2l,c
   852   000970  6ADA               	clrf	fsr2h,c
   853   000972  2ADF               	incf	indf2,f,c
   854   000974  EFCD  F004         	goto	l829
   855   000978                     l1225:
   856                           
   857                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
   858   000978  500A               	movf	vfpfcnvrt@fmt^0,w,c
   859   00097A  6ED9               	movwf	fsr2l,c
   860   00097C  6ADA               	clrf	fsr2h,c
   861   00097E  CFDF FFF6          	movff	indf2,tblptrl
   862   000982                     	if	1	;There is more than 1 active tblptr byte
   863   000982  0E08               	movlw	high __smallconst
   864   000984  6EF7               	movwf	tblptrh,c
   865   000986                     	endif
   866   000986                     	if	0	;tblptru may be non-zero
   867   000986                     	endif
   868   000986                     	if	0	;tblptru may be non-zero
   869   000986                     	endif
   870   000986  0008               	tblrd		*
   871   000988  50F5               	movf	tablat,w,c
   872   00098A  6E01               	movwf	fputc@c^0,c
   873   00098C  6A02               	clrf	(fputc@c+1)^0,c
   874   00098E  C009  F003         	movff	vfpfcnvrt@fp,fputc@fp
   875   000992  ECCE  F004         	call	_fputc	;wreg free
   876   000996  EFB6  F004         	goto	l1221
   877   00099A                     l829:
   878   00099A  0012               	return		;funcret
   879   00099C                     __end_of_vfpfcnvrt:
   880                           	callstack 0
   881                           
   882 ;; *************** function _fputc *****************
   883 ;; Defined at:
   884 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;  c               2    0[COMRAM] int 
   887 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
   888 ;;		 -> sprintf@f(12), 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;                  2    0[COMRAM] int 
   893 ;; Registers used:
   894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   900 ;;      Params:         3       0       0       0       0       0       0       0       0
   901 ;;      Locals:         0       0       0       0       0       0       0       0       0
   902 ;;      Temps:          5       0       0       0       0       0       0       0       0
   903 ;;      Totals:         8       0       0       0       0       0       0       0       0
   904 ;;Total ram usage:        8 bytes
   905 ;; Hardware stack levels used: 1
   906 ;; Hardware stack levels required when called: 1
   907 ;; This function calls:
   908 ;;		_putch
   909 ;; This function is called by:
   910 ;;		_vfpfcnvrt
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text4
   915   00099C                     __ptext4:
   916                           	callstack 0
   917   00099C                     _fputc:
   918                           	callstack 26
   919   00099C  5003               	movf	fputc@fp^0,w,c
   920   00099E  B4D8               	btfsc	status,2,c
   921   0009A0  EFD4  F004         	goto	u381
   922   0009A4  EFD6  F004         	goto	u380
   923   0009A8                     u381:
   924   0009A8  EFDE  F004         	goto	l1175
   925   0009AC                     u380:
   926   0009AC  5003               	movf	fputc@fp^0,w,c
   927   0009AE  A4D8               	btfss	status,2,c
   928   0009B0  EFDC  F004         	goto	u391
   929   0009B4  EFDE  F004         	goto	u390
   930   0009B8                     u391:
   931   0009B8  EFE3  F004         	goto	l1177
   932   0009BC                     u390:
   933   0009BC                     l1175:
   934   0009BC  5001               	movf	fputc@c^0,w,c
   935   0009BE  ECEA  F006         	call	_putch
   936   0009C2  EF22  F005         	goto	l848
   937   0009C6                     l1177:
   938   0009C6  5003               	movf	fputc@fp^0,w,c
   939   0009C8  6ED9               	movwf	fsr2l,c
   940   0009CA  6ADA               	clrf	fsr2h,c
   941   0009CC  0E0A               	movlw	10
   942   0009CE  26D9               	addwf	fsr2l,f,c
   943   0009D0  50DE               	movf	postinc2,w,c
   944   0009D2  10DE               	iorwf	postinc2,w,c
   945   0009D4  B4D8               	btfsc	status,2,c
   946   0009D6  EFEF  F004         	goto	u401
   947   0009DA  EFF1  F004         	goto	u400
   948   0009DE                     u401:
   949   0009DE  EF0A  F005         	goto	l1181
   950   0009E2                     u400:
   951   0009E2  5003               	movf	fputc@fp^0,w,c
   952   0009E4  6ED9               	movwf	fsr2l,c
   953   0009E6  6ADA               	clrf	fsr2h,c
   954   0009E8  0E0A               	movlw	10
   955   0009EA  26D9               	addwf	fsr2l,f,c
   956   0009EC  5003               	movf	fputc@fp^0,w,c
   957   0009EE  6EE1               	movwf	fsr1l,c
   958   0009F0  6AE2               	clrf	fsr1h,c
   959   0009F2  0E03               	movlw	3
   960   0009F4  26E1               	addwf	fsr1l,f,c
   961   0009F6  50DE               	movf	postinc2,w,c
   962   0009F8  5CE6               	subwf	postinc1,w,c
   963   0009FA  50E6               	movf	postinc1,w,c
   964   0009FC  0A80               	xorlw	128
   965   0009FE  6E08               	movwf	(??_fputc+4)^0,c
   966   000A00  50DE               	movf	postinc2,w,c
   967   000A02  0A80               	xorlw	128
   968   000A04  5808               	subwfb	(??_fputc+4)^0,w,c
   969   000A06  B0D8               	btfsc	status,0,c
   970   000A08  EF08  F005         	goto	u411
   971   000A0C  EF0A  F005         	goto	u410
   972   000A10                     u411:
   973   000A10  EF22  F005         	goto	l848
   974   000A14                     u410:
   975   000A14                     l1181:
   976   000A14  5003               	movf	fputc@fp^0,w,c
   977   000A16  6ED9               	movwf	fsr2l,c
   978   000A18  6ADA               	clrf	fsr2h,c
   979   000A1A  0E03               	movlw	3
   980   000A1C  26D9               	addwf	fsr2l,f,c
   981   000A1E  50DF               	movf	indf2,w,c
   982   000A20  6E04               	movwf	??_fputc^0,c
   983   000A22  5003               	movf	fputc@fp^0,w,c
   984   000A24  6ED9               	movwf	fsr2l,c
   985   000A26  6ADA               	clrf	fsr2h,c
   986   000A28  50DF               	movf	indf2,w,c
   987   000A2A  2404               	addwf	??_fputc^0,w,c
   988   000A2C  6ED9               	movwf	fsr2l,c
   989   000A2E  6ADA               	clrf	fsr2h,c
   990   000A30  C001  FFDF         	movff	fputc@c,indf2
   991   000A34  5003               	movf	fputc@fp^0,w,c
   992   000A36  6ED9               	movwf	fsr2l,c
   993   000A38  6ADA               	clrf	fsr2h,c
   994   000A3A  0E03               	movlw	3
   995   000A3C  26D9               	addwf	fsr2l,f,c
   996   000A3E  2ADE               	incf	postinc2,f,c
   997   000A40  0E00               	movlw	0
   998   000A42  22DD               	addwfc	postdec2,f,c
   999   000A44                     l848:
  1000   000A44  0012               	return		;funcret
  1001   000A46                     __end_of_fputc:
  1002                           	callstack 0
  1003                           
  1004 ;; *************** function _putch *****************
  1005 ;; Defined at:
  1006 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;  c               1    wreg     unsigned char 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  c               1    0[COMRAM] unsigned char 
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      void 
  1013 ;; Registers used:
  1014 ;;		wreg
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1020 ;;      Params:         0       0       0       0       0       0       0       0       0
  1021 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1023 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1024 ;;Total ram usage:        0 bytes
  1025 ;; Hardware stack levels used: 1
  1026 ;; This function calls:
  1027 ;;		Nothing
  1028 ;; This function is called by:
  1029 ;;		_fputc
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text5
  1034   000DD4                     __ptext5:
  1035                           	callstack 0
  1036   000DD4                     _putch:
  1037                           	callstack 26
  1038   000DD4  0012               	return		;funcret
  1039   000DD6                     __end_of_putch:
  1040                           	callstack 0
  1041                           
  1042 ;; *************** function ___lwmod *****************
  1043 ;; Defined at:
  1044 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwmod.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  dividend        2    0[COMRAM] unsigned int 
  1047 ;;  divisor         2    2[COMRAM] unsigned int 
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  counter         1    4[COMRAM] unsigned char 
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  2    0[COMRAM] unsigned int 
  1052 ;; Registers used:
  1053 ;;		wreg, status,2, status,0
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1059 ;;      Params:         4       0       0       0       0       0       0       0       0
  1060 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1062 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1063 ;;Total ram usage:        5 bytes
  1064 ;; Hardware stack levels used: 1
  1065 ;; This function calls:
  1066 ;;		Nothing
  1067 ;; This function is called by:
  1068 ;;		_vfpfcnvrt
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text6
  1073   000C46                     __ptext6:
  1074                           	callstack 0
  1075   000C46                     ___lwmod:
  1076                           	callstack 27
  1077   000C46  5003               	movf	___lwmod@divisor^0,w,c
  1078   000C48  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1079   000C4A  B4D8               	btfsc	status,2,c
  1080   000C4C  EF2A  F006         	goto	u351
  1081   000C50  EF2C  F006         	goto	u350
  1082   000C54                     u351:
  1083   000C54  EF50  F006         	goto	l615
  1084   000C58                     u350:
  1085   000C58  0E01               	movlw	1
  1086   000C5A  6E05               	movwf	___lwmod@counter^0,c
  1087   000C5C  EF34  F006         	goto	l1161
  1088   000C60                     l1159:
  1089   000C60  90D8               	bcf	status,0,c
  1090   000C62  3603               	rlcf	___lwmod@divisor^0,f,c
  1091   000C64  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1092   000C66  2A05               	incf	___lwmod@counter^0,f,c
  1093   000C68                     l1161:
  1094   000C68  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1095   000C6A  EF39  F006         	goto	u361
  1096   000C6E  EF3B  F006         	goto	u360
  1097   000C72                     u361:
  1098   000C72  EF30  F006         	goto	l1159
  1099   000C76                     u360:
  1100   000C76                     l1163:
  1101   000C76  5003               	movf	___lwmod@divisor^0,w,c
  1102   000C78  5C01               	subwf	___lwmod@dividend^0,w,c
  1103   000C7A  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1104   000C7C  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1105   000C7E  A0D8               	btfss	status,0,c
  1106   000C80  EF44  F006         	goto	u371
  1107   000C84  EF46  F006         	goto	u370
  1108   000C88                     u371:
  1109   000C88  EF4A  F006         	goto	l1167
  1110   000C8C                     u370:
  1111   000C8C  5003               	movf	___lwmod@divisor^0,w,c
  1112   000C8E  5E01               	subwf	___lwmod@dividend^0,f,c
  1113   000C90  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1114   000C92  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1115   000C94                     l1167:
  1116   000C94  90D8               	bcf	status,0,c
  1117   000C96  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1118   000C98  3203               	rrcf	___lwmod@divisor^0,f,c
  1119   000C9A  2E05               	decfsz	___lwmod@counter^0,f,c
  1120   000C9C  EF3B  F006         	goto	l1163
  1121   000CA0                     l615:
  1122   000CA0  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1123   000CA4  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1124   000CA8  0012               	return		;funcret
  1125   000CAA                     __end_of___lwmod:
  1126                           	callstack 0
  1127                           
  1128 ;; *************** function ___lwdiv *****************
  1129 ;; Defined at:
  1130 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  dividend        2    0[COMRAM] unsigned int 
  1133 ;;  divisor         2    2[COMRAM] unsigned int 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  quotient        2    4[COMRAM] unsigned int 
  1136 ;;  counter         1    6[COMRAM] unsigned char 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  2    0[COMRAM] unsigned int 
  1139 ;; Registers used:
  1140 ;;		wreg, status,2, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1146 ;;      Params:         4       0       0       0       0       0       0       0       0
  1147 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1148 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1149 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1150 ;;Total ram usage:        7 bytes
  1151 ;; Hardware stack levels used: 1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_vfpfcnvrt
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text7
  1160   000B64                     __ptext7:
  1161                           	callstack 0
  1162   000B64                     ___lwdiv:
  1163                           	callstack 27
  1164   000B64  0E00               	movlw	0
  1165   000B66  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  1166   000B68  0E00               	movlw	0
  1167   000B6A  6E05               	movwf	___lwdiv@quotient^0,c
  1168   000B6C  5003               	movf	___lwdiv@divisor^0,w,c
  1169   000B6E  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1170   000B70  B4D8               	btfsc	status,2,c
  1171   000B72  EFBD  F005         	goto	u321
  1172   000B76  EFBF  F005         	goto	u320
  1173   000B7A                     u321:
  1174   000B7A  EFE7  F005         	goto	l605
  1175   000B7E                     u320:
  1176   000B7E  0E01               	movlw	1
  1177   000B80  6E07               	movwf	___lwdiv@counter^0,c
  1178   000B82  EFC7  F005         	goto	l1141
  1179   000B86                     l1139:
  1180   000B86  90D8               	bcf	status,0,c
  1181   000B88  3603               	rlcf	___lwdiv@divisor^0,f,c
  1182   000B8A  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1183   000B8C  2A07               	incf	___lwdiv@counter^0,f,c
  1184   000B8E                     l1141:
  1185   000B8E  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  1186   000B90  EFCC  F005         	goto	u331
  1187   000B94  EFCE  F005         	goto	u330
  1188   000B98                     u331:
  1189   000B98  EFC3  F005         	goto	l1139
  1190   000B9C                     u330:
  1191   000B9C                     l1143:
  1192   000B9C  90D8               	bcf	status,0,c
  1193   000B9E  3605               	rlcf	___lwdiv@quotient^0,f,c
  1194   000BA0  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1195   000BA2  5003               	movf	___lwdiv@divisor^0,w,c
  1196   000BA4  5C01               	subwf	___lwdiv@dividend^0,w,c
  1197   000BA6  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1198   000BA8  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1199   000BAA  A0D8               	btfss	status,0,c
  1200   000BAC  EFDA  F005         	goto	u341
  1201   000BB0  EFDC  F005         	goto	u340
  1202   000BB4                     u341:
  1203   000BB4  EFE1  F005         	goto	l1151
  1204   000BB8                     u340:
  1205   000BB8  5003               	movf	___lwdiv@divisor^0,w,c
  1206   000BBA  5E01               	subwf	___lwdiv@dividend^0,f,c
  1207   000BBC  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1208   000BBE  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1209   000BC0  8005               	bsf	___lwdiv@quotient^0,0,c
  1210   000BC2                     l1151:
  1211   000BC2  90D8               	bcf	status,0,c
  1212   000BC4  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1213   000BC6  3203               	rrcf	___lwdiv@divisor^0,f,c
  1214   000BC8  2E07               	decfsz	___lwdiv@counter^0,f,c
  1215   000BCA  EFCE  F005         	goto	l1143
  1216   000BCE                     l605:
  1217   000BCE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1218   000BD2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1219   000BD6  0012               	return		;funcret
  1220   000BD8                     __end_of___lwdiv:
  1221                           	callstack 0
  1222                           
  1223 ;; *************** function _Uart_Send_String *****************
  1224 ;; Defined at:
  1225 ;;		line 35 in file "uart.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  info            1    1[COMRAM] PTR unsigned char 
  1228 ;;		 -> buffer(30), 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1240 ;;      Params:         1       0       0       0       0       0       0       0       0
  1241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1243 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1244 ;;Total ram usage:        1 bytes
  1245 ;; Hardware stack levels used: 1
  1246 ;; Hardware stack levels required when called: 1
  1247 ;; This function calls:
  1248 ;;		_Uart_Send_Char
  1249 ;; This function is called by:
  1250 ;;		_main
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text8
  1255   000D62                     __ptext8:
  1256                           	callstack 0
  1257   000D62                     _Uart_Send_String:
  1258                           	callstack 29
  1259   000D62                     
  1260                           ;uart.c: 35: void Uart_Send_String(char *info);uart.c: 36: {;uart.c: 37:     while(*info
      +                          )
  1261   000D62  EFBA  F006         	goto	l1313
  1262   000D66                     l1309:
  1263                           
  1264                           ;uart.c: 38:     {;uart.c: 39:         Uart_Send_Char(*info++);
  1265   000D66  5002               	movf	Uart_Send_String@info^0,w,c
  1266   000D68  6ED9               	movwf	fsr2l,c
  1267   000D6A  6ADA               	clrf	fsr2h,c
  1268   000D6C  50DF               	movf	indf2,w,c
  1269   000D6E  ECD7  F006         	call	_Uart_Send_Char
  1270   000D72  2A02               	incf	Uart_Send_String@info^0,f,c
  1271   000D74                     l1313:
  1272                           
  1273                           ;uart.c: 37:     while(*info)
  1274   000D74  5002               	movf	Uart_Send_String@info^0,w,c
  1275   000D76  6ED9               	movwf	fsr2l,c
  1276   000D78  6ADA               	clrf	fsr2h,c
  1277   000D7A  50DF               	movf	indf2,w,c
  1278   000D7C  A4D8               	btfss	status,2,c
  1279   000D7E  EFC3  F006         	goto	u541
  1280   000D82  EFC5  F006         	goto	u540
  1281   000D86                     u541:
  1282   000D86  EFB3  F006         	goto	l1309
  1283   000D8A                     u540:
  1284   000D8A  0012               	return		;funcret
  1285   000D8C                     __end_of_Uart_Send_String:
  1286                           	callstack 0
  1287                           
  1288 ;; *************** function _Uart_Send_Char *****************
  1289 ;; Defined at:
  1290 ;;		line 29 in file "uart.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;  txData          1    wreg     unsigned char 
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;  txData          1    0[COMRAM] unsigned char 
  1295 ;; Return value:  Size  Location     Type
  1296 ;;                  1    wreg      void 
  1297 ;; Registers used:
  1298 ;;		wreg
  1299 ;; Tracked objects:
  1300 ;;		On entry : 0/0
  1301 ;;		On exit  : 0/0
  1302 ;;		Unchanged: 0/0
  1303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1304 ;;      Params:         0       0       0       0       0       0       0       0       0
  1305 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1307 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1308 ;;Total ram usage:        1 bytes
  1309 ;; Hardware stack levels used: 1
  1310 ;; This function calls:
  1311 ;;		Nothing
  1312 ;; This function is called by:
  1313 ;;		_Uart_Send_String
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           	psect	text9
  1318   000DAE                     __ptext9:
  1319                           	callstack 0
  1320   000DAE                     _Uart_Send_Char:
  1321                           	callstack 29
  1322                           
  1323                           ;incstack = 0
  1324                           ;Uart_Send_Char@txData stored from wreg
  1325   000DAE  6E01               	movwf	Uart_Send_Char@txData^0,c
  1326   000DB0                     l55:
  1327   000DB0  A2AC               	btfss	172,1,c	;volatile
  1328   000DB2  EFDD  F006         	goto	u161
  1329   000DB6  EFDF  F006         	goto	u160
  1330   000DBA                     u161:
  1331   000DBA  EFD8  F006         	goto	l55
  1332   000DBE                     u160:
  1333   000DBE                     
  1334                           ;uart.c: 32:     TXREG = txData;
  1335   000DBE  C001  FFAD         	movff	Uart_Send_Char@txData,4013	;volatile
  1336   000DC2  0012               	return		;funcret
  1337   000DC4                     __end_of_Uart_Send_Char:
  1338                           	callstack 0
  1339                           
  1340 ;; *************** function _Uart_Init *****************
  1341 ;; Defined at:
  1342 ;;		line 11 in file "uart.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  baud            4   13[COMRAM] unsigned long 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  vx              2   21[COMRAM] unsigned int 
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1356 ;;      Params:         4       0       0       0       0       0       0       0       0
  1357 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1358 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1359 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1360 ;;Total ram usage:       10 bytes
  1361 ;; Hardware stack levels used: 1
  1362 ;; Hardware stack levels required when called: 1
  1363 ;; This function calls:
  1364 ;;		___lldiv
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text10
  1371   000BD8                     __ptext10:
  1372                           	callstack 0
  1373   000BD8                     _Uart_Init:
  1374                           	callstack 29
  1375   000BD8                     
  1376                           ;uart.c: 11: void Uart_Init(unsigned long baud);uart.c: 12: {;uart.c: 13:     TRISCbits.
      +                          RC6 = 0;
  1377   000BD8  9C94               	bcf	148,6,c	;volatile
  1378                           
  1379                           ;uart.c: 14:     TRISCbits.RC7 = 1;
  1380   000BDA  8E94               	bsf	148,7,c	;volatile
  1381   000BDC                     
  1382                           ;uart.c: 15:     TXSTA = 0x24;
  1383   000BDC  0E24               	movlw	36
  1384   000BDE  6EAC               	movwf	172,c	;volatile
  1385                           
  1386                           ;uart.c: 16:     RCSTA = 0x90;
  1387   000BE0  0E90               	movlw	144
  1388   000BE2  6EAB               	movwf	171,c	;volatile
  1389                           
  1390                           ;uart.c: 17:     BAUDCON = 0x00;
  1391   000BE4  0E00               	movlw	0
  1392   000BE6  6EB8               	movwf	184,c	;volatile
  1393   000BE8                     
  1394                           ;uart.c: 18:     BAUDCONbits.BRG16 = 1;
  1395   000BE8  86B8               	bsf	184,3,c	;volatile
  1396   000BEA                     
  1397                           ;uart.c: 19:     unsigned int vx = (48000000/(baud*4))-1;
  1398   000BEA  0E00               	movlw	0
  1399   000BEC  6E01               	movwf	___lldiv@dividend^0,c
  1400   000BEE  0E6C               	movlw	108
  1401   000BF0  6E02               	movwf	(___lldiv@dividend+1)^0,c
  1402   000BF2  0EDC               	movlw	220
  1403   000BF4  6E03               	movwf	(___lldiv@dividend+2)^0,c
  1404   000BF6  0E02               	movlw	2
  1405   000BF8  6E04               	movwf	(___lldiv@dividend+3)^0,c
  1406   000BFA  C00E  F012         	movff	Uart_Init@baud,??_Uart_Init
  1407   000BFE  C00F  F013         	movff	Uart_Init@baud+1,??_Uart_Init+1
  1408   000C02  C010  F014         	movff	Uart_Init@baud+2,??_Uart_Init+2
  1409   000C06  C011  F015         	movff	Uart_Init@baud+3,??_Uart_Init+3
  1410   000C0A  0E02               	movlw	2
  1411   000C0C                     u515:
  1412   000C0C  90D8               	bcf	status,0,c
  1413   000C0E  3612               	rlcf	??_Uart_Init^0,f,c
  1414   000C10  3613               	rlcf	(??_Uart_Init+1)^0,f,c
  1415   000C12  3614               	rlcf	(??_Uart_Init+2)^0,f,c
  1416   000C14  3615               	rlcf	(??_Uart_Init+3)^0,f,c
  1417   000C16  2EE8               	decfsz	wreg,f,c
  1418   000C18  EF06  F006         	goto	u515
  1419   000C1C  C012  F005         	movff	??_Uart_Init,___lldiv@divisor
  1420   000C20  C013  F006         	movff	??_Uart_Init+1,___lldiv@divisor+1
  1421   000C24  C014  F007         	movff	??_Uart_Init+2,___lldiv@divisor+2
  1422   000C28  C015  F008         	movff	??_Uart_Init+3,___lldiv@divisor+3
  1423   000C2C  EC23  F005         	call	___lldiv	;wreg free
  1424   000C30  0EFF               	movlw	255
  1425   000C32  2401               	addwf	?___lldiv^0,w,c
  1426   000C34  6E16               	movwf	Uart_Init@vx^0,c
  1427   000C36  0EFF               	movlw	255
  1428   000C38  2002               	addwfc	(?___lldiv+1)^0,w,c
  1429   000C3A  6E17               	movwf	(Uart_Init@vx+1)^0,c
  1430   000C3C                     
  1431                           ;uart.c: 20:     SPBRG = vx & 0x00FF;
  1432   000C3C  C016  FFAF         	movff	Uart_Init@vx,4015	;volatile
  1433   000C40                     
  1434                           ;uart.c: 21:     SPBRGH = vx >> 8;
  1435   000C40  5017               	movf	(Uart_Init@vx+1)^0,w,c
  1436   000C42  6EB0               	movwf	176,c	;volatile
  1437   000C44  0012               	return		;funcret
  1438   000C46                     __end_of_Uart_Init:
  1439                           	callstack 0
  1440                           
  1441 ;; *************** function ___lldiv *****************
  1442 ;; Defined at:
  1443 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  dividend        4    0[COMRAM] unsigned long 
  1446 ;;  divisor         4    4[COMRAM] unsigned long 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  quotient        4    8[COMRAM] unsigned long 
  1449 ;;  counter         1   12[COMRAM] unsigned char 
  1450 ;; Return value:  Size  Location     Type
  1451 ;;                  4    0[COMRAM] unsigned long 
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1459 ;;      Params:         8       0       0       0       0       0       0       0       0
  1460 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1461 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1462 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1463 ;;Total ram usage:       13 bytes
  1464 ;; Hardware stack levels used: 1
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_Uart_Init
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text11
  1473   000A46                     __ptext11:
  1474                           	callstack 0
  1475   000A46                     ___lldiv:
  1476                           	callstack 29
  1477   000A46  0E00               	movlw	0
  1478   000A48  6E09               	movwf	___lldiv@quotient^0,c
  1479   000A4A  0E00               	movlw	0
  1480   000A4C  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  1481   000A4E  0E00               	movlw	0
  1482   000A50  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  1483   000A52  0E00               	movlw	0
  1484   000A54  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  1485   000A56  5005               	movf	___lldiv@divisor^0,w,c
  1486   000A58  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  1487   000A5A  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  1488   000A5C  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  1489   000A5E  B4D8               	btfsc	status,2,c
  1490   000A60  EF34  F005         	goto	u471
  1491   000A64  EF36  F005         	goto	u470
  1492   000A68                     u471:
  1493   000A68  EF6C  F005         	goto	l141
  1494   000A6C                     u470:
  1495   000A6C  0E01               	movlw	1
  1496   000A6E  6E0D               	movwf	___lldiv@counter^0,c
  1497   000A70  EF40  F005         	goto	l1243
  1498   000A74                     l1241:
  1499   000A74  90D8               	bcf	status,0,c
  1500   000A76  3605               	rlcf	___lldiv@divisor^0,f,c
  1501   000A78  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  1502   000A7A  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  1503   000A7C  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  1504   000A7E  2A0D               	incf	___lldiv@counter^0,f,c
  1505   000A80                     l1243:
  1506   000A80  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  1507   000A82  EF45  F005         	goto	u481
  1508   000A86  EF47  F005         	goto	u480
  1509   000A8A                     u481:
  1510   000A8A  EF3A  F005         	goto	l1241
  1511   000A8E                     u480:
  1512   000A8E                     l1245:
  1513   000A8E  90D8               	bcf	status,0,c
  1514   000A90  3609               	rlcf	___lldiv@quotient^0,f,c
  1515   000A92  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  1516   000A94  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  1517   000A96  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  1518   000A98  5005               	movf	___lldiv@divisor^0,w,c
  1519   000A9A  5C01               	subwf	___lldiv@dividend^0,w,c
  1520   000A9C  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1521   000A9E  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  1522   000AA0  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1523   000AA2  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  1524   000AA4  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1525   000AA6  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  1526   000AA8  A0D8               	btfss	status,0,c
  1527   000AAA  EF59  F005         	goto	u491
  1528   000AAE  EF5B  F005         	goto	u490
  1529   000AB2                     u491:
  1530   000AB2  EF64  F005         	goto	l1253
  1531   000AB6                     u490:
  1532   000AB6  5005               	movf	___lldiv@divisor^0,w,c
  1533   000AB8  5E01               	subwf	___lldiv@dividend^0,f,c
  1534   000ABA  5006               	movf	(___lldiv@divisor+1)^0,w,c
  1535   000ABC  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  1536   000ABE  5007               	movf	(___lldiv@divisor+2)^0,w,c
  1537   000AC0  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  1538   000AC2  5008               	movf	(___lldiv@divisor+3)^0,w,c
  1539   000AC4  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  1540   000AC6  8009               	bsf	___lldiv@quotient^0,0,c
  1541   000AC8                     l1253:
  1542   000AC8  90D8               	bcf	status,0,c
  1543   000ACA  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  1544   000ACC  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  1545   000ACE  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  1546   000AD0  3205               	rrcf	___lldiv@divisor^0,f,c
  1547   000AD2  2E0D               	decfsz	___lldiv@counter^0,f,c
  1548   000AD4  EF47  F005         	goto	l1245
  1549   000AD8                     l141:
  1550   000AD8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1551   000ADC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1552   000AE0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1553   000AE4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1554   000AE8  0012               	return		;funcret
  1555   000AEA                     __end_of___lldiv:
  1556                           	callstack 0
  1557                           
  1558 ;; *************** function _ADC_Read *****************
  1559 ;; Defined at:
  1560 ;;		line 18 in file "adc.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  ch              1    wreg     unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  ch              1    2[COMRAM] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  2    0[COMRAM] unsigned int 
  1567 ;; Registers used:
  1568 ;;		wreg, status,2, status,0
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1574 ;;      Params:         2       0       0       0       0       0       0       0       0
  1575 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1576 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1577 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1578 ;;Total ram usage:        3 bytes
  1579 ;; Hardware stack levels used: 1
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text12
  1588   000CAA                     __ptext12:
  1589                           	callstack 0
  1590   000CAA                     _ADC_Read:
  1591                           	callstack 30
  1592                           
  1593                           ;incstack = 0
  1594                           ;ADC_Read@ch stored from wreg
  1595   000CAA  6E03               	movwf	ADC_Read@ch^0,c
  1596   000CAC                     
  1597                           ;adc.c: 18: unsigned int ADC_Read(unsigned char ch);adc.c: 19: {;adc.c: 20:     if(ch > 
      +                          13){
  1598   000CAC  0E0D               	movlw	13
  1599   000CAE  6403               	cpfsgt	ADC_Read@ch^0,c
  1600   000CB0  EF5C  F006         	goto	u521
  1601   000CB4  EF5E  F006         	goto	u520
  1602   000CB8                     u521:
  1603   000CB8  EF64  F006         	goto	l1287
  1604   000CBC                     u520:
  1605   000CBC                     
  1606                           ;adc.c: 21:         return 0;
  1607   000CBC  0E00               	movlw	0
  1608   000CBE  6E02               	movwf	(?_ADC_Read+1)^0,c
  1609   000CC0  0E00               	movlw	0
  1610   000CC2  6E01               	movwf	?_ADC_Read^0,c
  1611   000CC4  EF77  F006         	goto	l107
  1612   000CC8                     l1287:
  1613                           
  1614                           ;adc.c: 23:         ADCON0 = 0x00;
  1615   000CC8  0E00               	movlw	0
  1616   000CCA  6EC2               	movwf	194,c	;volatile
  1617   000CCC                     
  1618                           ;adc.c: 24:         ADCON0 = (ch << 2);
  1619   000CCC  4403               	rlncf	ADC_Read@ch^0,w,c
  1620   000CCE  46E8               	rlncf	wreg,f,c
  1621   000CD0  0BFC               	andlw	252
  1622   000CD2  6EC2               	movwf	194,c	;volatile
  1623   000CD4                     
  1624                           ;adc.c: 25:         ADCON0bits.ADON = 1;
  1625   000CD4  80C2               	bsf	194,0,c	;volatile
  1626   000CD6                     
  1627                           ;adc.c: 26:         ADCON0bits.GO_DONE = 1;
  1628   000CD6  82C2               	bsf	194,1,c	;volatile
  1629   000CD8                     l109:
  1630   000CD8  B2C2               	btfsc	194,1,c	;volatile
  1631   000CDA  EF71  F006         	goto	u531
  1632   000CDE  EF73  F006         	goto	u530
  1633   000CE2                     u531:
  1634   000CE2  EF6C  F006         	goto	l109
  1635   000CE6                     u530:
  1636   000CE6                     
  1637                           ;adc.c: 28:         return ADRES;
  1638   000CE6  CFC3 F001          	movff	4035,?_ADC_Read	;volatile
  1639   000CEA  CFC4 F002          	movff	4036,?_ADC_Read+1	;volatile
  1640   000CEE                     l107:
  1641   000CEE  0012               	return		;funcret
  1642   000CF0                     __end_of_ADC_Read:
  1643                           	callstack 0
  1644                           
  1645 ;; *************** function _ADC_Init *****************
  1646 ;; Defined at:
  1647 ;;		line 11 in file "adc.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  p_ang           1    wreg     unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  p_ang           1    0[COMRAM] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg, status,2
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1661 ;;      Params:         0       0       0       0       0       0       0       0       0
  1662 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1664 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1665 ;;Total ram usage:        1 bytes
  1666 ;; Hardware stack levels used: 1
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_main
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text13
  1675   000DC4                     __ptext13:
  1676                           	callstack 0
  1677   000DC4                     _ADC_Init:
  1678                           	callstack 30
  1679                           
  1680                           ;incstack = 0
  1681                           ;ADC_Init@p_ang stored from wreg
  1682   000DC4  6E01               	movwf	ADC_Init@p_ang^0,c
  1683   000DC6                     
  1684                           ;adc.c: 11: void ADC_Init(unsigned char p_ang);adc.c: 12: {;adc.c: 13:     ADCON1 = p_an
      +                          g;
  1685   000DC6  C001  FFC1         	movff	ADC_Init@p_ang,4033	;volatile
  1686   000DCA                     
  1687                           ;adc.c: 14:     ADCON0 = 0x00;
  1688   000DCA  0E00               	movlw	0
  1689   000DCC  6EC2               	movwf	194,c	;volatile
  1690   000DCE                     
  1691                           ;adc.c: 15:     ADCON2 = 0x8F;
  1692   000DCE  0E8F               	movlw	143
  1693   000DD0  6EC0               	movwf	192,c	;volatile
  1694   000DD2  0012               	return		;funcret
  1695   000DD4                     __end_of_ADC_Init:
  1696                           	callstack 0
  1697                           
  1698                           	psect	rparam
  1699   000000                     
  1700                           	psect	config
  1701                           
  1702                           ;Config register CONFIG1L @ 0x300000
  1703                           ;	PLL Prescaler Selection bits
  1704                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1705                           ;	System Clock Postscaler Selection bits
  1706                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1707                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1708                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1709   300000                     	org	3145728
  1710   300000  21                 	db	33
  1711                           
  1712                           ;Config register CONFIG1H @ 0x300001
  1713                           ;	Oscillator Selection bits
  1714                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  1715                           ;	Fail-Safe Clock Monitor Enable bit
  1716                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1717                           ;	Internal/External Oscillator Switchover bit
  1718                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1719   300001                     	org	3145729
  1720   300001  0E                 	db	14
  1721                           
  1722                           ;Config register CONFIG2L @ 0x300002
  1723                           ;	Power-up Timer Enable bit
  1724                           ;	PWRT = OFF, PWRT disabled
  1725                           ;	Brown-out Reset Enable bits
  1726                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1727                           ;	Brown-out Reset Voltage bits
  1728                           ;	BORV = 3, Minimum setting 2.05V
  1729                           ;	USB Voltage Regulator Enable bit
  1730                           ;	VREGEN = OFF, USB voltage regulator disabled
  1731   300002                     	org	3145730
  1732   300002  19                 	db	25
  1733                           
  1734                           ;Config register CONFIG2H @ 0x300003
  1735                           ;	Watchdog Timer Enable bit
  1736                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1737                           ;	Watchdog Timer Postscale Select bits
  1738                           ;	WDTPS = 32768, 1:32768
  1739   300003                     	org	3145731
  1740   300003  1E                 	db	30
  1741                           
  1742                           ; Padding undefined space
  1743   300004                     	org	3145732
  1744   300004  FF                 	db	255
  1745                           
  1746                           ;Config register CONFIG3H @ 0x300005
  1747                           ;	CCP2 MUX bit
  1748                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1749                           ;	PORTB A/D Enable bit
  1750                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1751                           ;	Low-Power Timer 1 Oscillator Enable bit
  1752                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1753                           ;	MCLR Pin Enable bit
  1754                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1755   300005                     	org	3145733
  1756   300005  81                 	db	129
  1757                           
  1758                           ;Config register CONFIG4L @ 0x300006
  1759                           ;	Stack Full/Underflow Reset Enable bit
  1760                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1761                           ;	Single-Supply ICSP Enable bit
  1762                           ;	LVP = OFF, Single-Supply ICSP disabled
  1763                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1764                           ;	ICPRT = OFF, ICPORT disabled
  1765                           ;	Extended Instruction Set Enable bit
  1766                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1767                           ;	Background Debugger Enable bit
  1768                           ;	DEBUG = 0x1, unprogrammed default
  1769   300006                     	org	3145734
  1770   300006  81                 	db	129
  1771                           
  1772                           ; Padding undefined space
  1773   300007                     	org	3145735
  1774   300007  FF                 	db	255
  1775                           
  1776                           ;Config register CONFIG5L @ 0x300008
  1777                           ;	Code Protection bit
  1778                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1779                           ;	Code Protection bit
  1780                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1781                           ;	Code Protection bit
  1782                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1783                           ;	Code Protection bit
  1784                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1785   300008                     	org	3145736
  1786   300008  0F                 	db	15
  1787                           
  1788                           ;Config register CONFIG5H @ 0x300009
  1789                           ;	Boot Block Code Protection bit
  1790                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1791                           ;	Data EEPROM Code Protection bit
  1792                           ;	CPD = OFF, Data EEPROM is not code-protected
  1793   300009                     	org	3145737
  1794   300009  C0                 	db	192
  1795                           
  1796                           ;Config register CONFIG6L @ 0x30000A
  1797                           ;	Write Protection bit
  1798                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1799                           ;	Write Protection bit
  1800                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1801                           ;	Write Protection bit
  1802                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1803                           ;	Write Protection bit
  1804                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1805   30000A                     	org	3145738
  1806   30000A  0F                 	db	15
  1807                           
  1808                           ;Config register CONFIG6H @ 0x30000B
  1809                           ;	Configuration Register Write Protection bit
  1810                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1811                           ;	Boot Block Write Protection bit
  1812                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1813                           ;	Data EEPROM Write Protection bit
  1814                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1815   30000B                     	org	3145739
  1816   30000B  E0                 	db	224
  1817                           
  1818                           ;Config register CONFIG7L @ 0x30000C
  1819                           ;	Table Read Protection bit
  1820                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1821                           ;	Table Read Protection bit
  1822                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1823                           ;	Table Read Protection bit
  1824                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1825                           ;	Table Read Protection bit
  1826                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1827   30000C                     	org	3145740
  1828   30000C  0F                 	db	15
  1829                           
  1830                           ;Config register CONFIG7H @ 0x30000D
  1831                           ;	Boot Block Table Read Protection bit
  1832                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1833   30000D                     	org	3145741
  1834   30000D  40                 	db	64
  1835                           tosu	equ	0xFFF
  1836                           tosh	equ	0xFFE
  1837                           tosl	equ	0xFFD
  1838                           stkptr	equ	0xFFC
  1839                           pclatu	equ	0xFFB
  1840                           pclath	equ	0xFFA
  1841                           pcl	equ	0xFF9
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           indf0	equ	0xFEF
  1849                           postinc0	equ	0xFEE
  1850                           postdec0	equ	0xFED
  1851                           preinc0	equ	0xFEC
  1852                           plusw0	equ	0xFEB
  1853                           fsr0h	equ	0xFEA
  1854                           fsr0l	equ	0xFE9
  1855                           wreg	equ	0xFE8
  1856                           indf1	equ	0xFE7
  1857                           postinc1	equ	0xFE6
  1858                           postdec1	equ	0xFE5
  1859                           preinc1	equ	0xFE4
  1860                           plusw1	equ	0xFE3
  1861                           fsr1h	equ	0xFE2
  1862                           fsr1l	equ	0xFE1
  1863                           bsr	equ	0xFE0
  1864                           indf2	equ	0xFDF
  1865                           postinc2	equ	0xFDE
  1866                           postdec2	equ	0xFDD
  1867                           preinc2	equ	0xFDC
  1868                           plusw2	equ	0xFDB
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8

Data Sizes:
    Strings     27
    Constant    0
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      83
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    S878$buffer	PTR unsigned char  size(2) Largest target is 0

    S878$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 27
		 -> STR_1(CODE[27]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 30
		 -> buffer(COMRAM[30]), 

    Uart_Send_String@info	PTR unsigned char  size(1) Largest target is 30
		 -> buffer(COMRAM[30]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 27
		 -> STR_1(CODE[27]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 27
		 -> STR_1(CODE[27]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 27
		 -> STR_1(CODE[27]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _Uart_Send_String->_Uart_Send_Char
    _Uart_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    3479
                                             42 COMRAM     6     6      0
                           _ADC_Init
                           _ADC_Read
                          _Uart_Init
                   _Uart_Send_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    2781
                                             23 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    2430
                                             19 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12     9      3    2080
                                              8 COMRAM    11     8      3
                            ___lwdiv
                            ___lwmod
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Uart_Send_String                                     1     0      1     136
                                              1 COMRAM     1     0      1
                     _Uart_Send_Char
 ---------------------------------------------------------------------------------
 (2) _Uart_Send_Char                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Uart_Init                                           10     6      4     457
                                             13 COMRAM    10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Uart_Init
     ___lldiv
   _Uart_Send_String
     _Uart_Send_Char
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___lwdiv
         ___lwmod
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0      20       6       20.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     30      53       1       87.4%
BITBIGSFRhhhh       3B      0       0      21        0.0%
BITBIGSFRl          34      0       0      26        0.0%
BITBIGSFRhlh         C      0       0      24        0.0%
BITBIGSFRhll         9      0       0      25        0.0%
BITBIGSFRhhlh        7      0       0      23        0.0%
BITBIGSFRhhhl        7      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73       3        0.0%
DATA                 0      0      73       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Apr 19 10:06:55 2024

                      l55 0DB0                        l64 0D8A                        l49 0C44  
                      l58 0DC2                       l103 0DD2                       l111 0CE6  
                     l107 0CEE                       l109 0CD8                       l141 0AD8  
                     l148 0AE8                       l612 0BD6                       l605 0BCE  
                     l622 0CA8                       l615 0CA0                       l836 0D2C  
                     l829 099A                       l848 0A44                       l792 0D60  
                     l963 0DB0                       l859 0DD4                       l965 0DBE  
                     l999 0DC6                       u160 0DBE                       u320 0B7E  
                     u400 09E2                       u161 0DBA                       u321 0B7A  
                     u401 09DE                       u330 0B9C                       u410 0A14  
                     u331 0B98                       u411 0A10                       u340 0BB8  
                     u420 0840                       u500 0D24                       u341 0BB4  
                     u421 083C                       u501 0D20                       u350 0C58  
                     u430 087E                       u351 0C54                       u431 087A  
                     u520 0CBC                       u360 0C76                       u440 08FA  
                     u521 0CB8                       u361 0C72                       u441 08F6  
                     u530 0CE6                       u370 0C8C                       u450 090A  
                     u531 0CE2                       u515 0C0C                       u371 0C88  
                     u451 0906                       u540 0D8A                       u380 09AC  
                     u460 093C                       u541 0D86                       u381 09A8  
                     u461 0938                       u470 0A6C                       u390 09BC  
                     u471 0A68                       u391 09B8                       u480 0A8E  
                     u481 0A8A                       u490 0AB6                       u491 0AB2  
                     u557 0B4E                       wreg 0FE8                      l1001 0DCA  
                    l1003 0DCE                      l1201 08A4                      l1211 090E  
                    l1203 08A8                      l1141 0B8E                      l1133 0B64  
                    l1213 0928                      l1205 08CC                      l1221 096C  
                    l1301 0D46                      l1311 0D72                      l1151 0BC2  
                    l1143 0B9C                      l1135 0B6C                      l1215 092A  
                    l1207 08E8                      l1303 0D56                      l1241 0A74  
                    l1313 0D74                      l1153 0BC8                      l1145 0BA2  
                    l1137 0B7E                      l1161 0C68                      l1209 08FA  
                    l1225 0978                      l1321 0B12                      l1251 0AC6  
                    l1243 0A80                      l1235 0A46                      l1307 0D62  
                    l1147 0BB8                      l1139 0B86                      l1163 0C76  
                    l1155 0C46                      l1171 099C                      l1219 0940  
                    l1323 0B20                      l1315 0AEA                      l1253 0AC8  
                    l1245 0A8E                      l1237 0A56                      l1309 0D66  
                    l1149 0BC0                      l1165 0C8C                      l1157 0C58  
                    l1181 0A14                      l1173 09AC                      l1333 095E  
                    l1261 0D08                      l1325 0B3C                      l1317 0AF0  
                    l1255 0AD2                      l1247 0A98                      l1239 0A6C  
                    l1271 0BE8                      l1167 0C94                      l1159 0C60  
                    l1175 09BC                      l1191 0854                      l1263 0D24  
                    l1327 0B44                      l1319 0B04                      l1281 0CBC  
                    l1249 0AB6                      l1273 0BEA                      l1169 0C9A  
                    l1177 09C6                      l1193 0858                      l1185 081E  
                    l1257 0CF0                      l1291 0CD4                      l1275 0C3C  
                    l1267 0BD8                      l1179 09E2                      l1195 0862  
                    l1187 0840                      l1259 0CF8                      l1293 0CD6  
                    l1277 0C40                      l1269 0BDC                      l1197 087E  
                    l1189 0848                      l1287 0CC8                      l1279 0CAC  
                    l1199 0896                      l1295 0D2E                      l1289 0CCC  
                    l1297 0D36                      l1299 0D3E                      STR_1 0801  
                    _dbuf 0060                      _main 0AEA                      _prec 0033  
                    fsr1h 0FE2                      fsr2h 0FDA                      indf2 0FDF  
                    fsr1l 0FE1                      fsr2l 0FD9          __end_of_ADC_Init 0DD4  
        __end_of_ADC_Read 0CF0                      start 0000              ___param_bank 0000  
                   ?_main 0001                     _ADRES 0FC3           __end_of___lldiv 0AEA  
         __end_of___lwdiv 0BD8           __end_of___lwmod 0CAA                     _RCREG 0FAE  
                   _RCSTA 0FAB              vfpfcnvrt@fmt 000A                     _SPBRG 0FAF  
                   _TXREG 0FAD                     _TXSTA 0FAC                     _flags 0035  
                   _fputc 099C                     _width 0031                     _putch 0DD4  
                   tablat 0FF5  __end_of_Uart_Send_String 0D8C                     status 0FD8  
         __end_of_sprintf 0D62           __initialization 0D8C              __end_of_main 0B64  
                  ??_main 002B             __activetblptr 0002                    _ADCON0 0FC2  
                  _ADCON1 0FC1                    _ADCON2 0FC0                    ?_fputc 0001  
                  ?_putch 0001                    _SPBRGH 0FB0              vfprintf@cfmt 0017  
               ??___lldiv 0009                 ??___lwdiv 0005                 ??___lwmod 0005  
                  _buffer 0036                    clear_0 0D92                    clear_1 0D9E  
                  isa$std 0001            _Uart_Send_Char 0DAE             main@valor_ch0 002D  
           main@valor_ch1 002F                    fputc@c 0001                 ?_ADC_Init 0001  
               ?_ADC_Read 0001              __mediumconst 0000                    tblptrh 0FF7  
                  tblptrl 0FF6                    tblptru 0FF8                    putch@c 0001  
        __end_of_vfprintf 0D2E                 ??_sprintf 001E                __accesstop 0060  
 __end_of__initialization 0DA4             ___rparam_used 0001            __pcstackCOMRAM 0001  
  __end_of_Uart_Send_Char 0DC4             __end_of_fputc 0A46             __end_of_putch 0DD6  
              ??_ADC_Init 0001                ??_ADC_Read 0003                   ??_fputc 0004  
                 ??_putch 0001                __pbssBANK0 0060         __end_of_Uart_Init 0C46  
         ?_Uart_Send_Char 0001                   _BAUDCON 0FB8                ADC_Read@ch 0003  
             Uart_Init@vx 0016         ?_Uart_Send_String 0002      Uart_Send_Char@txData 0001  
      ??_Uart_Send_String 0003                   __Hparam 0000                   __Lparam 0000  
                 ___lldiv 0A46                   ___lwdiv 0B64                   ___lwmod 0C46  
               ?_vfprintf 0014              __psmallconst 0800                   __pcinit 0D8C  
                 __ramtop 0800                   __ptext0 0AEA                   __ptext1 0D2E  
                 __ptext2 0CF0                   __ptext3 081E                   __ptext4 099C  
                 __ptext5 0DD4                   __ptext6 0C46                   __ptext7 0B64  
                 __ptext8 0D62                   __ptext9 0DAE                   _sprintf 0D2E  
    end_of_initialization 0DA4                   fputc@fp 0003             __Lmediumconst 0000  
         ___lldiv@divisor 0005             Uart_Init@baud 000E           ___lldiv@counter 000D  
       __end_of_vfpfcnvrt 099C                 _RCSTAbits 0FAB                   postdec2 0FDD  
                 postinc0 0FEE                   postinc1 0FE6                   postinc2 0FDE  
        vfpfcnvrt@convarg 000E                ??_vfprintf 0017                 _TRISCbits 0F94  
               _TXSTAbits 0FAC               vfpfcnvrt@ap 000B               vfpfcnvrt@cp 0012  
             vfpfcnvrt@fp 0009               _BAUDCONbits 0FB8       start_initialization 0D8C  
        ??_Uart_Send_Char 0001                 _Uart_Init 0BD8               vfprintf@fmt 0015  
             __pbssCOMRAM 0031          ___lwdiv@dividend 0001                ?_Uart_Init 000E  
                ?___lldiv 0001                  ?___lwdiv 0001                  ?___lwmod 0001  
             __smallconst 0800                  _ADC_Init 0DC4                  _ADC_Read 0CAA  
        ___lwdiv@quotient 0005                  ?_sprintf 0018                  _PIR1bits 0F9E  
               _vfpfcnvrt 081E                _ADCON0bits 0FC2                vfpfcnvrt@c 0013  
                __Hrparam 0000               ??_Uart_Init 0012                vfprintf@ap 0016  
                __Lrparam 0000                vfprintf@fp 0014             ADC_Init@p_ang 0001  
              ?_vfpfcnvrt 0009                sprintf@fmt 0019           ___lwdiv@divisor 0003  
         ___lwdiv@counter 0007                  __ptext10 0BD8                  __ptext11 0A46  
                __ptext12 0CAA                  __ptext13 0DC4      Uart_Send_String@info 0002  
                isa$xinst 0000                  _vfprintf 0CF0          _Uart_Send_String 0D62  
               sprintf@ap 001E          ___lwmod@dividend 0001          ___lldiv@dividend 0001  
             ??_vfpfcnvrt 000C                  sprintf@f 001F                  sprintf@s 0018  
        ___lldiv@quotient 0009           ___lwmod@divisor 0003           ___lwmod@counter 0005  
