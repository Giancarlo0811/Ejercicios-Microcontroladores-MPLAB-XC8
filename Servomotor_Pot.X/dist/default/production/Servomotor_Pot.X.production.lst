

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Mar 30 10:12:12 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Generated 23/03/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4550 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59   000000                     _T0CONbits	set	4053
    60   000000                     _ADCON0bits	set	4034
    61   000000                     _LATDbits	set	3980
    62   000000                     _TRISDbits	set	3989
    63   000000                     _ADCON2	set	4032
    64   000000                     _ADCON1	set	4033
    65   000000                     _ADRES	set	4035
    66   000000                     _T0CON	set	4053
    67   000000                     _INTCONbits	set	4082
    68   000000                     _ADCON0	set	4034
    69   000000                     _TMR0	set	4054
    70                           
    71                           ; #config settings
    72                           
    73                           	psect	cinit
    74   000C1E                     __pcinit:
    75                           	callstack 0
    76   000C1E                     start_initialization:
    77                           	callstack 0
    78   000C1E                     __initialization:
    79                           	callstack 0
    80                           
    81                           ; Clear objects allocated to COMRAM (10 bytes)
    82   000C1E  EE00  F032         	lfsr	0,__pbssCOMRAM
    83   000C22  0E0A               	movlw	10
    84   000C24                     clear_0:
    85   000C24  6AEE               	clrf	postinc0,c
    86   000C26  06E8               	decf	wreg,f,c
    87   000C28  E1FD               	bnz	clear_0
    88   000C2A                     end_of_initialization:
    89                           	callstack 0
    90   000C2A                     __end_of__initialization:
    91                           	callstack 0
    92   000C2A  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    93   000C2C  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    94   000C2E  0100               	movlb	0
    95   000C30  EFE9  F004         	goto	_main	;jump to C main() function
    96                           
    97                           	psect	bssCOMRAM
    98   000032                     __pbssCOMRAM:
    99                           	callstack 0
   100   000032                     _data_s:
   101                           	callstack 0
   102   000032                     	ds	8
   103   00003A                     _cont_sr:
   104                           	callstack 0
   105   00003A                     	ds	2
   106                           
   107                           	psect	cstackCOMRAM
   108   000001                     __pcstackCOMRAM:
   109                           	callstack 0
   110   000001                     ?_ADC_Read:
   111                           	callstack 0
   112   000001                     ?___awdiv:
   113                           	callstack 0
   114   000001                     ?___lmul:
   115                           	callstack 0
   116   000001                     ADC_Init@p_ang:
   117                           	callstack 0
   118   000001                     ___awdiv@dividend:
   119                           	callstack 0
   120   000001                     ___lmul@multiplier:
   121                           	callstack 0
   122                           
   123                           ; 4 bytes @ 0x0
   124   000001                     	ds	2
   125   000003                     ADC_Read@ch:
   126                           	callstack 0
   127   000003                     ___awdiv@divisor:
   128                           	callstack 0
   129                           
   130                           ; 2 bytes @ 0x2
   131   000003                     	ds	2
   132   000005                     ___awdiv@counter:
   133                           	callstack 0
   134   000005                     ___lmul@multiplicand:
   135                           	callstack 0
   136                           
   137                           ; 4 bytes @ 0x4
   138   000005                     	ds	1
   139   000006                     ___awdiv@sign:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0x5
   143   000006                     	ds	1
   144   000007                     ___awdiv@quotient:
   145                           	callstack 0
   146                           
   147                           ; 2 bytes @ 0x6
   148   000007                     	ds	2
   149   000009                     Servo_1_Write@ang:
   150                           	callstack 0
   151   000009                     ___lmul@product:
   152                           	callstack 0
   153                           
   154                           ; 4 bytes @ 0x8
   155   000009                     	ds	4
   156   00000D                     ?___aldiv:
   157                           	callstack 0
   158   00000D                     ___aldiv@dividend:
   159                           	callstack 0
   160                           
   161                           ; 4 bytes @ 0xC
   162   00000D                     	ds	4
   163   000011                     ___aldiv@divisor:
   164                           	callstack 0
   165                           
   166                           ; 4 bytes @ 0x10
   167   000011                     	ds	4
   168   000015                     ___aldiv@counter:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0x14
   172   000015                     	ds	1
   173   000016                     ___aldiv@sign:
   174                           	callstack 0
   175                           
   176                           ; 1 bytes @ 0x15
   177   000016                     	ds	1
   178   000017                     ___aldiv@quotient:
   179                           	callstack 0
   180                           
   181                           ; 4 bytes @ 0x16
   182   000017                     	ds	4
   183   00001B                     ?_map:
   184                           	callstack 0
   185   00001B                     map@x:
   186                           	callstack 0
   187                           
   188                           ; 4 bytes @ 0x1A
   189   00001B                     	ds	4
   190   00001F                     map@eMin:
   191                           	callstack 0
   192                           
   193                           ; 4 bytes @ 0x1E
   194   00001F                     	ds	4
   195   000023                     map@eMax:
   196                           	callstack 0
   197                           
   198                           ; 4 bytes @ 0x22
   199   000023                     	ds	4
   200   000027                     map@sMin:
   201                           	callstack 0
   202                           
   203                           ; 4 bytes @ 0x26
   204   000027                     	ds	4
   205   00002B                     map@sMax:
   206                           	callstack 0
   207                           
   208                           ; 4 bytes @ 0x2A
   209   00002B                     	ds	4
   210   00002F                     main@valor_pot:
   211                           	callstack 0
   212                           
   213                           ; 2 bytes @ 0x2E
   214   00002F                     	ds	2
   215   000031                     main@angulo:
   216                           	callstack 0
   217                           
   218                           ; 1 bytes @ 0x30
   219   000031                     	ds	1
   220                           
   221 ;;
   222 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   223 ;;
   224 ;; *************** function _main *****************
   225 ;; Defined at:
   226 ;;		line 24 in file "servomotor_pot.c"
   227 ;; Parameters:    Size  Location     Type
   228 ;;		None
   229 ;; Auto vars:     Size  Location     Type
   230 ;;  valor_pot       2   46[COMRAM] int 
   231 ;;  angulo          1   48[COMRAM] unsigned char 
   232 ;; Return value:  Size  Location     Type
   233 ;;                  1    wreg      void 
   234 ;; Registers used:
   235 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   236 ;; Tracked objects:
   237 ;;		On entry : 0/0
   238 ;;		On exit  : 0/0
   239 ;;		Unchanged: 0/0
   240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   241 ;;      Params:         0       0       0       0       0       0       0       0       0
   242 ;;      Locals:         3       0       0       0       0       0       0       0       0
   243 ;;      Temps:          0       0       0       0       0       0       0       0       0
   244 ;;      Totals:         3       0       0       0       0       0       0       0       0
   245 ;;Total ram usage:        3 bytes
   246 ;; Hardware stack levels required when called: 3
   247 ;; This function calls:
   248 ;;		_ADC_Init
   249 ;;		_ADC_Read
   250 ;;		_Servo_1_Write
   251 ;;		_Servo_Init
   252 ;;		_map
   253 ;; This function is called by:
   254 ;;		Startup code after reset
   255 ;; This function uses a non-reentrant model
   256 ;;
   257                           
   258                           	psect	text0
   259   0009D2                     __ptext0:
   260                           	callstack 0
   261   0009D2                     _main:
   262                           	callstack 28
   263   0009D2                     
   264                           ;servomotor_pot.c: 25:     ADC_Init(0x0E);
   265   0009D2  0E0E               	movlw	14
   266   0009D4  EC1A  F006         	call	_ADC_Init
   267                           
   268                           ;servomotor_pot.c: 26:     Servo_Init();
   269   0009D8  EC02  F006         	call	_Servo_Init	;wreg free
   270   0009DC                     l1023:
   271                           
   272                           ;servomotor_pot.c: 29:         int valor_pot = ADC_Read(0);
   273   0009DC  0E00               	movlw	0
   274   0009DE  ECCE  F005         	call	_ADC_Read
   275   0009E2  C001  F02F         	movff	?_ADC_Read,main@valor_pot
   276   0009E6  C002  F030         	movff	?_ADC_Read+1,main@valor_pot+1
   277   0009EA                     
   278                           ;servomotor_pot.c: 30:         unsigned char angulo = map(valor_pot, 0, 1023, 0, 180);
   279   0009EA  C02F  F01B         	movff	main@valor_pot,map@x
   280   0009EE  C030  F01C         	movff	main@valor_pot+1,map@x+1
   281   0009F2  0E00               	movlw	0
   282   0009F4  BE1C               	btfsc	(map@x+1)^0,7,c
   283   0009F6  0EFF               	movlw	-1
   284   0009F8  6E1D               	movwf	(map@x+2)^0,c
   285   0009FA  6E1E               	movwf	(map@x+3)^0,c
   286   0009FC  0E00               	movlw	0
   287   0009FE  6E1F               	movwf	map@eMin^0,c
   288   000A00  0E00               	movlw	0
   289   000A02  6E20               	movwf	(map@eMin+1)^0,c
   290   000A04  0E00               	movlw	0
   291   000A06  6E21               	movwf	(map@eMin+2)^0,c
   292   000A08  0E00               	movlw	0
   293   000A0A  6E22               	movwf	(map@eMin+3)^0,c
   294   000A0C  0EFF               	movlw	255
   295   000A0E  6E23               	movwf	map@eMax^0,c
   296   000A10  0E03               	movlw	3
   297   000A12  6E24               	movwf	(map@eMax+1)^0,c
   298   000A14  0E00               	movlw	0
   299   000A16  6E25               	movwf	(map@eMax+2)^0,c
   300   000A18  0E00               	movlw	0
   301   000A1A  6E26               	movwf	(map@eMax+3)^0,c
   302   000A1C  0E00               	movlw	0
   303   000A1E  6E27               	movwf	map@sMin^0,c
   304   000A20  0E00               	movlw	0
   305   000A22  6E28               	movwf	(map@sMin+1)^0,c
   306   000A24  0E00               	movlw	0
   307   000A26  6E29               	movwf	(map@sMin+2)^0,c
   308   000A28  0E00               	movlw	0
   309   000A2A  6E2A               	movwf	(map@sMin+3)^0,c
   310   000A2C  0EB4               	movlw	180
   311   000A2E  6E2B               	movwf	map@sMax^0,c
   312   000A30  0E00               	movlw	0
   313   000A32  6E2C               	movwf	(map@sMax+1)^0,c
   314   000A34  0E00               	movlw	0
   315   000A36  6E2D               	movwf	(map@sMax+2)^0,c
   316   000A38  0E00               	movlw	0
   317   000A3A  6E2E               	movwf	(map@sMax+3)^0,c
   318   000A3C  EC29  F005         	call	_map	;wreg free
   319   000A40  501B               	movf	?_map^0,w,c
   320   000A42  6E31               	movwf	main@angulo^0,c
   321   000A44                     
   322                           ;servomotor_pot.c: 31:         Servo_1_Write(angulo);
   323   000A44  5031               	movf	main@angulo^0,w,c
   324   000A46  ECF1  F005         	call	_Servo_1_Write
   325   000A4A  EFEE  F004         	goto	l1023
   326   000A4E  EF07  F000         	goto	start
   327   000A52                     __end_of_main:
   328                           	callstack 0
   329                           
   330 ;; *************** function _map *****************
   331 ;; Defined at:
   332 ;;		line 3 in file "./map_function.h"
   333 ;; Parameters:    Size  Location     Type
   334 ;;  x               4   26[COMRAM] long 
   335 ;;  eMin            4   30[COMRAM] long 
   336 ;;  eMax            4   34[COMRAM] long 
   337 ;;  sMin            4   38[COMRAM] long 
   338 ;;  sMax            4   42[COMRAM] long 
   339 ;; Auto vars:     Size  Location     Type
   340 ;;		None
   341 ;; Return value:  Size  Location     Type
   342 ;;                  4   26[COMRAM] long 
   343 ;; Registers used:
   344 ;;		wreg, status,2, status,0, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   350 ;;      Params:        20       0       0       0       0       0       0       0       0
   351 ;;      Locals:         0       0       0       0       0       0       0       0       0
   352 ;;      Temps:          0       0       0       0       0       0       0       0       0
   353 ;;      Totals:        20       0       0       0       0       0       0       0       0
   354 ;;Total ram usage:       20 bytes
   355 ;; Hardware stack levels used: 1
   356 ;; Hardware stack levels required when called: 2
   357 ;; This function calls:
   358 ;;		___aldiv
   359 ;;		___lmul
   360 ;; This function is called by:
   361 ;;		_main
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           	psect	text1
   366   000A52                     __ptext1:
   367                           	callstack 0
   368   000A52                     _map:
   369                           	callstack 28
   370   000A52                     
   371                           ;./map_function.h: 3: long map(long x, long eMin, long eMax, long sMin, long sMax);./map
      +                          _function.h: 4: {;./map_function.h: 5:   return(x -eMin)*(sMax-sMin)/(eMax-eMin)+sMin;
   372   000A52  501F               	movf	map@eMin^0,w,c
   373   000A54  5C1B               	subwf	map@x^0,w,c
   374   000A56  6E01               	movwf	___lmul@multiplier^0,c
   375   000A58  5020               	movf	(map@eMin+1)^0,w,c
   376   000A5A  581C               	subwfb	(map@x+1)^0,w,c
   377   000A5C  6E02               	movwf	(___lmul@multiplier+1)^0,c
   378   000A5E  5021               	movf	(map@eMin+2)^0,w,c
   379   000A60  581D               	subwfb	(map@x+2)^0,w,c
   380   000A62  6E03               	movwf	(___lmul@multiplier+2)^0,c
   381   000A64  5022               	movf	(map@eMin+3)^0,w,c
   382   000A66  581E               	subwfb	(map@x+3)^0,w,c
   383   000A68  6E04               	movwf	(___lmul@multiplier+3)^0,c
   384   000A6A  5027               	movf	map@sMin^0,w,c
   385   000A6C  5C2B               	subwf	map@sMax^0,w,c
   386   000A6E  6E05               	movwf	___lmul@multiplicand^0,c
   387   000A70  5028               	movf	(map@sMin+1)^0,w,c
   388   000A72  582C               	subwfb	(map@sMax+1)^0,w,c
   389   000A74  6E06               	movwf	(___lmul@multiplicand+1)^0,c
   390   000A76  5029               	movf	(map@sMin+2)^0,w,c
   391   000A78  582D               	subwfb	(map@sMax+2)^0,w,c
   392   000A7A  6E07               	movwf	(___lmul@multiplicand+2)^0,c
   393   000A7C  502A               	movf	(map@sMin+3)^0,w,c
   394   000A7E  582E               	subwfb	(map@sMax+3)^0,w,c
   395   000A80  6E08               	movwf	(___lmul@multiplicand+3)^0,c
   396   000A82  EC66  F005         	call	___lmul	;wreg free
   397   000A86  C001  F00D         	movff	?___lmul,___aldiv@dividend
   398   000A8A  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
   399   000A8E  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
   400   000A92  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
   401   000A96  501F               	movf	map@eMin^0,w,c
   402   000A98  5C23               	subwf	map@eMax^0,w,c
   403   000A9A  6E11               	movwf	___aldiv@divisor^0,c
   404   000A9C  5020               	movf	(map@eMin+1)^0,w,c
   405   000A9E  5824               	subwfb	(map@eMax+1)^0,w,c
   406   000AA0  6E12               	movwf	(___aldiv@divisor+1)^0,c
   407   000AA2  5021               	movf	(map@eMin+2)^0,w,c
   408   000AA4  5825               	subwfb	(map@eMax+2)^0,w,c
   409   000AA6  6E13               	movwf	(___aldiv@divisor+2)^0,c
   410   000AA8  5022               	movf	(map@eMin+3)^0,w,c
   411   000AAA  5826               	subwfb	(map@eMax+3)^0,w,c
   412   000AAC  6E14               	movwf	(___aldiv@divisor+3)^0,c
   413   000AAE  EC01  F004         	call	___aldiv	;wreg free
   414   000AB2  5027               	movf	map@sMin^0,w,c
   415   000AB4  240D               	addwf	?___aldiv^0,w,c
   416   000AB6  6E1B               	movwf	?_map^0,c
   417   000AB8  5028               	movf	(map@sMin+1)^0,w,c
   418   000ABA  200E               	addwfc	(?___aldiv+1)^0,w,c
   419   000ABC  6E1C               	movwf	(?_map+1)^0,c
   420   000ABE  5029               	movf	(map@sMin+2)^0,w,c
   421   000AC0  200F               	addwfc	(?___aldiv+2)^0,w,c
   422   000AC2  6E1D               	movwf	(?_map+2)^0,c
   423   000AC4  502A               	movf	(map@sMin+3)^0,w,c
   424   000AC6  2010               	addwfc	(?___aldiv+3)^0,w,c
   425   000AC8  6E1E               	movwf	(?_map+3)^0,c
   426   000ACA  0012               	return		;funcret
   427   000ACC                     __end_of_map:
   428                           	callstack 0
   429                           
   430 ;; *************** function ___lmul *****************
   431 ;; Defined at:
   432 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;  multiplier      4    0[COMRAM] unsigned long 
   435 ;;  multiplicand    4    4[COMRAM] unsigned long 
   436 ;; Auto vars:     Size  Location     Type
   437 ;;  product         4    8[COMRAM] unsigned long 
   438 ;; Return value:  Size  Location     Type
   439 ;;                  4    0[COMRAM] unsigned long 
   440 ;; Registers used:
   441 ;;		wreg, status,2, status,0
   442 ;; Tracked objects:
   443 ;;		On entry : 0/0
   444 ;;		On exit  : 0/0
   445 ;;		Unchanged: 0/0
   446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   447 ;;      Params:         8       0       0       0       0       0       0       0       0
   448 ;;      Locals:         4       0       0       0       0       0       0       0       0
   449 ;;      Temps:          0       0       0       0       0       0       0       0       0
   450 ;;      Totals:        12       0       0       0       0       0       0       0       0
   451 ;;Total ram usage:       12 bytes
   452 ;; Hardware stack levels used: 1
   453 ;; Hardware stack levels required when called: 1
   454 ;; This function calls:
   455 ;;		Nothing
   456 ;; This function is called by:
   457 ;;		_map
   458 ;; This function uses a non-reentrant model
   459 ;;
   460                           
   461                           	psect	text2
   462   000ACC                     __ptext2:
   463                           	callstack 0
   464   000ACC                     ___lmul:
   465                           	callstack 28
   466   000ACC  0E00               	movlw	0
   467   000ACE  6E09               	movwf	___lmul@product^0,c
   468   000AD0  0E00               	movlw	0
   469   000AD2  6E0A               	movwf	(___lmul@product+1)^0,c
   470   000AD4  0E00               	movlw	0
   471   000AD6  6E0B               	movwf	(___lmul@product+2)^0,c
   472   000AD8  0E00               	movlw	0
   473   000ADA  6E0C               	movwf	(___lmul@product+3)^0,c
   474   000ADC                     l903:
   475   000ADC  A001               	btfss	___lmul@multiplier^0,0,c
   476   000ADE  EF73  F005         	goto	u201
   477   000AE2  EF75  F005         	goto	u200
   478   000AE6                     u201:
   479   000AE6  EF7D  F005         	goto	l907
   480   000AEA                     u200:
   481   000AEA  5005               	movf	___lmul@multiplicand^0,w,c
   482   000AEC  2609               	addwf	___lmul@product^0,f,c
   483   000AEE  5006               	movf	(___lmul@multiplicand+1)^0,w,c
   484   000AF0  220A               	addwfc	(___lmul@product+1)^0,f,c
   485   000AF2  5007               	movf	(___lmul@multiplicand+2)^0,w,c
   486   000AF4  220B               	addwfc	(___lmul@product+2)^0,f,c
   487   000AF6  5008               	movf	(___lmul@multiplicand+3)^0,w,c
   488   000AF8  220C               	addwfc	(___lmul@product+3)^0,f,c
   489   000AFA                     l907:
   490   000AFA  90D8               	bcf	status,0,c
   491   000AFC  3605               	rlcf	___lmul@multiplicand^0,f,c
   492   000AFE  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
   493   000B00  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
   494   000B02  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
   495   000B04  90D8               	bcf	status,0,c
   496   000B06  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
   497   000B08  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
   498   000B0A  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
   499   000B0C  3201               	rrcf	___lmul@multiplier^0,f,c
   500   000B0E  5001               	movf	___lmul@multiplier^0,w,c
   501   000B10  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
   502   000B12  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
   503   000B14  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
   504   000B16  A4D8               	btfss	status,2,c
   505   000B18  EF90  F005         	goto	u211
   506   000B1C  EF92  F005         	goto	u210
   507   000B20                     u211:
   508   000B20  EF6E  F005         	goto	l903
   509   000B24                     u210:
   510   000B24  C009  F001         	movff	___lmul@product,?___lmul
   511   000B28  C00A  F002         	movff	___lmul@product+1,?___lmul+1
   512   000B2C  C00B  F003         	movff	___lmul@product+2,?___lmul+2
   513   000B30  C00C  F004         	movff	___lmul@product+3,?___lmul+3
   514   000B34  0012               	return		;funcret
   515   000B36                     __end_of___lmul:
   516                           	callstack 0
   517                           
   518 ;; *************** function ___aldiv *****************
   519 ;; Defined at:
   520 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\aldiv.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;  dividend        4   12[COMRAM] long 
   523 ;;  divisor         4   16[COMRAM] long 
   524 ;; Auto vars:     Size  Location     Type
   525 ;;  quotient        4   22[COMRAM] long 
   526 ;;  sign            1   21[COMRAM] unsigned char 
   527 ;;  counter         1   20[COMRAM] unsigned char 
   528 ;; Return value:  Size  Location     Type
   529 ;;                  4   12[COMRAM] long 
   530 ;; Registers used:
   531 ;;		wreg, status,2, status,0
   532 ;; Tracked objects:
   533 ;;		On entry : 0/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   537 ;;      Params:         8       0       0       0       0       0       0       0       0
   538 ;;      Locals:         6       0       0       0       0       0       0       0       0
   539 ;;      Temps:          0       0       0       0       0       0       0       0       0
   540 ;;      Totals:        14       0       0       0       0       0       0       0       0
   541 ;;Total ram usage:       14 bytes
   542 ;; Hardware stack levels used: 1
   543 ;; Hardware stack levels required when called: 1
   544 ;; This function calls:
   545 ;;		Nothing
   546 ;; This function is called by:
   547 ;;		_map
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text3
   552   000802                     __ptext3:
   553                           	callstack 0
   554   000802                     ___aldiv:
   555                           	callstack 28
   556   000802  0E00               	movlw	0
   557   000804  6E16               	movwf	___aldiv@sign^0,c
   558   000806  BE14               	btfsc	(___aldiv@divisor+3)^0,7,c
   559   000808  EF0A  F004         	goto	u220
   560   00080C  EF08  F004         	goto	u221
   561   000810                     u221:
   562   000810  EF14  F004         	goto	l919
   563   000814                     u220:
   564   000814  1E14               	comf	(___aldiv@divisor+3)^0,f,c
   565   000816  1E13               	comf	(___aldiv@divisor+2)^0,f,c
   566   000818  1E12               	comf	(___aldiv@divisor+1)^0,f,c
   567   00081A  6C11               	negf	___aldiv@divisor^0,c
   568   00081C  0E00               	movlw	0
   569   00081E  2212               	addwfc	(___aldiv@divisor+1)^0,f,c
   570   000820  2213               	addwfc	(___aldiv@divisor+2)^0,f,c
   571   000822  2214               	addwfc	(___aldiv@divisor+3)^0,f,c
   572   000824  0E01               	movlw	1
   573   000826  6E16               	movwf	___aldiv@sign^0,c
   574   000828                     l919:
   575   000828  BE10               	btfsc	(___aldiv@dividend+3)^0,7,c
   576   00082A  EF1B  F004         	goto	u230
   577   00082E  EF19  F004         	goto	u231
   578   000832                     u231:
   579   000832  EF25  F004         	goto	l925
   580   000836                     u230:
   581   000836  1E10               	comf	(___aldiv@dividend+3)^0,f,c
   582   000838  1E0F               	comf	(___aldiv@dividend+2)^0,f,c
   583   00083A  1E0E               	comf	(___aldiv@dividend+1)^0,f,c
   584   00083C  6C0D               	negf	___aldiv@dividend^0,c
   585   00083E  0E00               	movlw	0
   586   000840  220E               	addwfc	(___aldiv@dividend+1)^0,f,c
   587   000842  220F               	addwfc	(___aldiv@dividend+2)^0,f,c
   588   000844  2210               	addwfc	(___aldiv@dividend+3)^0,f,c
   589   000846  0E01               	movlw	1
   590   000848  1A16               	xorwf	___aldiv@sign^0,f,c
   591   00084A                     l925:
   592   00084A  0E00               	movlw	0
   593   00084C  6E17               	movwf	___aldiv@quotient^0,c
   594   00084E  0E00               	movlw	0
   595   000850  6E18               	movwf	(___aldiv@quotient+1)^0,c
   596   000852  0E00               	movlw	0
   597   000854  6E19               	movwf	(___aldiv@quotient+2)^0,c
   598   000856  0E00               	movlw	0
   599   000858  6E1A               	movwf	(___aldiv@quotient+3)^0,c
   600   00085A  5011               	movf	___aldiv@divisor^0,w,c
   601   00085C  1012               	iorwf	(___aldiv@divisor+1)^0,w,c
   602   00085E  1013               	iorwf	(___aldiv@divisor+2)^0,w,c
   603   000860  1014               	iorwf	(___aldiv@divisor+3)^0,w,c
   604   000862  B4D8               	btfsc	status,2,c
   605   000864  EF36  F004         	goto	u241
   606   000868  EF38  F004         	goto	u240
   607   00086C                     u241:
   608   00086C  EF6E  F004         	goto	l947
   609   000870                     u240:
   610   000870  0E01               	movlw	1
   611   000872  6E15               	movwf	___aldiv@counter^0,c
   612   000874  EF42  F004         	goto	l933
   613   000878                     l931:
   614   000878  90D8               	bcf	status,0,c
   615   00087A  3611               	rlcf	___aldiv@divisor^0,f,c
   616   00087C  3612               	rlcf	(___aldiv@divisor+1)^0,f,c
   617   00087E  3613               	rlcf	(___aldiv@divisor+2)^0,f,c
   618   000880  3614               	rlcf	(___aldiv@divisor+3)^0,f,c
   619   000882  2A15               	incf	___aldiv@counter^0,f,c
   620   000884                     l933:
   621   000884  AE14               	btfss	(___aldiv@divisor+3)^0,7,c
   622   000886  EF47  F004         	goto	u251
   623   00088A  EF49  F004         	goto	u250
   624   00088E                     u251:
   625   00088E  EF3C  F004         	goto	l931
   626   000892                     u250:
   627   000892                     l935:
   628   000892  90D8               	bcf	status,0,c
   629   000894  3617               	rlcf	___aldiv@quotient^0,f,c
   630   000896  3618               	rlcf	(___aldiv@quotient+1)^0,f,c
   631   000898  3619               	rlcf	(___aldiv@quotient+2)^0,f,c
   632   00089A  361A               	rlcf	(___aldiv@quotient+3)^0,f,c
   633   00089C  5011               	movf	___aldiv@divisor^0,w,c
   634   00089E  5C0D               	subwf	___aldiv@dividend^0,w,c
   635   0008A0  5012               	movf	(___aldiv@divisor+1)^0,w,c
   636   0008A2  580E               	subwfb	(___aldiv@dividend+1)^0,w,c
   637   0008A4  5013               	movf	(___aldiv@divisor+2)^0,w,c
   638   0008A6  580F               	subwfb	(___aldiv@dividend+2)^0,w,c
   639   0008A8  5014               	movf	(___aldiv@divisor+3)^0,w,c
   640   0008AA  5810               	subwfb	(___aldiv@dividend+3)^0,w,c
   641   0008AC  A0D8               	btfss	status,0,c
   642   0008AE  EF5B  F004         	goto	u261
   643   0008B2  EF5D  F004         	goto	u260
   644   0008B6                     u261:
   645   0008B6  EF66  F004         	goto	l943
   646   0008BA                     u260:
   647   0008BA  5011               	movf	___aldiv@divisor^0,w,c
   648   0008BC  5E0D               	subwf	___aldiv@dividend^0,f,c
   649   0008BE  5012               	movf	(___aldiv@divisor+1)^0,w,c
   650   0008C0  5A0E               	subwfb	(___aldiv@dividend+1)^0,f,c
   651   0008C2  5013               	movf	(___aldiv@divisor+2)^0,w,c
   652   0008C4  5A0F               	subwfb	(___aldiv@dividend+2)^0,f,c
   653   0008C6  5014               	movf	(___aldiv@divisor+3)^0,w,c
   654   0008C8  5A10               	subwfb	(___aldiv@dividend+3)^0,f,c
   655   0008CA  8017               	bsf	___aldiv@quotient^0,0,c
   656   0008CC                     l943:
   657   0008CC  90D8               	bcf	status,0,c
   658   0008CE  3214               	rrcf	(___aldiv@divisor+3)^0,f,c
   659   0008D0  3213               	rrcf	(___aldiv@divisor+2)^0,f,c
   660   0008D2  3212               	rrcf	(___aldiv@divisor+1)^0,f,c
   661   0008D4  3211               	rrcf	___aldiv@divisor^0,f,c
   662   0008D6  2E15               	decfsz	___aldiv@counter^0,f,c
   663   0008D8  EF49  F004         	goto	l935
   664   0008DC                     l947:
   665   0008DC  5016               	movf	___aldiv@sign^0,w,c
   666   0008DE  B4D8               	btfsc	status,2,c
   667   0008E0  EF74  F004         	goto	u271
   668   0008E4  EF76  F004         	goto	u270
   669   0008E8                     u271:
   670   0008E8  EF7E  F004         	goto	l951
   671   0008EC                     u270:
   672   0008EC  1E1A               	comf	(___aldiv@quotient+3)^0,f,c
   673   0008EE  1E19               	comf	(___aldiv@quotient+2)^0,f,c
   674   0008F0  1E18               	comf	(___aldiv@quotient+1)^0,f,c
   675   0008F2  6C17               	negf	___aldiv@quotient^0,c
   676   0008F4  0E00               	movlw	0
   677   0008F6  2218               	addwfc	(___aldiv@quotient+1)^0,f,c
   678   0008F8  2219               	addwfc	(___aldiv@quotient+2)^0,f,c
   679   0008FA  221A               	addwfc	(___aldiv@quotient+3)^0,f,c
   680   0008FC                     l951:
   681   0008FC  C017  F00D         	movff	___aldiv@quotient,?___aldiv
   682   000900  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
   683   000904  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
   684   000908  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
   685   00090C  0012               	return		;funcret
   686   00090E                     __end_of___aldiv:
   687                           	callstack 0
   688                           
   689 ;; *************** function _Servo_Init *****************
   690 ;; Defined at:
   691 ;;		line 14 in file "servo.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;		None
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   705 ;;      Params:         0       0       0       0       0       0       0       0       0
   706 ;;      Locals:         0       0       0       0       0       0       0       0       0
   707 ;;      Temps:          0       0       0       0       0       0       0       0       0
   708 ;;      Totals:         0       0       0       0       0       0       0       0       0
   709 ;;Total ram usage:        0 bytes
   710 ;; Hardware stack levels used: 1
   711 ;; Hardware stack levels required when called: 1
   712 ;; This function calls:
   713 ;;		Nothing
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text4
   720   000C04                     __ptext4:
   721                           	callstack 0
   722   000C04                     _Servo_Init:
   723                           	callstack 29
   724   000C04                     
   725                           ;servo.c: 17:     TRISDbits.RD0 = 0;
   726   000C04  9095               	bcf	149,0,c	;volatile
   727                           
   728                           ;servo.c: 18:     LATDbits.LD0 = 0;
   729   000C06  908C               	bcf	140,0,c	;volatile
   730                           
   731                           ;servo.c: 56:     INTCONbits.GIE = 1;
   732   000C08  8EF2               	bsf	242,7,c	;volatile
   733                           
   734                           ;servo.c: 57:     INTCONbits.TMR0IE = 1;
   735   000C0A  8AF2               	bsf	242,5,c	;volatile
   736                           
   737                           ;servo.c: 58:     INTCONbits.TMR0IF = 0;
   738   000C0C  94F2               	bcf	242,2,c	;volatile
   739   000C0E                     
   740                           ;servo.c: 59:     T0CON = 0x50;
   741   000C0E  0E50               	movlw	80
   742   000C10  6ED5               	movwf	213,c	;volatile
   743   000C12                     
   744                           ;servo.c: 60:     T0CONbits.TMR0ON = 1;
   745   000C12  8ED5               	bsf	213,7,c	;volatile
   746                           
   747                           ;servo.c: 61:     TMR0 = 50;
   748   000C14  0E00               	movlw	0
   749   000C16  6ED7               	movwf	215,c	;volatile
   750   000C18  0E32               	movlw	50
   751   000C1A  6ED6               	movwf	214,c	;volatile
   752   000C1C  0012               	return		;funcret
   753   000C1E                     __end_of_Servo_Init:
   754                           	callstack 0
   755                           
   756 ;; *************** function _Servo_1_Write *****************
   757 ;; Defined at:
   758 ;;		line 65 in file "servo.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  ang             1    wreg     unsigned char 
   761 ;; Auto vars:     Size  Location     Type
   762 ;;  ang             1    8[COMRAM] unsigned char 
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   772 ;;      Params:         0       0       0       0       0       0       0       0       0
   773 ;;      Locals:         1       0       0       0       0       0       0       0       0
   774 ;;      Temps:          0       0       0       0       0       0       0       0       0
   775 ;;      Totals:         1       0       0       0       0       0       0       0       0
   776 ;;Total ram usage:        1 bytes
   777 ;; Hardware stack levels used: 1
   778 ;; Hardware stack levels required when called: 2
   779 ;; This function calls:
   780 ;;		___awdiv
   781 ;; This function is called by:
   782 ;;		_main
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text5
   787   000BE2                     __ptext5:
   788                           	callstack 0
   789   000BE2                     _Servo_1_Write:
   790                           	callstack 28
   791                           
   792                           ;incstack = 0
   793                           ;Servo_1_Write@ang stored from wreg
   794   000BE2  6E09               	movwf	Servo_1_Write@ang^0,c
   795   000BE4                     
   796                           ;servo.c: 65: void Servo_1_Write(unsigned char ang);servo.c: 66: {;servo.c: 67:     data
      +                          _s[0] = (ang-0)*(60 -14)/(180-0)+14;
   797   000BE4  5009               	movf	Servo_1_Write@ang^0,w,c
   798   000BE6  0D2E               	mullw	46
   799   000BE8  CFF3 F001          	movff	prodl,___awdiv@dividend
   800   000BEC  CFF4 F002          	movff	prodh,___awdiv@dividend+1
   801   000BF0  0E00               	movlw	0
   802   000BF2  6E04               	movwf	(___awdiv@divisor+1)^0,c
   803   000BF4  0EB4               	movlw	180
   804   000BF6  6E03               	movwf	___awdiv@divisor^0,c
   805   000BF8  EC87  F004         	call	___awdiv	;wreg free
   806   000BFC  5001               	movf	?___awdiv^0,w,c
   807   000BFE  0F0E               	addlw	14
   808   000C00  6E32               	movwf	_data_s^0,c
   809   000C02  0012               	return		;funcret
   810   000C04                     __end_of_Servo_1_Write:
   811                           	callstack 0
   812                           
   813 ;; *************** function ___awdiv *****************
   814 ;; Defined at:
   815 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  dividend        2    0[COMRAM] int 
   818 ;;  divisor         2    2[COMRAM] int 
   819 ;; Auto vars:     Size  Location     Type
   820 ;;  quotient        2    6[COMRAM] int 
   821 ;;  sign            1    5[COMRAM] unsigned char 
   822 ;;  counter         1    4[COMRAM] unsigned char 
   823 ;; Return value:  Size  Location     Type
   824 ;;                  2    0[COMRAM] int 
   825 ;; Registers used:
   826 ;;		wreg, status,2, status,0
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   832 ;;      Params:         4       0       0       0       0       0       0       0       0
   833 ;;      Locals:         4       0       0       0       0       0       0       0       0
   834 ;;      Temps:          0       0       0       0       0       0       0       0       0
   835 ;;      Totals:         8       0       0       0       0       0       0       0       0
   836 ;;Total ram usage:        8 bytes
   837 ;; Hardware stack levels used: 1
   838 ;; Hardware stack levels required when called: 1
   839 ;; This function calls:
   840 ;;		Nothing
   841 ;; This function is called by:
   842 ;;		_Servo_1_Write
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text6
   847   00090E                     __ptext6:
   848                           	callstack 0
   849   00090E                     ___awdiv:
   850                           	callstack 28
   851   00090E  0E00               	movlw	0
   852   000910  6E06               	movwf	___awdiv@sign^0,c
   853   000912  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   854   000914  EF90  F004         	goto	u280
   855   000918  EF8E  F004         	goto	u281
   856   00091C                     u281:
   857   00091C  EF96  F004         	goto	l963
   858   000920                     u280:
   859   000920  6C03               	negf	___awdiv@divisor^0,c
   860   000922  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   861   000924  B0D8               	btfsc	status,0,c
   862   000926  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   863   000928  0E01               	movlw	1
   864   00092A  6E06               	movwf	___awdiv@sign^0,c
   865   00092C                     l963:
   866   00092C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   867   00092E  EF9D  F004         	goto	u290
   868   000932  EF9B  F004         	goto	u291
   869   000936                     u291:
   870   000936  EFA3  F004         	goto	l969
   871   00093A                     u290:
   872   00093A  6C01               	negf	___awdiv@dividend^0,c
   873   00093C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   874   00093E  B0D8               	btfsc	status,0,c
   875   000940  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   876   000942  0E01               	movlw	1
   877   000944  1A06               	xorwf	___awdiv@sign^0,f,c
   878   000946                     l969:
   879   000946  0E00               	movlw	0
   880   000948  6E08               	movwf	(___awdiv@quotient+1)^0,c
   881   00094A  0E00               	movlw	0
   882   00094C  6E07               	movwf	___awdiv@quotient^0,c
   883   00094E  5003               	movf	___awdiv@divisor^0,w,c
   884   000950  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   885   000952  B4D8               	btfsc	status,2,c
   886   000954  EFAE  F004         	goto	u301
   887   000958  EFB0  F004         	goto	u300
   888   00095C                     u301:
   889   00095C  EFD8  F004         	goto	l991
   890   000960                     u300:
   891   000960  0E01               	movlw	1
   892   000962  6E05               	movwf	___awdiv@counter^0,c
   893   000964  EFB8  F004         	goto	l977
   894   000968                     l975:
   895   000968  90D8               	bcf	status,0,c
   896   00096A  3603               	rlcf	___awdiv@divisor^0,f,c
   897   00096C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   898   00096E  2A05               	incf	___awdiv@counter^0,f,c
   899   000970                     l977:
   900   000970  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   901   000972  EFBD  F004         	goto	u311
   902   000976  EFBF  F004         	goto	u310
   903   00097A                     u311:
   904   00097A  EFB4  F004         	goto	l975
   905   00097E                     u310:
   906   00097E                     l979:
   907   00097E  90D8               	bcf	status,0,c
   908   000980  3607               	rlcf	___awdiv@quotient^0,f,c
   909   000982  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   910   000984  5003               	movf	___awdiv@divisor^0,w,c
   911   000986  5C01               	subwf	___awdiv@dividend^0,w,c
   912   000988  5004               	movf	(___awdiv@divisor+1)^0,w,c
   913   00098A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   914   00098C  A0D8               	btfss	status,0,c
   915   00098E  EFCB  F004         	goto	u321
   916   000992  EFCD  F004         	goto	u320
   917   000996                     u321:
   918   000996  EFD2  F004         	goto	l987
   919   00099A                     u320:
   920   00099A  5003               	movf	___awdiv@divisor^0,w,c
   921   00099C  5E01               	subwf	___awdiv@dividend^0,f,c
   922   00099E  5004               	movf	(___awdiv@divisor+1)^0,w,c
   923   0009A0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   924   0009A2  8007               	bsf	___awdiv@quotient^0,0,c
   925   0009A4                     l987:
   926   0009A4  90D8               	bcf	status,0,c
   927   0009A6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   928   0009A8  3203               	rrcf	___awdiv@divisor^0,f,c
   929   0009AA  2E05               	decfsz	___awdiv@counter^0,f,c
   930   0009AC  EFBF  F004         	goto	l979
   931   0009B0                     l991:
   932   0009B0  5006               	movf	___awdiv@sign^0,w,c
   933   0009B2  B4D8               	btfsc	status,2,c
   934   0009B4  EFDE  F004         	goto	u331
   935   0009B8  EFE0  F004         	goto	u330
   936   0009BC                     u331:
   937   0009BC  EFE4  F004         	goto	l995
   938   0009C0                     u330:
   939   0009C0  6C07               	negf	___awdiv@quotient^0,c
   940   0009C2  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   941   0009C4  B0D8               	btfsc	status,0,c
   942   0009C6  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   943   0009C8                     l995:
   944   0009C8  C007  F001         	movff	___awdiv@quotient,?___awdiv
   945   0009CC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   946   0009D0  0012               	return		;funcret
   947   0009D2                     __end_of___awdiv:
   948                           	callstack 0
   949                           
   950 ;; *************** function _ADC_Read *****************
   951 ;; Defined at:
   952 ;;		line 18 in file "adc.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  ch              1    wreg     unsigned char 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  ch              1    2[COMRAM] unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  2    0[COMRAM] unsigned int 
   959 ;; Registers used:
   960 ;;		wreg, status,2, status,0
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   966 ;;      Params:         2       0       0       0       0       0       0       0       0
   967 ;;      Locals:         1       0       0       0       0       0       0       0       0
   968 ;;      Temps:          0       0       0       0       0       0       0       0       0
   969 ;;      Totals:         3       0       0       0       0       0       0       0       0
   970 ;;Total ram usage:        3 bytes
   971 ;; Hardware stack levels used: 1
   972 ;; Hardware stack levels required when called: 1
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text7
   981   000B9C                     __ptext7:
   982                           	callstack 0
   983   000B9C                     _ADC_Read:
   984                           	callstack 29
   985                           
   986                           ;incstack = 0
   987                           ;ADC_Read@ch stored from wreg
   988   000B9C  6E03               	movwf	ADC_Read@ch^0,c
   989   000B9E                     
   990                           ;adc.c: 18: unsigned int ADC_Read(unsigned char ch);adc.c: 19: {;adc.c: 20:     if(ch > 
      +                          13){
   991   000B9E  0E0D               	movlw	13
   992   000BA0  6403               	cpfsgt	ADC_Read@ch^0,c
   993   000BA2  EFD5  F005         	goto	u341
   994   000BA6  EFD7  F005         	goto	u340
   995   000BAA                     u341:
   996   000BAA  EFDD  F005         	goto	l1011
   997   000BAE                     u340:
   998   000BAE                     
   999                           ;adc.c: 21:         return 0;
  1000   000BAE  0E00               	movlw	0
  1001   000BB0  6E02               	movwf	(?_ADC_Read+1)^0,c
  1002   000BB2  0E00               	movlw	0
  1003   000BB4  6E01               	movwf	?_ADC_Read^0,c
  1004   000BB6  EFF0  F005         	goto	l36
  1005   000BBA                     l1011:
  1006                           
  1007                           ;adc.c: 23:         ADCON0 = 0x00;
  1008   000BBA  0E00               	movlw	0
  1009   000BBC  6EC2               	movwf	194,c	;volatile
  1010   000BBE                     
  1011                           ;adc.c: 24:         ADCON0 = (ch << 2);
  1012   000BBE  4403               	rlncf	ADC_Read@ch^0,w,c
  1013   000BC0  46E8               	rlncf	wreg,f,c
  1014   000BC2  0BFC               	andlw	252
  1015   000BC4  6EC2               	movwf	194,c	;volatile
  1016   000BC6                     
  1017                           ;adc.c: 25:         ADCON0bits.ADON = 1;
  1018   000BC6  80C2               	bsf	194,0,c	;volatile
  1019   000BC8                     
  1020                           ;adc.c: 26:         ADCON0bits.GO_DONE = 1;
  1021   000BC8  82C2               	bsf	194,1,c	;volatile
  1022   000BCA                     l38:
  1023   000BCA  B2C2               	btfsc	194,1,c	;volatile
  1024   000BCC  EFEA  F005         	goto	u351
  1025   000BD0  EFEC  F005         	goto	u350
  1026   000BD4                     u351:
  1027   000BD4  EFE5  F005         	goto	l38
  1028   000BD8                     u350:
  1029   000BD8                     
  1030                           ;adc.c: 28:         return ADRES;
  1031   000BD8  CFC3 F001          	movff	4035,?_ADC_Read	;volatile
  1032   000BDC  CFC4 F002          	movff	4036,?_ADC_Read+1	;volatile
  1033   000BE0                     l36:
  1034   000BE0  0012               	return		;funcret
  1035   000BE2                     __end_of_ADC_Read:
  1036                           	callstack 0
  1037                           
  1038 ;; *************** function _ADC_Init *****************
  1039 ;; Defined at:
  1040 ;;		line 11 in file "adc.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  p_ang           1    wreg     unsigned char 
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;  p_ang           1    0[COMRAM] unsigned char 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, status,2
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1054 ;;      Params:         0       0       0       0       0       0       0       0       0
  1055 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1057 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1058 ;;Total ram usage:        1 bytes
  1059 ;; Hardware stack levels used: 1
  1060 ;; Hardware stack levels required when called: 1
  1061 ;; This function calls:
  1062 ;;		Nothing
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text8
  1069   000C34                     __ptext8:
  1070                           	callstack 0
  1071   000C34                     _ADC_Init:
  1072                           	callstack 29
  1073                           
  1074                           ;incstack = 0
  1075                           ;ADC_Init@p_ang stored from wreg
  1076   000C34  6E01               	movwf	ADC_Init@p_ang^0,c
  1077   000C36                     
  1078                           ;adc.c: 11: void ADC_Init(unsigned char p_ang);adc.c: 12: {;adc.c: 13:     ADCON1 = p_an
      +                          g;
  1079   000C36  C001  FFC1         	movff	ADC_Init@p_ang,4033	;volatile
  1080   000C3A                     
  1081                           ;adc.c: 14:     ADCON0 = 0x00;
  1082   000C3A  0E00               	movlw	0
  1083   000C3C  6EC2               	movwf	194,c	;volatile
  1084   000C3E                     
  1085                           ;adc.c: 15:     ADCON2 = 0x8F;
  1086   000C3E  0E8F               	movlw	143
  1087   000C40  6EC0               	movwf	192,c	;volatile
  1088   000C42  0012               	return		;funcret
  1089   000C44                     __end_of_ADC_Init:
  1090                           	callstack 0
  1091                           
  1092 ;; *************** function _TMR0_ISR *****************
  1093 ;; Defined at:
  1094 ;;		line 121 in file "servo.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;		None
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      void 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2, status,0
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1108 ;;      Params:         0       0       0       0       0       0       0       0       0
  1109 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1111 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1112 ;;Total ram usage:        0 bytes
  1113 ;; Hardware stack levels used: 1
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		Interrupt level 2
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           	psect	intcode
  1122   000008                     __pintcode:
  1123                           	callstack 0
  1124   000008                     _TMR0_ISR:
  1125                           	callstack 28
  1126                           
  1127                           ;incstack = 0
  1128   000008  823C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1129   00000A  ED9B  F005         	call	int_func,f	;refresh shadow registers
  1130                           
  1131                           	psect	intcode_body
  1132   000B36                     __pintcode_body:
  1133                           	callstack 28
  1134   000B36                     int_func:
  1135                           	callstack 28
  1136   000B36  0006               	pop		; remove dummy address from shadow register refresh
  1137   000B38                     
  1138                           ;servo.c: 123:     if(INTCONbits.TMR0IF == 1)
  1139   000B38  A4F2               	btfss	242,2,c	;volatile
  1140   000B3A  EFA1  F005         	goto	i2u17_41
  1141   000B3E  EFA3  F005         	goto	i2u17_40
  1142   000B42                     i2u17_41:
  1143   000B42  EFCC  F005         	goto	i2l71
  1144   000B46                     i2u17_40:
  1145   000B46                     
  1146                           ;servo.c: 124:     {;servo.c: 125:         cont_sr = cont_sr + 1;
  1147   000B46  0E01               	movlw	1
  1148   000B48  243A               	addwf	_cont_sr^0,w,c
  1149   000B4A  6E3A               	movwf	_cont_sr^0,c
  1150   000B4C  0E00               	movlw	0
  1151   000B4E  203B               	addwfc	(_cont_sr+1)^0,w,c
  1152   000B50  6E3B               	movwf	(_cont_sr+1)^0,c
  1153                           
  1154                           ;servo.c: 126:         if(cont_sr > 490){
  1155   000B52  0EEB               	movlw	235
  1156   000B54  5C3A               	subwf	_cont_sr^0,w,c
  1157   000B56  0E01               	movlw	1
  1158   000B58  583B               	subwfb	(_cont_sr+1)^0,w,c
  1159   000B5A  A0D8               	btfss	status,0,c
  1160   000B5C  EFB2  F005         	goto	i2u18_41
  1161   000B60  EFB4  F005         	goto	i2u18_40
  1162   000B64                     i2u18_41:
  1163   000B64  EFB8  F005         	goto	i2l893
  1164   000B68                     i2u18_40:
  1165   000B68                     
  1166                           ;servo.c: 127:             cont_sr = 0;
  1167   000B68  0E00               	movlw	0
  1168   000B6A  6E3B               	movwf	(_cont_sr+1)^0,c
  1169   000B6C  0E00               	movlw	0
  1170   000B6E  6E3A               	movwf	_cont_sr^0,c
  1171   000B70                     i2l893:
  1172                           
  1173                           ;servo.c: 130:         if(cont_sr < data_s[0]){LATDbits.LD0 = 1;} else{LATDbits.LD0 = 0;
      +                          }
  1174   000B70  5032               	movf	_data_s^0,w,c
  1175   000B72  5C3A               	subwf	_cont_sr^0,w,c
  1176   000B74  0E00               	movlw	0
  1177   000B76  583B               	subwfb	(_cont_sr+1)^0,w,c
  1178   000B78  B0D8               	btfsc	status,0,c
  1179   000B7A  EFC1  F005         	goto	i2u19_41
  1180   000B7E  EFC3  F005         	goto	i2u19_40
  1181   000B82                     i2u19_41:
  1182   000B82  EFC6  F005         	goto	i2l69
  1183   000B86                     i2u19_40:
  1184   000B86  808C               	bsf	140,0,c	;volatile
  1185   000B88  EFC7  F005         	goto	i2l897
  1186   000B8C                     i2l69:
  1187   000B8C  908C               	bcf	140,0,c	;volatile
  1188   000B8E                     i2l897:
  1189                           
  1190                           ;servo.c: 161:         TMR0 = 50;
  1191   000B8E  0E00               	movlw	0
  1192   000B90  6ED7               	movwf	215,c	;volatile
  1193   000B92  0E32               	movlw	50
  1194   000B94  6ED6               	movwf	214,c	;volatile
  1195   000B96                     
  1196                           ;servo.c: 162:         INTCONbits.TMR0IF = 0;
  1197   000B96  94F2               	bcf	242,2,c	;volatile
  1198   000B98                     i2l71:
  1199   000B98  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1200   000B9A  0011               	retfie		f
  1201   000B9C                     __end_of_TMR0_ISR:
  1202                           	callstack 0
  1203                           
  1204                           	psect	smallconst
  1205   000800                     __psmallconst:
  1206                           	callstack 0
  1207   000800  00                 	db	0
  1208   000801  00                 	db	0	; dummy byte at the end
  1209   000000                     
  1210                           	psect	rparam
  1211   000000                     
  1212                           	psect	temp
  1213   00003C                     btemp:
  1214                           	callstack 0
  1215   00003C                     	ds	1
  1216   000000                     int$flags	set	btemp
  1217   000000                     wtemp8	set	btemp+1
  1218   000000                     ttemp5	set	btemp+1
  1219   000000                     ttemp6	set	btemp+4
  1220   000000                     ttemp7	set	btemp+8
  1221                           
  1222                           	psect	config
  1223                           
  1224                           ;Config register CONFIG1L @ 0x300000
  1225                           ;	PLL Prescaler Selection bits
  1226                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1227                           ;	System Clock Postscaler Selection bits
  1228                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1229                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1230                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1231   300000                     	org	3145728
  1232   300000  21                 	db	33
  1233                           
  1234                           ;Config register CONFIG1H @ 0x300001
  1235                           ;	Oscillator Selection bits
  1236                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  1237                           ;	Fail-Safe Clock Monitor Enable bit
  1238                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1239                           ;	Internal/External Oscillator Switchover bit
  1240                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1241   300001                     	org	3145729
  1242   300001  0E                 	db	14
  1243                           
  1244                           ;Config register CONFIG2L @ 0x300002
  1245                           ;	Power-up Timer Enable bit
  1246                           ;	PWRT = OFF, PWRT disabled
  1247                           ;	Brown-out Reset Enable bits
  1248                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1249                           ;	Brown-out Reset Voltage bits
  1250                           ;	BORV = 3, Minimum setting 2.05V
  1251                           ;	USB Voltage Regulator Enable bit
  1252                           ;	VREGEN = OFF, USB voltage regulator disabled
  1253   300002                     	org	3145730
  1254   300002  19                 	db	25
  1255                           
  1256                           ;Config register CONFIG2H @ 0x300003
  1257                           ;	Watchdog Timer Enable bit
  1258                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1259                           ;	Watchdog Timer Postscale Select bits
  1260                           ;	WDTPS = 32768, 1:32768
  1261   300003                     	org	3145731
  1262   300003  1E                 	db	30
  1263                           
  1264                           ; Padding undefined space
  1265   300004                     	org	3145732
  1266   300004  FF                 	db	255
  1267                           
  1268                           ;Config register CONFIG3H @ 0x300005
  1269                           ;	CCP2 MUX bit
  1270                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1271                           ;	PORTB A/D Enable bit
  1272                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1273                           ;	Low-Power Timer 1 Oscillator Enable bit
  1274                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1275                           ;	MCLR Pin Enable bit
  1276                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1277   300005                     	org	3145733
  1278   300005  81                 	db	129
  1279                           
  1280                           ;Config register CONFIG4L @ 0x300006
  1281                           ;	Stack Full/Underflow Reset Enable bit
  1282                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1283                           ;	Single-Supply ICSP Enable bit
  1284                           ;	LVP = OFF, Single-Supply ICSP disabled
  1285                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1286                           ;	ICPRT = OFF, ICPORT disabled
  1287                           ;	Extended Instruction Set Enable bit
  1288                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1289                           ;	Background Debugger Enable bit
  1290                           ;	DEBUG = 0x1, unprogrammed default
  1291   300006                     	org	3145734
  1292   300006  81                 	db	129
  1293                           
  1294                           ; Padding undefined space
  1295   300007                     	org	3145735
  1296   300007  FF                 	db	255
  1297                           
  1298                           ;Config register CONFIG5L @ 0x300008
  1299                           ;	Code Protection bit
  1300                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1301                           ;	Code Protection bit
  1302                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1303                           ;	Code Protection bit
  1304                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1305                           ;	Code Protection bit
  1306                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1307   300008                     	org	3145736
  1308   300008  0F                 	db	15
  1309                           
  1310                           ;Config register CONFIG5H @ 0x300009
  1311                           ;	Boot Block Code Protection bit
  1312                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1313                           ;	Data EEPROM Code Protection bit
  1314                           ;	CPD = OFF, Data EEPROM is not code-protected
  1315   300009                     	org	3145737
  1316   300009  C0                 	db	192
  1317                           
  1318                           ;Config register CONFIG6L @ 0x30000A
  1319                           ;	Write Protection bit
  1320                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1321                           ;	Write Protection bit
  1322                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1323                           ;	Write Protection bit
  1324                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1325                           ;	Write Protection bit
  1326                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1327   30000A                     	org	3145738
  1328   30000A  0F                 	db	15
  1329                           
  1330                           ;Config register CONFIG6H @ 0x30000B
  1331                           ;	Configuration Register Write Protection bit
  1332                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1333                           ;	Boot Block Write Protection bit
  1334                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1335                           ;	Data EEPROM Write Protection bit
  1336                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1337   30000B                     	org	3145739
  1338   30000B  E0                 	db	224
  1339                           
  1340                           ;Config register CONFIG7L @ 0x30000C
  1341                           ;	Table Read Protection bit
  1342                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1343                           ;	Table Read Protection bit
  1344                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1345                           ;	Table Read Protection bit
  1346                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1347                           ;	Table Read Protection bit
  1348                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1349   30000C                     	org	3145740
  1350   30000C  0F                 	db	15
  1351                           
  1352                           ;Config register CONFIG7H @ 0x30000D
  1353                           ;	Boot Block Table Read Protection bit
  1354                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1355   30000D                     	org	3145741
  1356   30000D  40                 	db	64
  1357                           tosu	equ	0xFFF
  1358                           tosh	equ	0xFFE
  1359                           tosl	equ	0xFFD
  1360                           stkptr	equ	0xFFC
  1361                           pclatu	equ	0xFFB
  1362                           pclath	equ	0xFFA
  1363                           pcl	equ	0xFF9
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           prodh	equ	0xFF4
  1369                           prodl	equ	0xFF3
  1370                           indf0	equ	0xFEF
  1371                           postinc0	equ	0xFEE
  1372                           postdec0	equ	0xFED
  1373                           preinc0	equ	0xFEC
  1374                           plusw0	equ	0xFEB
  1375                           fsr0h	equ	0xFEA
  1376                           fsr0l	equ	0xFE9
  1377                           wreg	equ	0xFE8
  1378                           indf1	equ	0xFE7
  1379                           postinc1	equ	0xFE6
  1380                           postdec1	equ	0xFE5
  1381                           preinc1	equ	0xFE4
  1382                           plusw1	equ	0xFE3
  1383                           fsr1h	equ	0xFE2
  1384                           fsr1l	equ	0xFE1
  1385                           bsr	equ	0xFE0
  1386                           indf2	equ	0xFDF
  1387                           postinc2	equ	0xFDE
  1388                           postdec2	equ	0xFDD
  1389                           preinc2	equ	0xFDC
  1390                           plusw2	equ	0xFDB
  1391                           fsr2h	equ	0xFDA
  1392                           fsr2l	equ	0xFD9
  1393                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      59
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_map
    _map->___aldiv
    ___aldiv->___lmul
    _Servo_1_Write->___awdiv

Critical Paths under _TMR0_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _TMR0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMR0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMR0_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMR0_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMR0_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1935
                                             46 COMRAM     3     3      0
                           _ADC_Init
                           _ADC_Read
                      _Servo_1_Write
                         _Servo_Init
                                _map
 ---------------------------------------------------------------------------------
 (1) _map                                                 20     0     20    1356
                                             26 COMRAM    20     0     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Servo_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Servo_1_Write                                        1     1      0     474
                                              8 COMRAM     1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _Servo_1_Write
     ___awdiv
   _Servo_Init
   _map
     ___aldiv
       ___lmul (ARG)
     ___lmul

 _TMR0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      3B       1       62.8%
BITBIGSFRlll        2C      0       0      26        0.0%
BITBIGSFRlh         2A      0       0      24        0.0%
BITBIGSFRhlh        1A      0       0      22        0.0%
BITBIGSFRhll        10      0       0      23        0.0%
BITBIGSFRhh          D      0       0      21        0.0%
BITBIGSFRllh         8      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3B       3        0.0%
DATA                 0      0      3B       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Mar 30 10:12:12 2024

                     l11 0ACA                       l32 0C42                       l40 0BD8  
                     l36 0BE0                       l38 0BCA                       l62 0C02  
                     l59 0C1C                       l85 0B24                       l86 0B34  
           ___awdiv@sign 0006                      l305 09D0                      l153 090C  
                    l901 0ACC                      l911 0802                      l903 0ADC  
                    l921 0836                      l913 0806                      l905 0AEA  
                    l851 0C3A                      l931 0878                      l923 0846  
                    l915 0814                      l907 0AFA                      l853 0C3E  
                    l941 08CA                      l933 0884                      l925 084A  
                    l917 0824                      l909 0B04                      l855 0C04  
                    l951 08FC                      l943 08CC                      l935 0892  
                    l927 085A                      l919 0828                      l849 0C36  
                    l961 0928                      l857 0C0E                      l945 08D6  
                    l937 089C                      l929 0870                      l971 094E  
                    l963 092C                      l955 090E                      l859 0C12  
                    l939 08BA                      l947 08DC                      l981 0984  
                    l973 0960                      l965 093A                      l957 0912  
                    l949 08EC                      l983 099A                      l975 0968  
                    l991 09B0                      l967 0942                      l959 0920  
                    l993 09C0                      l985 09A2                      l977 0970  
                    l969 0946                      l995 09C8                      l987 09A4  
                    l979 097E                      l989 09AA                      l999 0A52  
                    u200 0AEA                      u201 0AE6                      u210 0B24  
                    u211 0B20                      u300 0960                      u220 0814  
                    u301 095C                      u221 0810                      u310 097E  
                    u230 0836                      u311 097A                      u231 0832  
                    u320 099A                      u240 0870                      u321 0996  
                    u241 086C                      u330 09C0                      u250 0892  
                    u331 09BC                      u251 088E                      u340 0BAE  
                    u260 08BA                      u341 0BAA                      u261 08B6  
                    u350 0BD8                      u270 08EC                      u351 0BD4  
                    u271 08E8                      u280 0920                      u281 091C  
                    u290 093A                      u291 0936                      _map 0A52  
                    wreg 0FE8                     l1011 0BBA                     l1003 0B9E  
                   l1013 0BBE                     l1005 0BAE                     l1021 09D2  
                   l1015 0BC6                     l1023 09DC                     l1017 0BC8  
                   l1025 09EA                     l1019 0BE4                     l1027 0A44  
                   ?_map 001B                     i2l71 0B98                     i2l69 0B8C  
                   _TMR0 0FD6                     _main 09D2                     map@x 001B  
                   btemp 003C         __end_of_ADC_Init 0C44         __end_of_ADC_Read 0BE2  
                   prodh 0FF4                     prodl 0FF3                     start 000E  
           ___param_bank 0000                    ??_map 002F          __end_of___aldiv 090E  
                  ?_main 0001          __end_of___awdiv 09D2                    _ADRES 0FC3  
                  _T0CON 0FD5          ___awdiv@divisor 0003                    i2l891 0B68  
        ___awdiv@counter 0005                    i2l893 0B70                    i2l895 0B86  
                  i2l887 0B38                    i2l897 0B8E                    i2l889 0B46  
                  i2l899 0B96      ___lmul@multiplicand 0005         __end_of_TMR0_ISR 0B9C  
                  ttemp5 003D                    ttemp6 0040                    ttemp7 0044  
                  status 0FD8                    wtemp8 003D          __initialization 0C1E  
           __end_of_main 0A52                   ??_main 002F            __activetblptr 0000  
                 _ADCON0 0FC2                   _ADCON1 0FC1                   _ADCON2 0FC0  
       ___awdiv@dividend 0001    __end_of_Servo_1_Write 0C04                   ___lmul 0ACC  
              ??___aldiv 0015                ??___awdiv 0005                   _data_s 0032  
             _Servo_Init 0C04                   clear_0 0C24         ___awdiv@quotient 0007  
                 isa$std 0001            main@valor_pot 002F                ?_ADC_Init 0001  
              ?_ADC_Read 0001             __mediumconst 0000               __accesstop 0060  
__end_of__initialization 0C2A            ___rparam_used 0001           __pcstackCOMRAM 0001  
              ?_TMR0_ISR 0001               ??_ADC_Init 0001               ??_ADC_Read 0003  
                ?___lmul 0001               ??_TMR0_ISR 0001              ?_Servo_Init 0001  
         ___lmul@product 0009               ADC_Read@ch 0003                  i2u17_40 0B46  
                i2u17_41 0B42                  i2u18_40 0B68                  i2u18_41 0B64  
                i2u19_40 0B86                  i2u19_41 0B82                  __Hparam 0000  
                __Lparam 0000                  ___aldiv 0802                  ___awdiv 090E  
           __psmallconst 0800                  __pcinit 0C1E                  __ramtop 0800  
                __ptext0 09D2                  __ptext1 0A52                  __ptext2 0ACC  
                __ptext3 0802                  __ptext4 0C04                  __ptext5 0BE2  
                __ptext6 090E                  __ptext7 0B9C                  __ptext8 0C34  
              _T0CONbits 0FD5                  _cont_sr 003A         ___aldiv@dividend 000D  
                map@eMax 0023                  map@eMin 001F                  map@sMax 002B  
                map@sMin 0027           __pintcode_body 0B36     end_of_initialization 0C2A  
                int_func 0B36         ___aldiv@quotient 0017                  postinc0 0FEE  
              _TRISDbits 0F95               main@angulo 0031           __end_of___lmul 0B36  
    start_initialization 0C1E              __end_of_map 0ACC                 ??___lmul 0009  
           ??_Servo_Init 0001              __pbssCOMRAM 0032       __end_of_Servo_Init 0C1E  
          _Servo_1_Write 0BE2                __pintcode 0008                 ?___aldiv 000D  
               ?___awdiv 0001         Servo_1_Write@ang 0009              __smallconst 0800  
               _ADC_Init 0C34                 _ADC_Read 0B9C          ___aldiv@divisor 0011  
        ___aldiv@counter 0015           ?_Servo_1_Write 0001                 _LATDbits 0F8C  
               _TMR0_ISR 0008               _ADCON0bits 0FC2        ___lmul@multiplier 0001  
               __Hrparam 0000                 __Lrparam 0000            ADC_Init@p_ang 0001  
        ??_Servo_1_Write 0009                 isa$xinst 0000                 int$flags 003C  
             _INTCONbits 0FF2                 intlevel2 0000             ___aldiv@sign 0016  
