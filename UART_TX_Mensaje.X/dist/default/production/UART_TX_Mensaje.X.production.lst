

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Apr 19 09:47:46 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    16   000000                     
    17                           ; Generated 23/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000000                     _RCREG	set	4014
    52   000000                     _TXREG	set	4013
    53   000000                     _SPBRG	set	4015
    54   000000                     _BAUDCON	set	4024
    55   000000                     _RCSTAbits	set	4011
    56   000000                     _TXSTAbits	set	4012
    57   000000                     _BAUDCONbits	set	4024
    58   000000                     _TRISCbits	set	3988
    59   000000                     _ADCON1bits	set	4033
    60   000000                     _PIR1bits	set	3998
    61   000000                     _RCSTA	set	4011
    62   000000                     _TXSTA	set	4012
    63   000000                     _SPBRGH	set	4016
    64                           
    65                           	psect	smallconst
    66   000800                     __psmallconst:
    67                           	callstack 0
    68   000800  00                 	db	0
    69   000801                     STR_1:
    70   000801  48                 	db	72	;'H'
    71   000802  6F                 	db	111	;'o'
    72   000803  6C                 	db	108	;'l'
    73   000804  61                 	db	97	;'a'
    74   000805  20                 	db	32
    75   000806  64                 	db	100	;'d'
    76   000807  65                 	db	101	;'e'
    77   000808  73                 	db	115	;'s'
    78   000809  64                 	db	100	;'d'
    79   00080A  65                 	db	101	;'e'
    80   00080B  20                 	db	32
    81   00080C  65                 	db	101	;'e'
    82   00080D  6C                 	db	108	;'l'
    83   00080E  20                 	db	32
    84   00080F  50                 	db	80	;'P'
    85   000810  49                 	db	73	;'I'
    86   000811  43                 	db	67	;'C'
    87   000812  31                 	db	49	;'1'
    88   000813  38                 	db	56	;'8'
    89   000814  66                 	db	102	;'f'
    90   000815  34                 	db	52	;'4'
    91   000816  35                 	db	53	;'5'
    92   000817  35                 	db	53	;'5'
    93   000818  30                 	db	48	;'0'
    94   000819  0D                 	db	13
    95   00081A  0A                 	db	10
    96   00081B  00                 	db	0
    97   00081C  00                 	db	0	; dummy byte at the end
    98   000000                     
    99                           ; #config settings
   100                           
   101                           	psect	cinit
   102   0009B0                     __pcinit:
   103                           	callstack 0
   104   0009B0                     start_initialization:
   105                           	callstack 0
   106   0009B0                     __initialization:
   107                           	callstack 0
   108   0009B0                     end_of_initialization:
   109                           	callstack 0
   110   0009B0                     __end_of__initialization:
   111                           	callstack 0
   112   0009B0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   113   0009B2  6EF8               	movwf	tblptru,c
   114   0009B4  0E08               	movlw	high __Lsmallconst
   115   0009B6  6EF7               	movwf	tblptrh,c
   116   0009B8  0100               	movlb	0
   117   0009BA  EF98  F004         	goto	_main	;jump to C main() function
   118                           
   119                           	psect	cstackCOMRAM
   120   000001                     __pcstackCOMRAM:
   121                           	callstack 0
   122   000001                     ?___lldiv:
   123                           	callstack 0
   124   000001                     Uart_Send_Char@txData:
   125                           	callstack 0
   126   000001                     ___lldiv@dividend:
   127                           	callstack 0
   128                           
   129                           ; 4 bytes @ 0x0
   130   000001                     	ds	1
   131   000002                     Uart_Send_String@info:
   132                           	callstack 0
   133                           
   134                           ; 1 bytes @ 0x1
   135   000002                     	ds	1
   136   000003                     
   137                           ; 1 bytes @ 0x2
   138   000003                     	ds	2
   139   000005                     ___lldiv@divisor:
   140                           	callstack 0
   141                           
   142                           ; 4 bytes @ 0x4
   143   000005                     	ds	4
   144   000009                     ___lldiv@quotient:
   145                           	callstack 0
   146                           
   147                           ; 4 bytes @ 0x8
   148   000009                     	ds	4
   149   00000D                     ___lldiv@counter:
   150                           	callstack 0
   151                           
   152                           ; 1 bytes @ 0xC
   153   00000D                     	ds	1
   154   00000E                     Uart_Init@baud:
   155                           	callstack 0
   156                           
   157                           ; 4 bytes @ 0xD
   158   00000E                     	ds	4
   159   000012                     ??_Uart_Init:
   160                           
   161                           ; 1 bytes @ 0x11
   162   000012                     	ds	4
   163   000016                     Uart_Init@vx:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0x15
   167   000016                     	ds	2
   168   000018                     ??_main:
   169                           
   170                           ; 1 bytes @ 0x17
   171   000018                     	ds	2
   172                           
   173 ;;
   174 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   175 ;;
   176 ;; *************** function _main *****************
   177 ;; Defined at:
   178 ;;		line 22 in file "uart_tx_mensaje.c"
   179 ;; Parameters:    Size  Location     Type
   180 ;;		None
   181 ;; Auto vars:     Size  Location     Type
   182 ;;		None
   183 ;; Return value:  Size  Location     Type
   184 ;;                  1    wreg      void 
   185 ;; Registers used:
   186 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   187 ;; Tracked objects:
   188 ;;		On entry : 0/0
   189 ;;		On exit  : 0/0
   190 ;;		Unchanged: 0/0
   191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   192 ;;      Params:         0       0       0       0       0       0       0       0       0
   193 ;;      Locals:         0       0       0       0       0       0       0       0       0
   194 ;;      Temps:          2       0       0       0       0       0       0       0       0
   195 ;;      Totals:         2       0       0       0       0       0       0       0       0
   196 ;;Total ram usage:        2 bytes
   197 ;; Hardware stack levels required when called: 2
   198 ;; This function calls:
   199 ;;		_Uart_Init
   200 ;;		_Uart_Send_String
   201 ;; This function is called by:
   202 ;;		Startup code after reset
   203 ;; This function uses a non-reentrant model
   204 ;;
   205                           
   206                           	psect	text0
   207   000930                     __ptext0:
   208                           	callstack 0
   209   000930                     _main:
   210                           	callstack 29
   211   000930                     
   212                           ;uart_tx_mensaje.c: 23:     ADCON1bits.PCFG = 0x0F;
   213   000930  0E0F               	movlw	15
   214   000932  12C1               	iorwf	193,f,c	;volatile
   215   000934                     
   216                           ;uart_tx_mensaje.c: 24:     Uart_Init(9600);
   217   000934  0E80               	movlw	128
   218   000936  6E0E               	movwf	Uart_Init@baud^0,c
   219   000938  0E25               	movlw	37
   220   00093A  6E0F               	movwf	(Uart_Init@baud+1)^0,c
   221   00093C  0E00               	movlw	0
   222   00093E  6E10               	movwf	(Uart_Init@baud+2)^0,c
   223   000940  0E00               	movlw	0
   224   000942  6E11               	movwf	(Uart_Init@baud+3)^0,c
   225   000944  EC61  F004         	call	_Uart_Init	;wreg free
   226   000948                     l922:
   227                           
   228                           ;uart_tx_mensaje.c: 27:         Uart_Send_String("Hola desde el PIC18f4550\r\n");
   229   000948  0E01               	movlw	low STR_1
   230   00094A  6E02               	movwf	Uart_Send_String@info^0,c
   231   00094C  ECB7  F004         	call	_Uart_Send_String	;wreg free
   232   000950                     
   233                           ;uart_tx_mensaje.c: 28:         _delay((unsigned long)((200)*(48000000/4000.0)));
   234   000950  0E0D               	movlw	13
   235   000952  6E19               	movwf	(??_main+1)^0,c
   236   000954  0E2D               	movlw	45
   237   000956  6E18               	movwf	??_main^0,c
   238   000958  0ED8               	movlw	216
   239   00095A                     u197:
   240   00095A  2EE8               	decfsz	wreg,f,c
   241   00095C  D7FE               	bra	u197
   242   00095E  2E18               	decfsz	??_main^0,f,c
   243   000960  D7FC               	bra	u197
   244   000962  2E19               	decfsz	(??_main+1)^0,f,c
   245   000964  D7FA               	bra	u197
   246   000966  EFA4  F004         	goto	l922
   247   00096A  EF00  F000         	goto	start
   248   00096E                     __end_of_main:
   249                           	callstack 0
   250                           
   251 ;; *************** function _Uart_Send_String *****************
   252 ;; Defined at:
   253 ;;		line 35 in file "uart.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;  info            1    1[COMRAM] PTR unsigned char 
   256 ;;		 -> STR_1(27), 
   257 ;; Auto vars:     Size  Location     Type
   258 ;;		None
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   263 ;; Tracked objects:
   264 ;;		On entry : 0/0
   265 ;;		On exit  : 0/0
   266 ;;		Unchanged: 0/0
   267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   268 ;;      Params:         1       0       0       0       0       0       0       0       0
   269 ;;      Locals:         0       0       0       0       0       0       0       0       0
   270 ;;      Temps:          0       0       0       0       0       0       0       0       0
   271 ;;      Totals:         1       0       0       0       0       0       0       0       0
   272 ;;Total ram usage:        1 bytes
   273 ;; Hardware stack levels used: 1
   274 ;; Hardware stack levels required when called: 1
   275 ;; This function calls:
   276 ;;		_Uart_Send_Char
   277 ;; This function is called by:
   278 ;;		_main
   279 ;; This function uses a non-reentrant model
   280 ;;
   281                           
   282                           	psect	text1
   283   00096E                     __ptext1:
   284                           	callstack 0
   285   00096E                     _Uart_Send_String:
   286                           	callstack 29
   287   00096E                     
   288                           ;uart.c: 35: void Uart_Send_String(char *info);uart.c: 36: {;uart.c: 37:     while(*info
      +                          )
   289   00096E  EFC0  F004         	goto	l916
   290   000972                     l912:
   291                           
   292                           ;uart.c: 38:     {;uart.c: 39:         Uart_Send_Char(*info++);
   293   000972  C002  FFF6         	movff	Uart_Send_String@info,tblptrl
   294   000976                     	if	0	;There is only one active tblptr byte
   295   000976                     	endif
   296   000976                     	if	0	;tblptru may be non-zero
   297   000976                     	endif
   298   000976                     	if	0	;tblptru may be non-zero
   299   000976                     	endif
   300   000976  0008               	tblrd		*
   301   000978  50F5               	movf	tablat,w,c
   302   00097A  ECCD  F004         	call	_Uart_Send_Char
   303   00097E  2A02               	incf	Uart_Send_String@info^0,f,c
   304   000980                     l916:
   305                           
   306                           ;uart.c: 37:     while(*info)
   307   000980  C002  FFF6         	movff	Uart_Send_String@info,tblptrl
   308   000984                     	if	0	;There is only one active tblptr byte
   309   000984                     	endif
   310   000984                     	if	0	;tblptru may be non-zero
   311   000984                     	endif
   312   000984                     	if	0	;tblptru may be non-zero
   313   000984                     	endif
   314   000984  0008               	tblrd		*
   315   000986  50F5               	movf	tablat,w,c
   316   000988  0900               	iorlw	0
   317   00098A  A4D8               	btfss	status,2,c
   318   00098C  EFCA  F004         	goto	u181
   319   000990  EFCC  F004         	goto	u180
   320   000994                     u181:
   321   000994  EFB9  F004         	goto	l912
   322   000998                     u180:
   323   000998  0012               	return		;funcret
   324   00099A                     __end_of_Uart_Send_String:
   325                           	callstack 0
   326                           
   327 ;; *************** function _Uart_Send_Char *****************
   328 ;; Defined at:
   329 ;;		line 29 in file "uart.c"
   330 ;; Parameters:    Size  Location     Type
   331 ;;  txData          1    wreg     unsigned char 
   332 ;; Auto vars:     Size  Location     Type
   333 ;;  txData          1    0[COMRAM] unsigned char 
   334 ;; Return value:  Size  Location     Type
   335 ;;                  1    wreg      void 
   336 ;; Registers used:
   337 ;;		wreg
   338 ;; Tracked objects:
   339 ;;		On entry : 0/0
   340 ;;		On exit  : 0/0
   341 ;;		Unchanged: 0/0
   342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   343 ;;      Params:         0       0       0       0       0       0       0       0       0
   344 ;;      Locals:         1       0       0       0       0       0       0       0       0
   345 ;;      Temps:          0       0       0       0       0       0       0       0       0
   346 ;;      Totals:         1       0       0       0       0       0       0       0       0
   347 ;;Total ram usage:        1 bytes
   348 ;; Hardware stack levels used: 1
   349 ;; This function calls:
   350 ;;		Nothing
   351 ;; This function is called by:
   352 ;;		_Uart_Send_String
   353 ;; This function uses a non-reentrant model
   354 ;;
   355                           
   356                           	psect	text2
   357   00099A                     __ptext2:
   358                           	callstack 0
   359   00099A                     _Uart_Send_Char:
   360                           	callstack 29
   361                           
   362                           ;incstack = 0
   363                           ;Uart_Send_Char@txData stored from wreg
   364   00099A  6E01               	movwf	Uart_Send_Char@txData^0,c
   365   00099C                     l49:
   366   00099C  A2AC               	btfss	172,1,c	;volatile
   367   00099E  EFD3  F004         	goto	u11
   368   0009A2  EFD5  F004         	goto	u10
   369   0009A6                     u11:
   370   0009A6  EFCE  F004         	goto	l49
   371   0009AA                     u10:
   372   0009AA                     
   373                           ;uart.c: 32:     TXREG = txData;
   374   0009AA  C001  FFAD         	movff	Uart_Send_Char@txData,4013	;volatile
   375   0009AE  0012               	return		;funcret
   376   0009B0                     __end_of_Uart_Send_Char:
   377                           	callstack 0
   378                           
   379 ;; *************** function _Uart_Init *****************
   380 ;; Defined at:
   381 ;;		line 11 in file "uart.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;  baud            4   13[COMRAM] unsigned long 
   384 ;; Auto vars:     Size  Location     Type
   385 ;;  vx              2   21[COMRAM] unsigned int 
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      void 
   388 ;; Registers used:
   389 ;;		wreg, status,2, status,0, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   395 ;;      Params:         4       0       0       0       0       0       0       0       0
   396 ;;      Locals:         2       0       0       0       0       0       0       0       0
   397 ;;      Temps:          4       0       0       0       0       0       0       0       0
   398 ;;      Totals:        10       0       0       0       0       0       0       0       0
   399 ;;Total ram usage:       10 bytes
   400 ;; Hardware stack levels used: 1
   401 ;; Hardware stack levels required when called: 1
   402 ;; This function calls:
   403 ;;		___lldiv
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           	psect	text3
   410   0008C2                     __ptext3:
   411                           	callstack 0
   412   0008C2                     _Uart_Init:
   413                           	callstack 29
   414   0008C2                     
   415                           ;uart.c: 11: void Uart_Init(unsigned long baud);uart.c: 12: {;uart.c: 13:     TRISCbits.
      +                          RC6 = 0;
   416   0008C2  9C94               	bcf	148,6,c	;volatile
   417                           
   418                           ;uart.c: 14:     TRISCbits.RC7 = 1;
   419   0008C4  8E94               	bsf	148,7,c	;volatile
   420   0008C6                     
   421                           ;uart.c: 15:     TXSTA = 0x24;
   422   0008C6  0E24               	movlw	36
   423   0008C8  6EAC               	movwf	172,c	;volatile
   424                           
   425                           ;uart.c: 16:     RCSTA = 0x90;
   426   0008CA  0E90               	movlw	144
   427   0008CC  6EAB               	movwf	171,c	;volatile
   428                           
   429                           ;uart.c: 17:     BAUDCON = 0x00;
   430   0008CE  0E00               	movlw	0
   431   0008D0  6EB8               	movwf	184,c	;volatile
   432   0008D2                     
   433                           ;uart.c: 18:     BAUDCONbits.BRG16 = 1;
   434   0008D2  86B8               	bsf	184,3,c	;volatile
   435   0008D4                     
   436                           ;uart.c: 19:     unsigned int vx = (48000000/(baud*4))-1;
   437   0008D4  0E00               	movlw	0
   438   0008D6  6E01               	movwf	___lldiv@dividend^0,c
   439   0008D8  0E6C               	movlw	108
   440   0008DA  6E02               	movwf	(___lldiv@dividend+1)^0,c
   441   0008DC  0EDC               	movlw	220
   442   0008DE  6E03               	movwf	(___lldiv@dividend+2)^0,c
   443   0008E0  0E02               	movlw	2
   444   0008E2  6E04               	movwf	(___lldiv@dividend+3)^0,c
   445   0008E4  C00E  F012         	movff	Uart_Init@baud,??_Uart_Init
   446   0008E8  C00F  F013         	movff	Uart_Init@baud+1,??_Uart_Init+1
   447   0008EC  C010  F014         	movff	Uart_Init@baud+2,??_Uart_Init+2
   448   0008F0  C011  F015         	movff	Uart_Init@baud+3,??_Uart_Init+3
   449   0008F4  0E02               	movlw	2
   450   0008F6                     u175:
   451   0008F6  90D8               	bcf	status,0,c
   452   0008F8  3612               	rlcf	??_Uart_Init^0,f,c
   453   0008FA  3613               	rlcf	(??_Uart_Init+1)^0,f,c
   454   0008FC  3614               	rlcf	(??_Uart_Init+2)^0,f,c
   455   0008FE  3615               	rlcf	(??_Uart_Init+3)^0,f,c
   456   000900  2EE8               	decfsz	wreg,f,c
   457   000902  EF7B  F004         	goto	u175
   458   000906  C012  F005         	movff	??_Uart_Init,___lldiv@divisor
   459   00090A  C013  F006         	movff	??_Uart_Init+1,___lldiv@divisor+1
   460   00090E  C014  F007         	movff	??_Uart_Init+2,___lldiv@divisor+2
   461   000912  C015  F008         	movff	??_Uart_Init+3,___lldiv@divisor+3
   462   000916  EC0F  F004         	call	___lldiv	;wreg free
   463   00091A  0EFF               	movlw	255
   464   00091C  2401               	addwf	?___lldiv^0,w,c
   465   00091E  6E16               	movwf	Uart_Init@vx^0,c
   466   000920  0EFF               	movlw	255
   467   000922  2002               	addwfc	(?___lldiv+1)^0,w,c
   468   000924  6E17               	movwf	(Uart_Init@vx+1)^0,c
   469   000926                     
   470                           ;uart.c: 20:     SPBRG = vx & 0x00FF;
   471   000926  C016  FFAF         	movff	Uart_Init@vx,4015	;volatile
   472   00092A                     
   473                           ;uart.c: 21:     SPBRGH = vx >> 8;
   474   00092A  5017               	movf	(Uart_Init@vx+1)^0,w,c
   475   00092C  6EB0               	movwf	176,c	;volatile
   476   00092E  0012               	return		;funcret
   477   000930                     __end_of_Uart_Init:
   478                           	callstack 0
   479                           
   480 ;; *************** function ___lldiv *****************
   481 ;; Defined at:
   482 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
   483 ;; Parameters:    Size  Location     Type
   484 ;;  dividend        4    0[COMRAM] unsigned long 
   485 ;;  divisor         4    4[COMRAM] unsigned long 
   486 ;; Auto vars:     Size  Location     Type
   487 ;;  quotient        4    8[COMRAM] unsigned long 
   488 ;;  counter         1   12[COMRAM] unsigned char 
   489 ;; Return value:  Size  Location     Type
   490 ;;                  4    0[COMRAM] unsigned long 
   491 ;; Registers used:
   492 ;;		wreg, status,2, status,0
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   498 ;;      Params:         8       0       0       0       0       0       0       0       0
   499 ;;      Locals:         5       0       0       0       0       0       0       0       0
   500 ;;      Temps:          0       0       0       0       0       0       0       0       0
   501 ;;      Totals:        13       0       0       0       0       0       0       0       0
   502 ;;Total ram usage:       13 bytes
   503 ;; Hardware stack levels used: 1
   504 ;; This function calls:
   505 ;;		Nothing
   506 ;; This function is called by:
   507 ;;		_Uart_Init
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text4
   512   00081E                     __ptext4:
   513                           	callstack 0
   514   00081E                     ___lldiv:
   515                           	callstack 29
   516   00081E  0E00               	movlw	0
   517   000820  6E09               	movwf	___lldiv@quotient^0,c
   518   000822  0E00               	movlw	0
   519   000824  6E0A               	movwf	(___lldiv@quotient+1)^0,c
   520   000826  0E00               	movlw	0
   521   000828  6E0B               	movwf	(___lldiv@quotient+2)^0,c
   522   00082A  0E00               	movlw	0
   523   00082C  6E0C               	movwf	(___lldiv@quotient+3)^0,c
   524   00082E  5005               	movf	___lldiv@divisor^0,w,c
   525   000830  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
   526   000832  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
   527   000834  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
   528   000836  B4D8               	btfsc	status,2,c
   529   000838  EF20  F004         	goto	u141
   530   00083C  EF22  F004         	goto	u140
   531   000840                     u141:
   532   000840  EF58  F004         	goto	l114
   533   000844                     u140:
   534   000844  0E01               	movlw	1
   535   000846  6E0D               	movwf	___lldiv@counter^0,c
   536   000848  EF2C  F004         	goto	l884
   537   00084C                     l882:
   538   00084C  90D8               	bcf	status,0,c
   539   00084E  3605               	rlcf	___lldiv@divisor^0,f,c
   540   000850  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
   541   000852  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
   542   000854  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
   543   000856  2A0D               	incf	___lldiv@counter^0,f,c
   544   000858                     l884:
   545   000858  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
   546   00085A  EF31  F004         	goto	u151
   547   00085E  EF33  F004         	goto	u150
   548   000862                     u151:
   549   000862  EF26  F004         	goto	l882
   550   000866                     u150:
   551   000866                     l886:
   552   000866  90D8               	bcf	status,0,c
   553   000868  3609               	rlcf	___lldiv@quotient^0,f,c
   554   00086A  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
   555   00086C  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
   556   00086E  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
   557   000870  5005               	movf	___lldiv@divisor^0,w,c
   558   000872  5C01               	subwf	___lldiv@dividend^0,w,c
   559   000874  5006               	movf	(___lldiv@divisor+1)^0,w,c
   560   000876  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
   561   000878  5007               	movf	(___lldiv@divisor+2)^0,w,c
   562   00087A  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
   563   00087C  5008               	movf	(___lldiv@divisor+3)^0,w,c
   564   00087E  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
   565   000880  A0D8               	btfss	status,0,c
   566   000882  EF45  F004         	goto	u161
   567   000886  EF47  F004         	goto	u160
   568   00088A                     u161:
   569   00088A  EF50  F004         	goto	l894
   570   00088E                     u160:
   571   00088E  5005               	movf	___lldiv@divisor^0,w,c
   572   000890  5E01               	subwf	___lldiv@dividend^0,f,c
   573   000892  5006               	movf	(___lldiv@divisor+1)^0,w,c
   574   000894  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
   575   000896  5007               	movf	(___lldiv@divisor+2)^0,w,c
   576   000898  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
   577   00089A  5008               	movf	(___lldiv@divisor+3)^0,w,c
   578   00089C  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
   579   00089E  8009               	bsf	___lldiv@quotient^0,0,c
   580   0008A0                     l894:
   581   0008A0  90D8               	bcf	status,0,c
   582   0008A2  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
   583   0008A4  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
   584   0008A6  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
   585   0008A8  3205               	rrcf	___lldiv@divisor^0,f,c
   586   0008AA  2E0D               	decfsz	___lldiv@counter^0,f,c
   587   0008AC  EF33  F004         	goto	l886
   588   0008B0                     l114:
   589   0008B0  C009  F001         	movff	___lldiv@quotient,?___lldiv
   590   0008B4  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
   591   0008B8  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
   592   0008BC  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
   593   0008C0  0012               	return		;funcret
   594   0008C2                     __end_of___lldiv:
   595                           	callstack 0
   596                           
   597                           	psect	rparam
   598   000000                     
   599                           	psect	config
   600                           
   601                           ;Config register CONFIG1L @ 0x300000
   602                           ;	PLL Prescaler Selection bits
   603                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   604                           ;	System Clock Postscaler Selection bits
   605                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   606                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   607                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   608   300000                     	org	3145728
   609   300000  21                 	db	33
   610                           
   611                           ;Config register CONFIG1H @ 0x300001
   612                           ;	Oscillator Selection bits
   613                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   614                           ;	Fail-Safe Clock Monitor Enable bit
   615                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   616                           ;	Internal/External Oscillator Switchover bit
   617                           ;	IESO = OFF, Oscillator Switchover mode disabled
   618   300001                     	org	3145729
   619   300001  0E                 	db	14
   620                           
   621                           ;Config register CONFIG2L @ 0x300002
   622                           ;	Power-up Timer Enable bit
   623                           ;	PWRT = OFF, PWRT disabled
   624                           ;	Brown-out Reset Enable bits
   625                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   626                           ;	Brown-out Reset Voltage bits
   627                           ;	BORV = 3, Minimum setting 2.05V
   628                           ;	USB Voltage Regulator Enable bit
   629                           ;	VREGEN = OFF, USB voltage regulator disabled
   630   300002                     	org	3145730
   631   300002  19                 	db	25
   632                           
   633                           ;Config register CONFIG2H @ 0x300003
   634                           ;	Watchdog Timer Enable bit
   635                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   636                           ;	Watchdog Timer Postscale Select bits
   637                           ;	WDTPS = 32768, 1:32768
   638   300003                     	org	3145731
   639   300003  1E                 	db	30
   640                           
   641                           ; Padding undefined space
   642   300004                     	org	3145732
   643   300004  FF                 	db	255
   644                           
   645                           ;Config register CONFIG3H @ 0x300005
   646                           ;	CCP2 MUX bit
   647                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   648                           ;	PORTB A/D Enable bit
   649                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   650                           ;	Low-Power Timer 1 Oscillator Enable bit
   651                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   652                           ;	MCLR Pin Enable bit
   653                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   654   300005                     	org	3145733
   655   300005  81                 	db	129
   656                           
   657                           ;Config register CONFIG4L @ 0x300006
   658                           ;	Stack Full/Underflow Reset Enable bit
   659                           ;	STVREN = ON, Stack full/underflow will cause Reset
   660                           ;	Single-Supply ICSP Enable bit
   661                           ;	LVP = OFF, Single-Supply ICSP disabled
   662                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   663                           ;	ICPRT = OFF, ICPORT disabled
   664                           ;	Extended Instruction Set Enable bit
   665                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   666                           ;	Background Debugger Enable bit
   667                           ;	DEBUG = 0x1, unprogrammed default
   668   300006                     	org	3145734
   669   300006  81                 	db	129
   670                           
   671                           ; Padding undefined space
   672   300007                     	org	3145735
   673   300007  FF                 	db	255
   674                           
   675                           ;Config register CONFIG5L @ 0x300008
   676                           ;	Code Protection bit
   677                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   678                           ;	Code Protection bit
   679                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   680                           ;	Code Protection bit
   681                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   682                           ;	Code Protection bit
   683                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   684   300008                     	org	3145736
   685   300008  0F                 	db	15
   686                           
   687                           ;Config register CONFIG5H @ 0x300009
   688                           ;	Boot Block Code Protection bit
   689                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   690                           ;	Data EEPROM Code Protection bit
   691                           ;	CPD = OFF, Data EEPROM is not code-protected
   692   300009                     	org	3145737
   693   300009  C0                 	db	192
   694                           
   695                           ;Config register CONFIG6L @ 0x30000A
   696                           ;	Write Protection bit
   697                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   698                           ;	Write Protection bit
   699                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   700                           ;	Write Protection bit
   701                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   702                           ;	Write Protection bit
   703                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   704   30000A                     	org	3145738
   705   30000A  0F                 	db	15
   706                           
   707                           ;Config register CONFIG6H @ 0x30000B
   708                           ;	Configuration Register Write Protection bit
   709                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   710                           ;	Boot Block Write Protection bit
   711                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   712                           ;	Data EEPROM Write Protection bit
   713                           ;	WRTD = OFF, Data EEPROM is not write-protected
   714   30000B                     	org	3145739
   715   30000B  E0                 	db	224
   716                           
   717                           ;Config register CONFIG7L @ 0x30000C
   718                           ;	Table Read Protection bit
   719                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   720                           ;	Table Read Protection bit
   721                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   722                           ;	Table Read Protection bit
   723                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   724                           ;	Table Read Protection bit
   725                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   726   30000C                     	org	3145740
   727   30000C  0F                 	db	15
   728                           
   729                           ;Config register CONFIG7H @ 0x30000D
   730                           ;	Boot Block Table Read Protection bit
   731                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   732   30000D                     	org	3145741
   733   30000D  40                 	db	64
   734                           tosu	equ	0xFFF
   735                           tosh	equ	0xFFE
   736                           tosl	equ	0xFFD
   737                           stkptr	equ	0xFFC
   738                           pclatu	equ	0xFFB
   739                           pclath	equ	0xFFA
   740                           pcl	equ	0xFF9
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           prodh	equ	0xFF4
   746                           prodl	equ	0xFF3
   747                           indf0	equ	0xFEF
   748                           postinc0	equ	0xFEE
   749                           postdec0	equ	0xFED
   750                           preinc0	equ	0xFEC
   751                           plusw0	equ	0xFEB
   752                           fsr0h	equ	0xFEA
   753                           fsr0l	equ	0xFE9
   754                           wreg	equ	0xFE8
   755                           indf1	equ	0xFE7
   756                           postinc1	equ	0xFE6
   757                           postdec1	equ	0xFE5
   758                           preinc1	equ	0xFE4
   759                           plusw1	equ	0xFE3
   760                           fsr1h	equ	0xFE2
   761                           fsr1l	equ	0xFE1
   762                           bsr	equ	0xFE0
   763                           indf2	equ	0xFDF
   764                           postinc2	equ	0xFDE
   765                           postdec2	equ	0xFDD
   766                           preinc2	equ	0xFDC
   767                           plusw2	equ	0xFDB
   768                           fsr2h	equ	0xFDA
   769                           fsr2l	equ	0xFD9
   770                           status	equ	0xFD8

Data Sizes:
    Strings     27
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     25      25
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Uart_Send_String@info	PTR unsigned char  size(1) Largest target is 27
		 -> STR_1(CODE[27]), 


Critical Paths under _main in COMRAM

    _main->_Uart_Init
    _Uart_Send_String->_Uart_Send_Char
    _Uart_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     593
                                             23 COMRAM     2     2      0
                          _Uart_Init
                   _Uart_Send_String
 ---------------------------------------------------------------------------------
 (1) _Uart_Send_String                                     1     0      1     136
                                              1 COMRAM     1     0      1
                     _Uart_Send_Char
 ---------------------------------------------------------------------------------
 (2) _Uart_Send_Char                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Uart_Init                                           10     6      4     457
                                             13 COMRAM    10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Uart_Init
     ___lldiv
   _Uart_Send_String
     _Uart_Send_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     19      19       1       26.3%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBIGSFRh          3E      0       0      21        0.0%
BITBIGSFRlhhh        8      0       0      22        0.0%
BITBIGSFRlhhlh       7      0       0      23        0.0%
BITBIGSFRlhlh        C      0       0      24        0.0%
BITBIGSFRlhll        9      0       0      25        0.0%
BITBIGSFRll         34      0       0      26        0.0%
BIGRAM             7FF      0       0      27        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Apr 19 09:47:46 2024

                      l43 092E                        l52 09AE                        l49 099C  
                      l58 0998                        u10 09AA                        u11 09A6  
                     l121 08C0                       l114 08B0                       l900 08C6  
                     l902 08D2                       l910 096E                       l904 08D4  
                     l760 099C                       l912 0972                       l920 0934  
                     l906 0926                       l762 09AA                       l914 097E  
                     l922 0948                       l908 092A                       l916 0980  
                     l924 0950                       l918 0930                       l880 0844  
                     l890 088E                       l882 084C                       l892 089E  
                     l884 0858                       l876 081E                       l894 08A0  
                     l886 0866                       l878 082E                       l896 08AA  
                     l888 0870                       l898 08C2                       u140 0844  
                     u141 0840                       u150 0866                       u151 0862  
                     u160 088E                       u161 088A                       u180 0998  
                     u181 0994                       u175 08F6                       u197 095A  
                     wreg 0FE8                      STR_1 0801                      _main 0930  
                    start 0000              ___param_bank 0000                     ?_main 0001  
         __end_of___lldiv 08C2                     _RCREG 0FAE                     _RCSTA 0FAB  
                   _SPBRG 0FAF                     _TXREG 0FAD                     _TXSTA 0FAC  
                   tablat 0FF5  __end_of_Uart_Send_String 099A                     status 0FD8  
         __initialization 09B0              __end_of_main 096E                    ??_main 0018  
           __activetblptr 0001                    _SPBRGH 0FB0                 ??___lldiv 0009  
                  isa$std 0001            _Uart_Send_Char 099A              __mediumconst 0000  
                  tblptrh 0FF7                    tblptrl 0FF6                    tblptru 0FF8  
              __accesstop 0060   __end_of__initialization 09B0             ___rparam_used 0001  
          __pcstackCOMRAM 0001    __end_of_Uart_Send_Char 09B0         __end_of_Uart_Init 0930  
         ?_Uart_Send_Char 0001                   _BAUDCON 0FB8               Uart_Init@vx 0016  
       ?_Uart_Send_String 0002      Uart_Send_Char@txData 0001        ??_Uart_Send_String 0003  
                 __Hparam 0000                   __Lparam 0000                   ___lldiv 081E  
            __psmallconst 0800                   __pcinit 09B0                   __ramtop 0800  
                 __ptext0 0930                   __ptext1 096E                   __ptext2 099A  
                 __ptext3 08C2                   __ptext4 081E      end_of_initialization 09B0  
         ___lldiv@divisor 0005             Uart_Init@baud 000E           ___lldiv@counter 000D  
               _RCSTAbits 0FAB                 _TRISCbits 0F94                 _TXSTAbits 0FAC  
             _BAUDCONbits 0FB8       start_initialization 09B0          ??_Uart_Send_Char 0001  
               _Uart_Init 08C2                ?_Uart_Init 000E                  ?___lldiv 0001  
             __smallconst 0800                  _PIR1bits 0F9E                _ADCON1bits 0FC1  
                __Hrparam 0000               ??_Uart_Init 0012                  __Lrparam 0000  
            __Lsmallconst 0800      Uart_Send_String@info 0002                  isa$xinst 0000  
        _Uart_Send_String 096E          ___lldiv@dividend 0001          ___lldiv@quotient 0009  
