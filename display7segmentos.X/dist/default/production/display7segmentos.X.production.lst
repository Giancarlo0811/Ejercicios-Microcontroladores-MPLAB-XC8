

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Feb 20 17:10:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    15   000000                     
    16                           ; Generated 23/03/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4550 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50   000000                     
    51                           	psect	idataCOMRAM
    52   000944                     __pidataCOMRAM:
    53                           	callstack 0
    54                           
    55                           ;initializer for _display
    56   000944  3F                 	db	63
    57   000945  06                 	db	6
    58   000946  5B                 	db	91
    59   000947  4F                 	db	79
    60   000948  66                 	db	102
    61   000949  6D                 	db	109
    62   00094A  7D                 	db	125
    63   00094B  07                 	db	7
    64   00094C  7F                 	db	127
    65   00094D  6F                 	db	111
    66   000000                     _PORTBbits	set	3969
    67   000000                     _LATD	set	3980
    68   000000                     _TRISBbits	set	3987
    69   000000                     _ADCON1bits	set	4033
    70   000000                     _TRISD	set	3989
    71                           
    72                           ; #config settings
    73                           
    74                           	psect	cinit
    75   00091A                     __pcinit:
    76                           	callstack 0
    77   00091A                     start_initialization:
    78                           	callstack 0
    79   00091A                     __initialization:
    80                           	callstack 0
    81                           
    82                           ; Initialize objects allocated to COMRAM (10 bytes)
    83                           ; load TBLPTR registers with __pidataCOMRAM
    84   00091A  0E44               	movlw	low __pidataCOMRAM
    85   00091C  6EF6               	movwf	tblptrl,c
    86   00091E  0E09               	movlw	high __pidataCOMRAM
    87   000920  6EF7               	movwf	tblptrh,c
    88   000922  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    89   000924  6EF8               	movwf	tblptru,c
    90   000926  EE00  F001         	lfsr	0,__pdataCOMRAM
    91   00092A  EE10 F00A          	lfsr	1,10
    92   00092E                     copy_data0:
    93   00092E  0009               	tblrd		*+
    94   000930  CFF5 FFEE          	movff	tablat,postinc0
    95   000934  50E5               	movf	postdec1,w,c
    96   000936  50E1               	movf	fsr1l,w,c
    97   000938  E1FA               	bnz	copy_data0
    98                           
    99                           ; Clear objects allocated to COMRAM (2 bytes)
   100   00093A  6A0C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   101   00093C  6A0B               	clrf	__pbssCOMRAM& (0+255),c
   102   00093E                     end_of_initialization:
   103                           	callstack 0
   104   00093E                     __end_of__initialization:
   105                           	callstack 0
   106   00093E  0100               	movlb	0
   107   000940  EF01  F004         	goto	_main	;jump to C main() function
   108                           
   109                           	psect	bssCOMRAM
   110   00000B                     __pbssCOMRAM:
   111                           	callstack 0
   112   00000B                     _contador:
   113                           	callstack 0
   114   00000B                     	ds	2
   115                           
   116                           	psect	dataCOMRAM
   117   000001                     __pdataCOMRAM:
   118                           	callstack 0
   119   000001                     _display:
   120                           	callstack 0
   121   000001                     	ds	10
   122                           
   123                           	psect	cstackCOMRAM
   124   00000D                     __pcstackCOMRAM:
   125                           	callstack 0
   126   00000D                     ??_main:
   127                           
   128                           ; 1 bytes @ 0x0
   129   00000D                     	ds	2
   130                           
   131 ;;
   132 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   133 ;;
   134 ;; *************** function _main *****************
   135 ;; Defined at:
   136 ;;		line 24 in file "display7segmentos.c"
   137 ;; Parameters:    Size  Location     Type
   138 ;;		None
   139 ;; Auto vars:     Size  Location     Type
   140 ;;		None
   141 ;; Return value:  Size  Location     Type
   142 ;;                  1    wreg      void 
   143 ;; Registers used:
   144 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   145 ;; Tracked objects:
   146 ;;		On entry : 0/0
   147 ;;		On exit  : 0/0
   148 ;;		Unchanged: 0/0
   149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   150 ;;      Params:         0       0       0       0       0       0       0       0       0
   151 ;;      Locals:         0       0       0       0       0       0       0       0       0
   152 ;;      Temps:          2       0       0       0       0       0       0       0       0
   153 ;;      Totals:         2       0       0       0       0       0       0       0       0
   154 ;;Total ram usage:        2 bytes
   155 ;; This function calls:
   156 ;;		Nothing
   157 ;; This function is called by:
   158 ;;		Startup code after reset
   159 ;; This function uses a non-reentrant model
   160 ;;
   161                           
   162                           	psect	text0
   163   000802                     __ptext0:
   164                           	callstack 0
   165   000802                     _main:
   166                           	callstack 31
   167   000802                     
   168                           ;display7segmentos.c: 25:     ADCON1bits.PCFG = 0x0F;
   169   000802  0E0F               	movlw	15
   170   000804  12C1               	iorwf	193,f,c	;volatile
   171   000806                     
   172                           ;display7segmentos.c: 26:     TRISBbits.RB0 = 1;
   173   000806  8093               	bsf	147,0,c	;volatile
   174   000808                     
   175                           ;display7segmentos.c: 27:     TRISBbits.RB1 = 1;
   176   000808  8293               	bsf	147,1,c	;volatile
   177                           
   178                           ;display7segmentos.c: 28:     TRISD = 0x00;
   179   00080A  0E00               	movlw	0
   180   00080C  6E95               	movwf	149,c	;volatile
   181                           
   182                           ;display7segmentos.c: 29:     LATD = 0x00;
   183   00080E  0E00               	movlw	0
   184   000810  6E8C               	movwf	140,c	;volatile
   185   000812                     
   186                           ;display7segmentos.c: 30:     LATD = display[contador];
   187   000812  500B               	movf	_contador^0,w,c
   188   000814  0F01               	addlw	low _display
   189   000816  6ED9               	movwf	fsr2l,c
   190   000818  6ADA               	clrf	fsr2h,c
   191   00081A  50DF               	movf	indf2,w,c
   192   00081C  6E8C               	movwf	140,c	;volatile
   193   00081E                     l720:
   194                           
   195                           ;display7segmentos.c: 33:         if (PORTBbits.RB0 == 1) {
   196   00081E  A081               	btfss	129,0,c	;volatile
   197   000820  EF14  F004         	goto	u11
   198   000824  EF16  F004         	goto	u10
   199   000828                     u11:
   200   000828  EF4F  F004         	goto	l22
   201   00082C                     u10:
   202   00082C                     l23:
   203   00082C  B081               	btfsc	129,0,c	;volatile
   204   00082E  EF1B  F004         	goto	u21
   205   000832  EF1D  F004         	goto	u20
   206   000836                     u21:
   207   000836  EF16  F004         	goto	l23
   208   00083A                     u20:
   209   00083A                     
   210                           ;display7segmentos.c: 36:             _delay((unsigned long)((20)*(48000000/4000.0)));
   211   00083A  0E02               	movlw	2
   212   00083C  6E0E               	movwf	(??_main+1)^0,c
   213   00083E  0E38               	movlw	56
   214   000840  6E0D               	movwf	??_main^0,c
   215   000842  0EAD               	movlw	173
   216   000844                     u77:
   217   000844  2EE8               	decfsz	wreg,f,c
   218   000846  D7FE               	bra	u77
   219   000848  2E0D               	decfsz	??_main^0,f,c
   220   00084A  D7FC               	bra	u77
   221   00084C  2E0E               	decfsz	(??_main+1)^0,f,c
   222   00084E  D7FA               	bra	u77
   223   000850  0000               	nop	
   224   000852                     
   225                           ;display7segmentos.c: 38:             for (contador = 0; contador < 10; contador++) {
   226   000852  0E00               	movlw	0
   227   000854  6E0C               	movwf	(_contador+1)^0,c
   228   000856  0E00               	movlw	0
   229   000858  6E0B               	movwf	_contador^0,c
   230   00085A                     l732:
   231                           
   232                           ;display7segmentos.c: 39:                 LATD = display[contador];
   233   00085A  500B               	movf	_contador^0,w,c
   234   00085C  0F01               	addlw	low _display
   235   00085E  6ED9               	movwf	fsr2l,c
   236   000860  6ADA               	clrf	fsr2h,c
   237   000862  50DF               	movf	indf2,w,c
   238   000864  6E8C               	movwf	140,c	;volatile
   239   000866                     
   240                           ;display7segmentos.c: 40:                 _delay((unsigned long)((500)*(48000000/4000.0)
      +                          ));
   241   000866  0E1F               	movlw	31
   242   000868  6E0E               	movwf	(??_main+1)^0,c
   243   00086A  0E71               	movlw	113
   244   00086C  6E0D               	movwf	??_main^0,c
   245   00086E  0E1E               	movlw	30
   246   000870                     u87:
   247   000870  2EE8               	decfsz	wreg,f,c
   248   000872  D7FE               	bra	u87
   249   000874  2E0D               	decfsz	??_main^0,f,c
   250   000876  D7FC               	bra	u87
   251   000878  2E0E               	decfsz	(??_main+1)^0,f,c
   252   00087A  D7FA               	bra	u87
   253   00087C  D000               	nop2	
   254   00087E                     
   255                           ;display7segmentos.c: 41:             }
   256   00087E  4A0B               	infsnz	_contador^0,f,c
   257   000880  2A0C               	incf	(_contador+1)^0,f,c
   258   000882  BE0C               	btfsc	(_contador+1)^0,7,c
   259   000884  EF4D  F004         	goto	u31
   260   000888  500C               	movf	(_contador+1)^0,w,c
   261   00088A  E109               	bnz	u30
   262   00088C  0E0A               	movlw	10
   263   00088E  5C0B               	subwf	_contador^0,w,c
   264   000890  A0D8               	btfss	status,0,c
   265   000892  EF4D  F004         	goto	u31
   266   000896  EF4F  F004         	goto	u30
   267   00089A                     u31:
   268   00089A  EF2D  F004         	goto	l732
   269   00089E                     u30:
   270   00089E                     l22:
   271                           
   272                           ;display7segmentos.c: 44:         if (PORTBbits.RB1 == 1) {
   273   00089E  A281               	btfss	129,1,c	;volatile
   274   0008A0  EF54  F004         	goto	u41
   275   0008A4  EF56  F004         	goto	u40
   276   0008A8                     u41:
   277   0008A8  EF0F  F004         	goto	l720
   278   0008AC                     u40:
   279   0008AC                     l29:
   280   0008AC  B281               	btfsc	129,1,c	;volatile
   281   0008AE  EF5B  F004         	goto	u51
   282   0008B2  EF5D  F004         	goto	u50
   283   0008B6                     u51:
   284   0008B6  EF56  F004         	goto	l29
   285   0008BA                     u50:
   286   0008BA                     
   287                           ;display7segmentos.c: 47:             _delay((unsigned long)((20)*(48000000/4000.0)));
   288   0008BA  0E02               	movlw	2
   289   0008BC  6E0E               	movwf	(??_main+1)^0,c
   290   0008BE  0E38               	movlw	56
   291   0008C0  6E0D               	movwf	??_main^0,c
   292   0008C2  0EAD               	movlw	173
   293   0008C4                     u97:
   294   0008C4  2EE8               	decfsz	wreg,f,c
   295   0008C6  D7FE               	bra	u97
   296   0008C8  2E0D               	decfsz	??_main^0,f,c
   297   0008CA  D7FC               	bra	u97
   298   0008CC  2E0E               	decfsz	(??_main+1)^0,f,c
   299   0008CE  D7FA               	bra	u97
   300   0008D0  0000               	nop	
   301   0008D2                     
   302                           ;display7segmentos.c: 49:             for (contador = 9; contador >= 0; contador--) {
   303   0008D2  0E00               	movlw	0
   304   0008D4  6E0C               	movwf	(_contador+1)^0,c
   305   0008D6  0E09               	movlw	9
   306   0008D8  6E0B               	movwf	_contador^0,c
   307   0008DA                     l750:
   308                           
   309                           ;display7segmentos.c: 50:                LATD = display[contador];
   310   0008DA  500B               	movf	_contador^0,w,c
   311   0008DC  0F01               	addlw	low _display
   312   0008DE  6ED9               	movwf	fsr2l,c
   313   0008E0  6ADA               	clrf	fsr2h,c
   314   0008E2  50DF               	movf	indf2,w,c
   315   0008E4  6E8C               	movwf	140,c	;volatile
   316   0008E6                     
   317                           ;display7segmentos.c: 51:                _delay((unsigned long)((500)*(48000000/4000.0))
      +                          );
   318   0008E6  0E1F               	movlw	31
   319   0008E8  6E0E               	movwf	(??_main+1)^0,c
   320   0008EA  0E71               	movlw	113
   321   0008EC  6E0D               	movwf	??_main^0,c
   322   0008EE  0E1E               	movlw	30
   323   0008F0                     u107:
   324   0008F0  2EE8               	decfsz	wreg,f,c
   325   0008F2  D7FE               	bra	u107
   326   0008F4  2E0D               	decfsz	??_main^0,f,c
   327   0008F6  D7FC               	bra	u107
   328   0008F8  2E0E               	decfsz	(??_main+1)^0,f,c
   329   0008FA  D7FA               	bra	u107
   330   0008FC  D000               	nop2	
   331   0008FE                     
   332                           ;display7segmentos.c: 52:             }
   333   0008FE  060B               	decf	_contador^0,f,c
   334   000900  A0D8               	btfss	status,0,c
   335   000902  060C               	decf	(_contador+1)^0,f,c
   336   000904  BE0C               	btfsc	(_contador+1)^0,7,c
   337   000906  EF89  F004         	goto	u60
   338   00090A  EF87  F004         	goto	u61
   339   00090E                     u61:
   340   00090E  EF6D  F004         	goto	l750
   341   000912                     u60:
   342   000912  EF0F  F004         	goto	l720
   343   000916  EF00  F000         	goto	start
   344   00091A                     __end_of_main:
   345                           	callstack 0
   346                           
   347                           	psect	smallconst
   348   000800                     __psmallconst:
   349                           	callstack 0
   350   000800  00                 	db	0
   351   000801  00                 	db	0	; dummy byte at the end
   352   000000                     
   353                           	psect	rparam
   354   000000                     
   355                           	psect	config
   356                           
   357                           ;Config register CONFIG1L @ 0x300000
   358                           ;	PLL Prescaler Selection bits
   359                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   360                           ;	System Clock Postscaler Selection bits
   361                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   362                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   363                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   364   300000                     	org	3145728
   365   300000  21                 	db	33
   366                           
   367                           ;Config register CONFIG1H @ 0x300001
   368                           ;	Oscillator Selection bits
   369                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   370                           ;	Fail-Safe Clock Monitor Enable bit
   371                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   372                           ;	Internal/External Oscillator Switchover bit
   373                           ;	IESO = OFF, Oscillator Switchover mode disabled
   374   300001                     	org	3145729
   375   300001  0E                 	db	14
   376                           
   377                           ;Config register CONFIG2L @ 0x300002
   378                           ;	Power-up Timer Enable bit
   379                           ;	PWRT = OFF, PWRT disabled
   380                           ;	Brown-out Reset Enable bits
   381                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   382                           ;	Brown-out Reset Voltage bits
   383                           ;	BORV = 3, Minimum setting 2.05V
   384                           ;	USB Voltage Regulator Enable bit
   385                           ;	VREGEN = OFF, USB voltage regulator disabled
   386   300002                     	org	3145730
   387   300002  19                 	db	25
   388                           
   389                           ;Config register CONFIG2H @ 0x300003
   390                           ;	Watchdog Timer Enable bit
   391                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   392                           ;	Watchdog Timer Postscale Select bits
   393                           ;	WDTPS = 32768, 1:32768
   394   300003                     	org	3145731
   395   300003  1E                 	db	30
   396                           
   397                           ; Padding undefined space
   398   300004                     	org	3145732
   399   300004  FF                 	db	255
   400                           
   401                           ;Config register CONFIG3H @ 0x300005
   402                           ;	CCP2 MUX bit
   403                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   404                           ;	PORTB A/D Enable bit
   405                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   406                           ;	Low-Power Timer 1 Oscillator Enable bit
   407                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   408                           ;	MCLR Pin Enable bit
   409                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   410   300005                     	org	3145733
   411   300005  81                 	db	129
   412                           
   413                           ;Config register CONFIG4L @ 0x300006
   414                           ;	Stack Full/Underflow Reset Enable bit
   415                           ;	STVREN = ON, Stack full/underflow will cause Reset
   416                           ;	Single-Supply ICSP Enable bit
   417                           ;	LVP = OFF, Single-Supply ICSP disabled
   418                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   419                           ;	ICPRT = OFF, ICPORT disabled
   420                           ;	Extended Instruction Set Enable bit
   421                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   422                           ;	Background Debugger Enable bit
   423                           ;	DEBUG = 0x1, unprogrammed default
   424   300006                     	org	3145734
   425   300006  81                 	db	129
   426                           
   427                           ; Padding undefined space
   428   300007                     	org	3145735
   429   300007  FF                 	db	255
   430                           
   431                           ;Config register CONFIG5L @ 0x300008
   432                           ;	Code Protection bit
   433                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   434                           ;	Code Protection bit
   435                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   436                           ;	Code Protection bit
   437                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   438                           ;	Code Protection bit
   439                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   440   300008                     	org	3145736
   441   300008  0F                 	db	15
   442                           
   443                           ;Config register CONFIG5H @ 0x300009
   444                           ;	Boot Block Code Protection bit
   445                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   446                           ;	Data EEPROM Code Protection bit
   447                           ;	CPD = OFF, Data EEPROM is not code-protected
   448   300009                     	org	3145737
   449   300009  C0                 	db	192
   450                           
   451                           ;Config register CONFIG6L @ 0x30000A
   452                           ;	Write Protection bit
   453                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   454                           ;	Write Protection bit
   455                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   456                           ;	Write Protection bit
   457                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   458                           ;	Write Protection bit
   459                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   460   30000A                     	org	3145738
   461   30000A  0F                 	db	15
   462                           
   463                           ;Config register CONFIG6H @ 0x30000B
   464                           ;	Configuration Register Write Protection bit
   465                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   466                           ;	Boot Block Write Protection bit
   467                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   468                           ;	Data EEPROM Write Protection bit
   469                           ;	WRTD = OFF, Data EEPROM is not write-protected
   470   30000B                     	org	3145739
   471   30000B  E0                 	db	224
   472                           
   473                           ;Config register CONFIG7L @ 0x30000C
   474                           ;	Table Read Protection bit
   475                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   476                           ;	Table Read Protection bit
   477                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   478                           ;	Table Read Protection bit
   479                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   480                           ;	Table Read Protection bit
   481                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   482   30000C                     	org	3145740
   483   30000C  0F                 	db	15
   484                           
   485                           ;Config register CONFIG7H @ 0x30000D
   486                           ;	Boot Block Table Read Protection bit
   487                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   488   30000D                     	org	3145741
   489   30000D  40                 	db	64
   490                           tosu	equ	0xFFF
   491                           tosh	equ	0xFFE
   492                           tosl	equ	0xFFD
   493                           stkptr	equ	0xFFC
   494                           pclatu	equ	0xFFB
   495                           pclath	equ	0xFFA
   496                           pcl	equ	0xFF9
   497                           tblptru	equ	0xFF8
   498                           tblptrh	equ	0xFF7
   499                           tblptrl	equ	0xFF6
   500                           tablat	equ	0xFF5
   501                           prodh	equ	0xFF4
   502                           prodl	equ	0xFF3
   503                           indf0	equ	0xFEF
   504                           postinc0	equ	0xFEE
   505                           postdec0	equ	0xFED
   506                           preinc0	equ	0xFEC
   507                           plusw0	equ	0xFEB
   508                           fsr0h	equ	0xFEA
   509                           fsr0l	equ	0xFE9
   510                           wreg	equ	0xFE8
   511                           indf1	equ	0xFE7
   512                           postinc1	equ	0xFE6
   513                           postdec1	equ	0xFE5
   514                           preinc1	equ	0xFE4
   515                           plusw1	equ	0xFE3
   516                           fsr1h	equ	0xFE2
   517                           fsr1l	equ	0xFE1
   518                           bsr	equ	0xFE0
   519                           indf2	equ	0xFDF
   520                           postinc2	equ	0xFDE
   521                           postdec2	equ	0xFDD
   522                           preinc2	equ	0xFDC
   523                           plusw2	equ	0xFDB
   524                           fsr2h	equ	0xFDA
   525                           fsr2l	equ	0xFD9
   526                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      2      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      2       E       1       14.7%
BITBIGSFRh          3E      0       0      21        0.0%
BITBIGSFRlhh        2B      0       0      22        0.0%
BITBIGSFRllll       21      0       0      26        0.0%
BITBIGSFRlllh        A      0       0      25        0.0%
BITBIGSFRllh         6      0       0      24        0.0%
BITBIGSFRlhl         1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       E       3        0.0%
DATA                 0      0       E       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Feb 20 17:10:30 2024

                     l22 089E                       l23 082C                       l29 08AC  
                     u10 082C                       u11 0828                       u20 083A  
                     u21 0836                       u30 089E                       u31 089A  
                     u40 08AC                       u41 08A8                       u50 08BA  
                     u51 08B6                       u60 0912                       u61 090E  
                     u77 0844                       u87 0870                       u97 08C4  
                    l720 081E                      l712 0802                      l714 0806  
                    l732 085A                      l724 083A                      l716 0808  
                    l750 08DA                      l742 08BA                      l734 0866  
                    l726 0852                      l718 0812                      l752 08E6  
                    l744 08D2                      l736 087E                      l754 08FE  
                    l738 0882                      l756 0904                      u107 08F0  
                    wreg 0FE8                     _LATD 0F8C                     _main 0802  
                   fsr2h 0FDA                     indf2 0FDF                     fsr1l 0FE1  
                   fsr2l 0FD9                     start 0000             ___param_bank 0000  
                  ?_main 000D                    _TRISD 0F95                    tablat 0FF5  
                  status 0FD8          __initialization 091A             __end_of_main 091A  
                 ??_main 000D            __activetblptr 0000                   isa$std 0001  
           __pdataCOMRAM 0001             __mediumconst 0000                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8               __accesstop 0060  
__end_of__initialization 093E            ___rparam_used 0001           __pcstackCOMRAM 000D  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
                __pcinit 091A                  __ramtop 0800                  __ptext0 0802  
                _display 0001     end_of_initialization 093E                  postdec1 0FE5  
                postinc0 0FEE                _PORTBbits 0F81                _TRISBbits 0F93  
          __pidataCOMRAM 0944      start_initialization 091A              __pbssCOMRAM 000B  
            __smallconst 0800               _ADCON1bits 0FC1                copy_data0 092E  
               __Hrparam 0000                 __Lrparam 0000                 _contador 000B  
               isa$xinst 0000  
